// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/auth_usecase.go

// Package controller is a generated GoMock package.
package controller

import (
	context "context"
	reflect "reflect"

	entity "github.com/Ulyana-kru00/forum-project/internal/entity"
usecase "github.com/Ulyana-kru00/forum-project/internal/usecase"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthUsecaseInterface is a mock of AuthUsecaseInterface interface.
type MockAuthUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUsecaseInterfaceMockRecorder
}

// MockAuthUsecaseInterfaceMockRecorder is the mock recorder for MockAuthUsecaseInterface.
type MockAuthUsecaseInterfaceMockRecorder struct {
	mock *MockAuthUsecaseInterface
}

// NewMockAuthUsecaseInterface creates a new mock instance.
func NewMockAuthUsecaseInterface(ctrl *gomock.Controller) *MockAuthUsecaseInterface {
	mock := &MockAuthUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockAuthUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUsecaseInterface) EXPECT() *MockAuthUsecaseInterfaceMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockAuthUsecaseInterface) GetUser(ctx context.Context, req *usecase.GetUserRequest) (*usecase.GetUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, req)
	ret0, _ := ret[0].(*usecase.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockAuthUsecaseInterfaceMockRecorder) GetUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockAuthUsecaseInterface)(nil).GetUser), ctx, req)
}

// GetUserByID mocks base method.
func (m *MockAuthUsecaseInterface) GetUserByID(ctx context.Context, userID string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockAuthUsecaseInterfaceMockRecorder) GetUserByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockAuthUsecaseInterface)(nil).GetUserByID), ctx, userID)
}

// Login mocks base method.
func (m *MockAuthUsecaseInterface) Login(ctx context.Context, req *usecase.LoginRequest) (*usecase.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, req)
	ret0, _ := ret[0].(*usecase.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthUsecaseInterfaceMockRecorder) Login(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthUsecaseInterface)(nil).Login), ctx, req)
}

// Register mocks base method.
func (m *MockAuthUsecaseInterface) Register(ctx context.Context, req *usecase.RegisterRequest) (*usecase.RegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, req)
	ret0, _ := ret[0].(*usecase.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthUsecaseInterfaceMockRecorder) Register(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthUsecaseInterface)(nil).Register), ctx, req)
}

// ValidateToken mocks base method.
func (m *MockAuthUsecaseInterface) ValidateToken(ctx context.Context, req *usecase.ValidateTokenRequest) (*usecase.ValidateTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", ctx, req)
	ret0, _ := ret[0].(*usecase.ValidateTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockAuthUsecaseInterfaceMockRecorder) ValidateToken(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockAuthUsecaseInterface)(nil).ValidateToken), ctx, req)
}
