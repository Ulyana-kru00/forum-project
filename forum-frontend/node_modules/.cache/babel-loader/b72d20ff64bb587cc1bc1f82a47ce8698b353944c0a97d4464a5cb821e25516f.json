{"ast":null,"code":"var _jsxFileName = \"/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/Posts/PostList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from 'react';\nimport axios from 'axios';\nimport '../MainLayout.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostList = ({\n  refreshTrigger\n}) => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const handleDeletePost = async (postId, authorId) => {\n    const confirmDelete = window.confirm(\"Are you sure you want to delete this post?\");\n    if (!confirmDelete) return;\n    try {\n      const token = localStorage.getItem('token');\n      const currentUserId = parseInt(localStorage.getItem('userId'), 10);\n      if (currentUserId !== authorId) {\n        alert(\"You can only delete your own posts\");\n        return;\n      }\n      await axios.delete(`http://localhost:8081/api/v1/posts/${postId}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      setPosts(prev => prev.filter(post => post.id !== postId));\n      alert(\"Post deleted successfully\");\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Delete post error:', error);\n      alert(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to delete post');\n    }\n  };\n  const fetchPosts = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await axios.get('http://localhost:8081/api/v1/posts', {\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n      const processedPosts = response.data.data.map(post => ({\n        ...post,\n        author_id: parseInt(post.author_id, 10),\n        created_at: new Date(post.created_at).toISOString()\n      }));\n      setPosts(processedPosts);\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  useEffect(() => {\n    fetchPosts();\n  }, [fetchPosts, refreshTrigger]);\n  const currentUserId = parseInt(localStorage.getItem('userId'), 10);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"post-list-container\",\n    children: posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this), currentUserId === post.author_id && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDeletePost(post.id, post.author_id),\n          className: \"delete-button\",\n          title: \"Delete post\",\n          children: \"\\u2715\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-content\",\n        children: post.content.split('\\n').map((p, i) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: p\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-meta\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"By \", post.author_name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \" \\u2022 \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: new Date(post.created_at).toLocaleDateString('en-US', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n            hour: '2-digit',\n            minute: '2-digit'\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this)]\n    }, post.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n_s(PostList, \"ceanigLo5UJLcgro04MxQYgiEJI=\");\n_c = PostList;\nexport default PostList;\n// import React, { useEffect, useState, useCallback } from 'react';\n// import axios from 'axios';\n// import '../MainLayout.css';\n\n// const PostList = ({ refreshTrigger }) => {\n//     const [posts, setPosts] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     const handleDeletePost = async (postId, authorId) => {\n//         const confirmDelete = window.confirm(\"Are you sure you want to delete this post?\");\n//         if (!confirmDelete) return;\n\n//         try {\n//             const token = localStorage.getItem('token');\n//             const currentUserId = parseInt(localStorage.getItem('userId'));\n//             if (!currentUserId || currentUserId !== authorId) {\n//                 alert(\"You can only delete your own posts\");\n//                 return;\n//             }\n\n//             await axios.delete(`http://localhost:8081/api/v1/posts/${postId}`, {\n//                 headers: {\n//                     'Authorization': `Bearer ${token}`\n//                 }\n//             })\n\n//             fetchPosts();\n//             alert(\"Post deleted successfully\");\n//         } catch (error) {\n//             console.error('Delete post error:', error);\n//             alert(error.response?.data?.error || 'Failed to delete post');\n//         }\n//     };\n\n//     const fetchPosts = useCallback(async () => {\n//         let isMounted = true;\n\n//         try {\n//             setLoading(true);\n//             setError(null);\n\n//             const token = localStorage.getItem('token');\n//             if (!token) {\n//                 throw new Error('Authentication token not found');\n//             }\n\n//             const response = await axios.get('http://localhost:8081/api/v1/posts', {\n//                 headers: {\n//                     'Authorization': `Bearer ${token}`,\n//                     'Accept': 'application/json'\n//                 }\n//             });\n\n//             if (!isMounted) return;\n\n//             const postsData = response.data?.data || response.data;\n\n//             if (!postsData || !Array.isArray(postsData)) {\n//                 throw new Error('Invalid data structure received from server');\n//             }\n\n//             const processedPosts = await Promise.all(\n//                 postsData.map(async (post) => {\n//                     let username = `User ${post.author_id}`;\n\n//                     if (!post.author_name) {\n//                         try {\n//                             const userResponse = await axios.get(\n//                                 `http://localhost:8081/api/users/${post.author_id}`,\n//                                 { \n//                                     headers: { \n//                                         'Authorization': `Bearer ${token}` \n//                                     } \n//                                 }\n//                             );\n//                             username = userResponse.data.username || username;\n//                         } catch (err) {\n//                             console.error('Failed to fetch username:', err);\n//                         }\n//                     } else {\n//                         username = post.author_name;\n//                     }\n\n//                     return {\n//                         id: post.id,\n//                         title: post.title || 'Untitled Post',\n//                         content: post.content || 'No content available',\n//                         author_id: post.author_id,\n//                         author_name: username,\n//                         created_at: post.created_at || new Date().toISOString()\n//                     };\n//                 })\n//             );\n\n//             if (isMounted) {\n//                 setPosts(processedPosts);\n//             }\n//         } catch (err) {\n//             if (isMounted) {\n//                 console.error('Post fetch error:', {\n//                     error: err,\n//                     response: err.response\n//                 });\n\n//                 setError(\n//                     err.response?.data?.error ||\n//                     err.message ||\n//                     'Failed to load posts. Please try again later.'\n//                 );\n//             }\n//         } finally {\n//             if (isMounted) {\n//                 setLoading(false);\n//             }\n//         }\n\n//         return () => { isMounted = false };\n//     }, []);\n\n//     useEffect(() => {\n//         const abortController = new AbortController();\n//         fetchPosts();\n//         return () => {\n//             abortController.abort();\n//         };\n//     }, [fetchPosts, refreshTrigger]);\n\n//     if (loading) {\n//         return (\n//             <div className=\"loading-container\">\n//                 <div className=\"spinner\"></div>\n//                 <p>Loading posts...</p>\n//             </div>\n//         );\n//     }\n\n//     if (error) {\n//         return (\n//             <div className=\"error-container\">\n//                 <p className=\"error-message\">{error}</p>\n//                 <button\n//                     onClick={fetchPosts}\n//                     className=\"retry-button\"\n//                 >\n//                     Retry\n//                 </button>\n//             </div>\n//         );\n//     }\n\n//     return (\n//         <div className=\"post-list-container\">\n//             {posts.length > 0 ? (\n//                 [...posts].reverse().map((post) => (\n//                     <div key={`post-${post.id}`} className=\"post-item\">\n//                         <div className=\"post-header\">\n//                             <h3>{post.title}</h3>\n//                             {post.author_id === Number(localStorage.getItem('userId')) && (\n//                                 <button\n//                                     onClick={() => handleDeletePost(post.id, post.author_id)}\n//                                     className=\"delete-button\"\n//                                     title=\"Delete post\"\n//                                 >\n//                                     Delete\n//                                 </button>\n//                             )}\n//                         </div>\n//                         <div className=\"post-content\">\n//                             {post.content.split('\\n').map((paragraph, i) => (\n//                                 <p key={i}>{paragraph}</p>\n//                             ))}\n//                         </div>\n//                         <div className=\"post-meta\">\n//                         <span className=\"author\">Author: {post.author_name}</span>\n//                             <span className=\"separator\"> | </span>\n//                             <span className=\"date\">\n//                                 {new Date(post.created_at).toLocaleDateString()},\n//                                 {new Date(post.created_at).toLocaleTimeString()}\n//                             </span>\n//                         </div>\n//                     </div>\n//                 ))\n//             ) : (\n//                 <div className=\"no-posts-message\">\n//                     <p>No posts found. Create the first one!</p>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PostList;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","axios","jsxDEV","_jsxDEV","PostList","refreshTrigger","_s","posts","setPosts","loading","setLoading","error","setError","handleDeletePost","postId","authorId","confirmDelete","window","confirm","token","localStorage","getItem","currentUserId","parseInt","alert","delete","headers","prev","filter","post","id","_error$response","_error$response$data","console","response","data","fetchPosts","get","processedPosts","map","author_id","created_at","Date","toISOString","err","_err$response","_err$response$data","message","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","onClick","content","split","p","i","author_name","toLocaleDateString","year","month","day","hour","minute","_c","$RefreshReg$"],"sources":["/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/Posts/PostList.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport axios from 'axios';\nimport '../MainLayout.css';\n\nconst PostList = ({ refreshTrigger }) => {\n    const [posts, setPosts] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    const handleDeletePost = async (postId, authorId) => {\n        const confirmDelete = window.confirm(\"Are you sure you want to delete this post?\");\n        if (!confirmDelete) return;\n\n        try {\n            const token = localStorage.getItem('token');\n            const currentUserId = parseInt(localStorage.getItem('userId'), 10);\n            \n            if (currentUserId !== authorId) {\n                alert(\"You can only delete your own posts\");\n                return;\n            }\n\n            await axios.delete(`http://localhost:8081/api/v1/posts/${postId}`, {\n                headers: {\n                    'Authorization': `Bearer ${token}`\n                }\n            });\n\n            setPosts(prev => prev.filter(post => post.id !== postId));\n            alert(\"Post deleted successfully\");\n        } catch (error) {\n            console.error('Delete post error:', error);\n            alert(error.response?.data?.error || 'Failed to delete post');\n        }\n    };\n\n    const fetchPosts = useCallback(async () => {\n        try {\n            setLoading(true);\n            setError(null);\n\n            const response = await axios.get('http://localhost:8081/api/v1/posts', {\n                headers: {\n                    'Accept': 'application/json'\n                }\n            });\n\n            const processedPosts = response.data.data.map(post => ({\n                ...post,\n                author_id: parseInt(post.author_id, 10),\n                created_at: new Date(post.created_at).toISOString()\n            }));\n\n            setPosts(processedPosts);\n        } catch (err) {\n            setError(err.response?.data?.error || err.message);\n        } finally {\n            setLoading(false);\n        }\n    }, []);\n\n    useEffect(() => {\n        fetchPosts();\n    }, [fetchPosts, refreshTrigger]);\n\n    const currentUserId = parseInt(localStorage.getItem('userId'), 10);\n\n    return (\n        <div className=\"post-list-container\">\n            {posts.map(post => (\n                <div key={post.id} className=\"post-item\">\n                    <div className=\"post-header\">\n                        <h3>{post.title}</h3>\n                        {currentUserId === post.author_id && (\n                            <button\n                                onClick={() => handleDeletePost(post.id, post.author_id)}\n                                className=\"delete-button\"\n                                title=\"Delete post\"\n                            >\n                                ✕\n                            </button>\n                        )}\n                    </div>\n                    <div className=\"post-content\">\n                        {post.content.split('\\n').map((p, i) => (\n                            <p key={i}>{p}</p>\n                        ))}\n                    </div>\n                    <div className=\"post-meta\">\n                        <span>By {post.author_name}</span>\n                        <span> • </span>\n                        <span>\n                            {new Date(post.created_at).toLocaleDateString('en-US', {\n                                year: 'numeric',\n                                month: 'long',\n                                day: 'numeric',\n                                hour: '2-digit',\n                                minute: '2-digit'\n                            })}\n                        </span>\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default PostList;\n// import React, { useEffect, useState, useCallback } from 'react';\n// import axios from 'axios';\n// import '../MainLayout.css';\n\n// const PostList = ({ refreshTrigger }) => {\n//     const [posts, setPosts] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     const handleDeletePost = async (postId, authorId) => {\n//         const confirmDelete = window.confirm(\"Are you sure you want to delete this post?\");\n//         if (!confirmDelete) return;\n\n//         try {\n//             const token = localStorage.getItem('token');\n//             const currentUserId = parseInt(localStorage.getItem('userId'));\n//             if (!currentUserId || currentUserId !== authorId) {\n//                 alert(\"You can only delete your own posts\");\n//                 return;\n//             }\n\n//             await axios.delete(`http://localhost:8081/api/v1/posts/${postId}`, {\n//                 headers: {\n//                     'Authorization': `Bearer ${token}`\n//                 }\n//             })\n\n//             fetchPosts();\n//             alert(\"Post deleted successfully\");\n//         } catch (error) {\n//             console.error('Delete post error:', error);\n//             alert(error.response?.data?.error || 'Failed to delete post');\n//         }\n//     };\n\n//     const fetchPosts = useCallback(async () => {\n//         let isMounted = true;\n\n//         try {\n//             setLoading(true);\n//             setError(null);\n\n//             const token = localStorage.getItem('token');\n//             if (!token) {\n//                 throw new Error('Authentication token not found');\n//             }\n\n//             const response = await axios.get('http://localhost:8081/api/v1/posts', {\n//                 headers: {\n//                     'Authorization': `Bearer ${token}`,\n//                     'Accept': 'application/json'\n//                 }\n//             });\n\n//             if (!isMounted) return;\n\n//             const postsData = response.data?.data || response.data;\n\n//             if (!postsData || !Array.isArray(postsData)) {\n//                 throw new Error('Invalid data structure received from server');\n//             }\n\n//             const processedPosts = await Promise.all(\n//                 postsData.map(async (post) => {\n//                     let username = `User ${post.author_id}`;\n\n//                     if (!post.author_name) {\n//                         try {\n//                             const userResponse = await axios.get(\n//                                 `http://localhost:8081/api/users/${post.author_id}`,\n//                                 { \n//                                     headers: { \n//                                         'Authorization': `Bearer ${token}` \n//                                     } \n//                                 }\n//                             );\n//                             username = userResponse.data.username || username;\n//                         } catch (err) {\n//                             console.error('Failed to fetch username:', err);\n//                         }\n//                     } else {\n//                         username = post.author_name;\n//                     }\n\n//                     return {\n//                         id: post.id,\n//                         title: post.title || 'Untitled Post',\n//                         content: post.content || 'No content available',\n//                         author_id: post.author_id,\n//                         author_name: username,\n//                         created_at: post.created_at || new Date().toISOString()\n//                     };\n//                 })\n//             );\n\n//             if (isMounted) {\n//                 setPosts(processedPosts);\n//             }\n//         } catch (err) {\n//             if (isMounted) {\n//                 console.error('Post fetch error:', {\n//                     error: err,\n//                     response: err.response\n//                 });\n\n//                 setError(\n//                     err.response?.data?.error ||\n//                     err.message ||\n//                     'Failed to load posts. Please try again later.'\n//                 );\n//             }\n//         } finally {\n//             if (isMounted) {\n//                 setLoading(false);\n//             }\n//         }\n\n//         return () => { isMounted = false };\n//     }, []);\n\n//     useEffect(() => {\n//         const abortController = new AbortController();\n//         fetchPosts();\n//         return () => {\n//             abortController.abort();\n//         };\n//     }, [fetchPosts, refreshTrigger]);\n\n//     if (loading) {\n//         return (\n//             <div className=\"loading-container\">\n//                 <div className=\"spinner\"></div>\n//                 <p>Loading posts...</p>\n//             </div>\n//         );\n//     }\n\n//     if (error) {\n//         return (\n//             <div className=\"error-container\">\n//                 <p className=\"error-message\">{error}</p>\n//                 <button\n//                     onClick={fetchPosts}\n//                     className=\"retry-button\"\n//                 >\n//                     Retry\n//                 </button>\n//             </div>\n//         );\n//     }\n\n//     return (\n//         <div className=\"post-list-container\">\n//             {posts.length > 0 ? (\n//                 [...posts].reverse().map((post) => (\n//                     <div key={`post-${post.id}`} className=\"post-item\">\n//                         <div className=\"post-header\">\n//                             <h3>{post.title}</h3>\n//                             {post.author_id === Number(localStorage.getItem('userId')) && (\n//                                 <button\n//                                     onClick={() => handleDeletePost(post.id, post.author_id)}\n//                                     className=\"delete-button\"\n//                                     title=\"Delete post\"\n//                                 >\n//                                     Delete\n//                                 </button>\n//                             )}\n//                         </div>\n//                         <div className=\"post-content\">\n//                             {post.content.split('\\n').map((paragraph, i) => (\n//                                 <p key={i}>{paragraph}</p>\n//                             ))}\n//                         </div>\n//                         <div className=\"post-meta\">\n//                         <span className=\"author\">Author: {post.author_name}</span>\n//                             <span className=\"separator\"> | </span>\n//                             <span className=\"date\">\n//                                 {new Date(post.created_at).toLocaleDateString()},\n//                                 {new Date(post.created_at).toLocaleTimeString()}\n//                             </span>\n//                         </div>\n//                     </div>\n//                 ))\n//             ) : (\n//                 <div className=\"no-posts-message\">\n//                     <p>No posts found. Create the first one!</p>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PostList;"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}