{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u042FR\\\\Desktop\\\\newRepoGOODarhit-main\\\\forum-frontend\\\\src\\\\components\\\\Chat\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport useWebSocket from '../../hooks/useWebSocket.js';\nimport { useNavigate } from 'react-router-dom';\nimport '../MainLayout.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [connectionStatus, setConnectionStatus] = useState('connecting');\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const navigate = useNavigate();\n  const messagesEndRef = useRef(null);\n  const token = localStorage.getItem('token');\n  const username = localStorage.getItem('username');\n  const isAuthenticated = !!token;\n  const {\n    sendMessage,\n    lastMessage\n  } = useWebSocket('ws://localhost:8082/ws', {\n    onOpen: () => {\n      console.log('WebSocket connection established');\n      setConnectionStatus('connected');\n      setError(null);\n    },\n    onClose: () => {\n      console.log('WebSocket connection closed');\n      setConnectionStatus('disconnected');\n      setError('Connection lost. Reconnecting...');\n    },\n    onError: event => {\n      console.error('WebSocket error:', event);\n      setConnectionStatus('error');\n      setError('Failed to connect to chat server');\n    },\n    shouldReconnect: () => true,\n    reconnectAttempts: 10,\n    reconnectInterval: 3000\n  });\n  useEffect(() => {\n    const fetchMessages = async () => {\n      try {\n        const response = await axios.get('http://localhost:8082/messages');\n        // Обрабатываем timestamp при загрузке сообщений\n        const processedMessages = (response.data || []).map(msg => ({\n          ...msg,\n          timestamp: msg.timestamp || new Date().toISOString()\n        }));\n        setMessages(processedMessages);\n        setIsLoading(false);\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n        setError('Failed to load chat history');\n        setIsLoading(false);\n      }\n    };\n    fetchMessages();\n  }, []);\n  useEffect(() => {\n    if (lastMessage !== null) {\n      try {\n        const newMessage = JSON.parse(lastMessage.data);\n        // Добавляем timestamp, если его нет\n        if (!newMessage.timestamp) {\n          newMessage.timestamp = new Date().toISOString();\n        }\n        setMessages(prev => [...prev, newMessage]);\n      } catch (err) {\n        console.error('Error parsing message:', err);\n      }\n    }\n  }, [lastMessage]);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const handleSendMessage = () => {\n    if (!isAuthenticated) {\n      navigate('/login');\n      return;\n    }\n    if (!message.trim()) return;\n    const msg = {\n      username: username || 'Anonymous',\n      message: message.trim(),\n      timestamp: new Date().toISOString() // Всегда добавляем timestamp при отправке\n    };\n    sendMessage(JSON.stringify(msg));\n    setMessage('');\n  };\n\n  // Функция для форматирования времени сообщения\n  const formatMessageTime = timestamp => {\n    try {\n      const date = new Date(timestamp);\n      if (isNaN(date.getTime())) {\n        return new Date().toLocaleTimeString([], {\n          hour: '2-digit',\n          minute: '2-digit'\n        });\n      }\n      return date.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    } catch (e) {\n      console.error('Error formatting date:', e);\n      return new Date().toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-message\",\n        children: \"Loading chat...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Community Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `connection-status ${connectionStatus}`,\n          children: connectionStatus.toUpperCase()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 27\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages-window\",\n        children: [messages.length > 0 ? messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.username === username ? 'own-message' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"message-username\",\n              children: msg.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"message-time\",\n              children: formatMessageTime(msg.timestamp)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content\",\n            children: msg.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-messages\",\n          children: \"No messages yet. Be the first to say hello!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-input-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: message,\n          onChange: e => setMessage(e.target.value),\n          onKeyPress: e => e.key === 'Enter' && handleSendMessage(),\n          placeholder: isAuthenticated ? \"Type your message...\" : \"Please login to chat\",\n          disabled: !isAuthenticated || connectionStatus !== 'connected'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          disabled: !message.trim() || !isAuthenticated || connectionStatus !== 'connected',\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), !isAuthenticated && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"login-prompt\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"You need to \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"/login\",\n            children: \"login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 40\n          }, this), \" to send messages\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"iKIx2g6rzv3l5DzuAnuayBZsF60=\", false, function () {\n  return [useNavigate, useWebSocket];\n});\n_c = Chat;\nexport default Chat;\n// import React, { useState, useEffect, useRef } from 'react';\n// import useWebSocket from 'react-use-websocket';\n// import axios from 'axios';\n// import { useNavigate } from 'react-router-dom';\n// import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css';\n\n// const Chat = () => {\n//     const [message, setMessage] = useState('');\n//     const [messages, setMessages] = useState([]);\n//     const [connectionStatus, setConnectionStatus] = useState('connecting');\n//     const [error, setError] = useState(null);\n//     const [isLoading, setIsLoading] = useState(true);\n//     const navigate = useNavigate();\n//     const messagesEndRef = useRef(null);\n\n//     const token = localStorage.getItem('token');\n//     const username = localStorage.getItem('username');\n//     const isAuthenticated = !!token;\n\n//     const { sendMessage, lastMessage } = useWebSocket(\n//         'ws://localhost:8082/ws',\n//         {\n//             onOpen: () => {\n//                 console.log('WebSocket connection established');\n//                 setConnectionStatus('connected');\n//                 setError(null);\n//             },\n//             onClose: () => {\n//                 console.log('WebSocket connection closed');\n//                 setConnectionStatus('disconnected');\n//                 setError('Connection lost. Reconnecting...');\n//             },\n//             onError: (event) => {\n//                 console.error('WebSocket error:', event);\n//                 setConnectionStatus('error');\n//                 setError('Failed to connect to chat server');\n//             },\n//             shouldReconnect: () => true,\n//             reconnectAttempts: 10,\n//             reconnectInterval: 3000,\n//         }\n//     );\n\n//     useEffect(() => {\n//         const fetchMessages = async () => {\n//             try {\n//                 const response = await axios.get('http://localhost:8082/messages');\n//                 setMessages(response.data || []);\n//                 setIsLoading(false);\n//             } catch (error) {\n//                 console.error('Error fetching messages:', error);\n//                 setError('Failed to load chat history');\n//                 setIsLoading(false);\n//             }\n//         };\n\n//         fetchMessages();\n//     }, []);\n\n//     useEffect(() => {\n//         if (lastMessage !== null) {\n//             try {\n//                 const newMessage = JSON.parse(lastMessage.data);\n//                 setMessages(prev => [...prev, newMessage]);\n//             } catch (err) {\n//                 console.error('Error parsing message:', err);\n//             }\n//         }\n//     }, [lastMessage]);\n\n//     useEffect(() => {\n//         messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n//     }, [messages]);\n\n//     const handleSendMessage = () => {\n//         if (!isAuthenticated) {\n//             navigate('/login');\n//             return;\n//         }\n\n//         if (!message.trim()) return;\n\n//         const msg = {\n//             username: username || 'Anonymous',\n//             message: message.trim(),\n//             timestamp: new Date().toISOString()\n//         };\n\n//         sendMessage(JSON.stringify(msg));\n//         setMessage('');\n//     };\n\n//     if (isLoading) {\n//         return (\n//             <div className=\"chat-container\">\n//                 <div className=\"loading-message\">Loading chat...</div>\n//             </div>\n//         );\n//     }\n\n//     return (\n//         <div className=\"chat-wrapper\">\n//             <div className=\"chat-container\">\n//                 <div className=\"chat-header\">\n//                     <h2>Community Chat</h2>\n//                     <div className={`connection-status ${connectionStatus}`}>\n//                         {connectionStatus.toUpperCase()}\n//                     </div>\n//                 </div>\n\n//                 {error && <div className=\"error-message\">{error}</div>}\n\n//                 <div className=\"messages-window\">\n//                     {messages.length > 0 ? (\n//                         messages.map((msg, index) => (\n//                             <div key={index} className={`message ${msg.username === username ? 'own-message' : ''}`}>\n//                                 <div className=\"message-header\">\n//                                     <span className=\"message-username\">{msg.username}</span>\n//                                     <span className=\"message-time\">\n//                                         {new Date(msg.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}\n//                                     </span>\n//                                 </div>\n//                                 <div className=\"message-content\">{msg.message}</div>\n//                             </div>\n//                         ))\n//                     ) : (\n//                         <div className=\"no-messages\">No messages yet. Be the first to say hello!</div>\n//                     )}\n//                     <div ref={messagesEndRef} />\n//                 </div>\n\n//                 <div className=\"message-input-area\">\n//                     <input\n//                         type=\"text\"\n//                         value={message}\n//                         onChange={(e) => setMessage(e.target.value)}\n//                         onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n//                         placeholder={isAuthenticated ? \"Type your message...\" : \"Please login to chat\"}\n//                         disabled={!isAuthenticated || connectionStatus !== 'connected'}\n//                     />\n//                     <button\n//                         onClick={handleSendMessage}\n//                         disabled={!message.trim() || !isAuthenticated || connectionStatus !== 'connected'}\n//                     >\n//                         Send\n//                     </button>\n//                 </div>\n\n//                 {!isAuthenticated && (\n//                     <div className=\"login-prompt\">\n//                         <p>You need to <a href=\"/login\">login</a> to send messages</p>\n//                     </div>\n//                 )}\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Chat;\n// src/Chat.js\n// import React, { useState, useEffect, useRef } from 'react';\n// import useWebSocket from 'react-use-websocket';\n// import axios from 'axios';\n// import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css';\n\n// const Chat = () => {\n//   const [message, setMessage] = useState('');\n//   const [messages, setMessages] = useState([]);\n//   const { sendMessage, lastMessage } = useWebSocket('ws://localhost:8082/ws');\n//   const usernames = localStorage.getItem(\"username\");\n//   const messagesEndRef = useRef(null);\n\n//   useEffect(() => {\n//     // Загрузка сообщений из базы данных при инициализации\n//     const fetchMessages = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:8082/messages');\n//         setMessages(response.data);\n//       } catch (error) {\n//         console.error('Error fetching messages:', error);\n//       }\n//     };\n\n//     fetchMessages();\n//   }, []);\n\n//   useEffect(() => {\n//     if (lastMessage !== null) {\n//       setMessages((prevMessages) => {\n//         if (Array.isArray(prevMessages)) {\n//           return [...prevMessages, JSON.parse(lastMessage.data)];\n//         } else {\n//           return [JSON.parse(lastMessage.data)];\n//         }\n//       });\n//     }\n//   }, [lastMessage]);\n\n//   useEffect(() => {\n//     // Прокрутка вниз при добавлении нового сообщения\n//     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n//   }, [messages]);\n\n//   const handleSendMessage = () => {\n//     const msg = { username: usernames, message };\n//     sendMessage(JSON.stringify(msg));\n//     setMessage('');\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"connection-status connected\">\n//         Чатик\n//       </div>\n//       <div className=\"messages\">\n//         {messages && messages.length > 0 ? (\n//           messages.map((msg, index) => (\n//             <div key={index} className=\"message\">\n//               <span className=\"user\">{msg.username}:</span>\n//               <span>{msg.message}</span>\n//             </div>\n//           ))\n//         ) : (\n//           <div className=\"message system\">No messages yet.</div>\n//         )}\n//         <div ref={messagesEndRef} />\n//       </div>\n//       <div className=\"message-form\">\n//         <input\n//           type=\"text\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={handleSendMessage} disabled={!message.trim()}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","useWebSocket","useNavigate","jsxDEV","_jsxDEV","Chat","_s","message","setMessage","messages","setMessages","connectionStatus","setConnectionStatus","error","setError","isLoading","setIsLoading","navigate","messagesEndRef","token","localStorage","getItem","username","isAuthenticated","sendMessage","lastMessage","onOpen","console","log","onClose","onError","event","shouldReconnect","reconnectAttempts","reconnectInterval","fetchMessages","response","get","processedMessages","data","map","msg","timestamp","Date","toISOString","newMessage","JSON","parse","prev","err","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","trim","stringify","formatMessageTime","date","isNaN","getTime","toLocaleTimeString","hour","minute","e","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toUpperCase","length","index","ref","type","value","onChange","target","onKeyPress","key","placeholder","disabled","onClick","href","_c","$RefreshReg$"],"sources":["C:/Users/ЯR/Desktop/newRepoGOODarhit-main/forum-frontend/src/components/Chat/Chat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport useWebSocket from '../../hooks/useWebSocket.js';\nimport { useNavigate } from 'react-router-dom';\nimport '../MainLayout.css';\n\nconst Chat = () => {\n    const [message, setMessage] = useState('');\n    const [messages, setMessages] = useState([]);\n    const [connectionStatus, setConnectionStatus] = useState('connecting');\n    const [error, setError] = useState(null);\n    const [isLoading, setIsLoading] = useState(true);\n    const navigate = useNavigate();\n    const messagesEndRef = useRef(null);\n\n    const token = localStorage.getItem('token');\n    const username = localStorage.getItem('username');\n    const isAuthenticated = !!token;\n\n    const { sendMessage, lastMessage } = useWebSocket(\n        'ws://localhost:8082/ws',\n        {\n            onOpen: () => {\n                console.log('WebSocket connection established');\n                setConnectionStatus('connected');\n                setError(null);\n            },\n            onClose: () => {\n                console.log('WebSocket connection closed');\n                setConnectionStatus('disconnected');\n                setError('Connection lost. Reconnecting...');\n            },\n            onError: (event) => {\n                console.error('WebSocket error:', event);\n                setConnectionStatus('error');\n                setError('Failed to connect to chat server');\n            },\n            shouldReconnect: () => true,\n            reconnectAttempts: 10,\n            reconnectInterval: 3000,\n        }\n    );\n\n    useEffect(() => {\n        const fetchMessages = async () => {\n            try {\n                const response = await axios.get('http://localhost:8082/messages');\n                // Обрабатываем timestamp при загрузке сообщений\n                const processedMessages = (response.data || []).map(msg => ({\n                    ...msg,\n                    timestamp: msg.timestamp || new Date().toISOString()\n                }));\n                setMessages(processedMessages);\n                setIsLoading(false);\n            } catch (error) {\n                console.error('Error fetching messages:', error);\n                setError('Failed to load chat history');\n                setIsLoading(false);\n            }\n        };\n\n        fetchMessages();\n    }, []);\n\n    useEffect(() => {\n        if (lastMessage !== null) {\n            try {\n                const newMessage = JSON.parse(lastMessage.data);\n                // Добавляем timestamp, если его нет\n                if (!newMessage.timestamp) {\n                    newMessage.timestamp = new Date().toISOString();\n                }\n                setMessages(prev => [...prev, newMessage]);\n            } catch (err) {\n                console.error('Error parsing message:', err);\n            }\n        }\n    }, [lastMessage]);\n\n    useEffect(() => {\n        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n    }, [messages]);\n\n    const handleSendMessage = () => {\n        if (!isAuthenticated) {\n            navigate('/login');\n            return;\n        }\n\n        if (!message.trim()) return;\n\n        const msg = {\n            username: username || 'Anonymous',\n            message: message.trim(),\n            timestamp: new Date().toISOString() // Всегда добавляем timestamp при отправке\n        };\n\n        sendMessage(JSON.stringify(msg));\n        setMessage('');\n    };\n\n    // Функция для форматирования времени сообщения\n    const formatMessageTime = (timestamp) => {\n        try {\n            const date = new Date(timestamp);\n            if (isNaN(date.getTime())) {\n                return new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});\n            }\n            return date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});\n        } catch (e) {\n            console.error('Error formatting date:', e);\n            return new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});\n        }\n    };\n\n    if (isLoading) {\n        return (\n            <div className=\"chat-container\">\n                <div className=\"loading-message\">Loading chat...</div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"chat-wrapper\">\n            <div className=\"chat-container\">\n                <div className=\"chat-header\">\n                    <h2>Community Chat</h2>\n                    <div className={`connection-status ${connectionStatus}`}>\n                        {connectionStatus.toUpperCase()}\n                    </div>\n                </div>\n\n                {error && <div className=\"error-message\">{error}</div>}\n\n                <div className=\"messages-window\">\n                    {messages.length > 0 ? (\n                        messages.map((msg, index) => (\n                            <div key={index} className={`message ${msg.username === username ? 'own-message' : ''}`}>\n                                <div className=\"message-header\">\n                                    <span className=\"message-username\">{msg.username}</span>\n                                    <span className=\"message-time\">\n                                        {formatMessageTime(msg.timestamp)}\n                                    </span>\n                                </div>\n                                <div className=\"message-content\">{msg.message}</div>\n                            </div>\n                        ))\n                    ) : (\n                        <div className=\"no-messages\">No messages yet. Be the first to say hello!</div>\n                    )}\n                    <div ref={messagesEndRef} />\n                </div>\n\n                <div className=\"message-input-area\">\n                    <input\n                        type=\"text\"\n                        value={message}\n                        onChange={(e) => setMessage(e.target.value)}\n                        onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                        placeholder={isAuthenticated ? \"Type your message...\" : \"Please login to chat\"}\n                        disabled={!isAuthenticated || connectionStatus !== 'connected'}\n                    />\n                    <button\n                        onClick={handleSendMessage}\n                        disabled={!message.trim() || !isAuthenticated || connectionStatus !== 'connected'}\n                    >\n                        Send\n                    </button>\n                </div>\n\n                {!isAuthenticated && (\n                    <div className=\"login-prompt\">\n                        <p>You need to <a href=\"/login\">login</a> to send messages</p>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Chat;\n// import React, { useState, useEffect, useRef } from 'react';\n// import useWebSocket from 'react-use-websocket';\n// import axios from 'axios';\n// import { useNavigate } from 'react-router-dom';\n// import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css';\n\n// const Chat = () => {\n//     const [message, setMessage] = useState('');\n//     const [messages, setMessages] = useState([]);\n//     const [connectionStatus, setConnectionStatus] = useState('connecting');\n//     const [error, setError] = useState(null);\n//     const [isLoading, setIsLoading] = useState(true);\n//     const navigate = useNavigate();\n//     const messagesEndRef = useRef(null);\n\n//     const token = localStorage.getItem('token');\n//     const username = localStorage.getItem('username');\n//     const isAuthenticated = !!token;\n\n//     const { sendMessage, lastMessage } = useWebSocket(\n//         'ws://localhost:8082/ws',\n//         {\n//             onOpen: () => {\n//                 console.log('WebSocket connection established');\n//                 setConnectionStatus('connected');\n//                 setError(null);\n//             },\n//             onClose: () => {\n//                 console.log('WebSocket connection closed');\n//                 setConnectionStatus('disconnected');\n//                 setError('Connection lost. Reconnecting...');\n//             },\n//             onError: (event) => {\n//                 console.error('WebSocket error:', event);\n//                 setConnectionStatus('error');\n//                 setError('Failed to connect to chat server');\n//             },\n//             shouldReconnect: () => true,\n//             reconnectAttempts: 10,\n//             reconnectInterval: 3000,\n//         }\n//     );\n\n//     useEffect(() => {\n//         const fetchMessages = async () => {\n//             try {\n//                 const response = await axios.get('http://localhost:8082/messages');\n//                 setMessages(response.data || []);\n//                 setIsLoading(false);\n//             } catch (error) {\n//                 console.error('Error fetching messages:', error);\n//                 setError('Failed to load chat history');\n//                 setIsLoading(false);\n//             }\n//         };\n\n//         fetchMessages();\n//     }, []);\n\n//     useEffect(() => {\n//         if (lastMessage !== null) {\n//             try {\n//                 const newMessage = JSON.parse(lastMessage.data);\n//                 setMessages(prev => [...prev, newMessage]);\n//             } catch (err) {\n//                 console.error('Error parsing message:', err);\n//             }\n//         }\n//     }, [lastMessage]);\n\n//     useEffect(() => {\n//         messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n//     }, [messages]);\n\n//     const handleSendMessage = () => {\n//         if (!isAuthenticated) {\n//             navigate('/login');\n//             return;\n//         }\n\n//         if (!message.trim()) return;\n\n//         const msg = {\n//             username: username || 'Anonymous',\n//             message: message.trim(),\n//             timestamp: new Date().toISOString()\n//         };\n\n//         sendMessage(JSON.stringify(msg));\n//         setMessage('');\n//     };\n\n//     if (isLoading) {\n//         return (\n//             <div className=\"chat-container\">\n//                 <div className=\"loading-message\">Loading chat...</div>\n//             </div>\n//         );\n//     }\n\n//     return (\n//         <div className=\"chat-wrapper\">\n//             <div className=\"chat-container\">\n//                 <div className=\"chat-header\">\n//                     <h2>Community Chat</h2>\n//                     <div className={`connection-status ${connectionStatus}`}>\n//                         {connectionStatus.toUpperCase()}\n//                     </div>\n//                 </div>\n\n//                 {error && <div className=\"error-message\">{error}</div>}\n\n//                 <div className=\"messages-window\">\n//                     {messages.length > 0 ? (\n//                         messages.map((msg, index) => (\n//                             <div key={index} className={`message ${msg.username === username ? 'own-message' : ''}`}>\n//                                 <div className=\"message-header\">\n//                                     <span className=\"message-username\">{msg.username}</span>\n//                                     <span className=\"message-time\">\n//                                         {new Date(msg.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}\n//                                     </span>\n//                                 </div>\n//                                 <div className=\"message-content\">{msg.message}</div>\n//                             </div>\n//                         ))\n//                     ) : (\n//                         <div className=\"no-messages\">No messages yet. Be the first to say hello!</div>\n//                     )}\n//                     <div ref={messagesEndRef} />\n//                 </div>\n\n//                 <div className=\"message-input-area\">\n//                     <input\n//                         type=\"text\"\n//                         value={message}\n//                         onChange={(e) => setMessage(e.target.value)}\n//                         onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n//                         placeholder={isAuthenticated ? \"Type your message...\" : \"Please login to chat\"}\n//                         disabled={!isAuthenticated || connectionStatus !== 'connected'}\n//                     />\n//                     <button\n//                         onClick={handleSendMessage}\n//                         disabled={!message.trim() || !isAuthenticated || connectionStatus !== 'connected'}\n//                     >\n//                         Send\n//                     </button>\n//                 </div>\n\n//                 {!isAuthenticated && (\n//                     <div className=\"login-prompt\">\n//                         <p>You need to <a href=\"/login\">login</a> to send messages</p>\n//                     </div>\n//                 )}\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Chat;\n // src/Chat.js\n// import React, { useState, useEffect, useRef } from 'react';\n// import useWebSocket from 'react-use-websocket';\n// import axios from 'axios';\n// import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css';\n\n// const Chat = () => {\n//   const [message, setMessage] = useState('');\n//   const [messages, setMessages] = useState([]);\n//   const { sendMessage, lastMessage } = useWebSocket('ws://localhost:8082/ws');\n//   const usernames = localStorage.getItem(\"username\");\n//   const messagesEndRef = useRef(null);\n\n//   useEffect(() => {\n//     // Загрузка сообщений из базы данных при инициализации\n//     const fetchMessages = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:8082/messages');\n//         setMessages(response.data);\n//       } catch (error) {\n//         console.error('Error fetching messages:', error);\n//       }\n//     };\n\n//     fetchMessages();\n//   }, []);\n\n//   useEffect(() => {\n//     if (lastMessage !== null) {\n//       setMessages((prevMessages) => {\n//         if (Array.isArray(prevMessages)) {\n//           return [...prevMessages, JSON.parse(lastMessage.data)];\n//         } else {\n//           return [JSON.parse(lastMessage.data)];\n//         }\n//       });\n//     }\n//   }, [lastMessage]);\n\n//   useEffect(() => {\n//     // Прокрутка вниз при добавлении нового сообщения\n//     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n//   }, [messages]);\n\n//   const handleSendMessage = () => {\n//     const msg = { username: usernames, message };\n//     sendMessage(JSON.stringify(msg));\n//     setMessage('');\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"connection-status connected\">\n//         Чатик\n//       </div>\n//       <div className=\"messages\">\n//         {messages && messages.length > 0 ? (\n//           messages.map((msg, index) => (\n//             <div key={index} className=\"message\">\n//               <span className=\"user\">{msg.username}:</span>\n//               <span>{msg.message}</span>\n//             </div>\n//           ))\n//         ) : (\n//           <div className=\"message system\">No messages yet.</div>\n//         )}\n//         <div ref={messagesEndRef} />\n//       </div>\n//       <div className=\"message-form\">\n//         <input\n//           type=\"text\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={handleSendMessage} disabled={!message.trim()}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}