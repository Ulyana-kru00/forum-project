{"ast":null,"code":"var _jsxFileName = \"/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/Posts/PostList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from 'react';\nimport axios from 'axios';\nimport '../MainLayout.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostList = ({\n  refreshTrigger\n}) => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const currentUserId = parseInt(localStorage.getItem('userId'), 10);\n  const token = localStorage.getItem('token');\n  const fetchPosts = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await axios.get('http://localhost:8081/api/v1/posts', {\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n      const processedPosts = response.data.data.map(post => ({\n        ...post,\n        author_id: parseInt(post.author_id, 10),\n        created_at: new Date(post.created_at).toISOString()\n      }));\n      setPosts(processedPosts);\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  useEffect(() => {\n    fetchPosts();\n  }, [fetchPosts, refreshTrigger]);\n  const handleDeletePost = async (postId, authorId) => {\n    const confirmDelete = window.confirm(\"Are you sure you want to delete this post?\");\n    if (!confirmDelete) return;\n    console.log('Trying to delete post:', postId);\n    console.log('Current user:', currentUserId, 'Post author:', authorId);\n    if (currentUserId !== authorId) {\n      alert(\"You can only delete your own posts\");\n      return;\n    }\n    try {\n      await axios.delete(`http://localhost:8081/api/v1/posts/${postId}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      alert(\"Post deleted successfully\");\n      await fetchPosts();\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Delete post error:', error);\n      alert(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to delete post');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"post-list-container\",\n    children: [loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading posts...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 25\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 23\n    }, this), posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this), currentUserId === post.author_id && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDeletePost(post.id, post.author_id),\n          className: \"delete-button\",\n          title: \"Delete post\",\n          children: \"\\u2715\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-content\",\n        children: post.content.split('\\n').map((p, i) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: p\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-meta\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"By \", post.author_name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \" \\u2022 \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: new Date(post.created_at).toLocaleDateString('en-US', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n            hour: '2-digit',\n            minute: '2-digit'\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this)]\n    }, post.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n_s(PostList, \"ceanigLo5UJLcgro04MxQYgiEJI=\");\n_c = PostList;\nexport default PostList;\n\n// import React, { useEffect, useState, useCallback } from 'react';\n// import axios from 'axios';\n// import '../MainLayout.css';\n\n// const PostList = ({ refreshTrigger }) => {\n//     const [posts, setPosts] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     const handleDeletePost = async (postId, authorId) => {\n//         const confirmDelete = window.confirm(\"Are you sure you want to delete this post?\");\n//         if (!confirmDelete) return;\n\n//         const token = localStorage.getItem('token');\n//         const currentUserId = parseInt(localStorage.getItem('userId'), 10);\n\n//         console.log('Trying to delete post:', postId);\n//         console.log('Current user:', currentUserId, 'Post author:', authorId);\n\n//         if (currentUserId !== authorId) {\n//             alert(\"You can only delete your own posts\");\n//             return;\n//         }\n\n//         try {\n//             await axios.delete(`http://localhost:8081/api/v1/posts/${postId}`, {\n//                 headers: {\n//                     'Authorization': `Bearer ${token}`\n//                 }\n//             });\n\n//             setPosts(prev => prev.filter(post => post.id !== postId));\n//             alert(\"Post deleted successfully\");\n//         } catch (error) {\n//             console.error('Delete post error:', error);\n//             alert(error.response?.data?.error || 'Failed to delete post');\n//         }\n//     };\n\n//     const fetchPosts = useCallback(async () => {\n//         try {\n//             setLoading(true);\n//             setError(null);\n\n//             const response = await axios.get('http://localhost:8081/api/v1/posts', {\n//                 headers: {\n//                     'Accept': 'application/json'\n//                 }\n//             });\n\n//             const processedPosts = response.data.data.map(post => ({\n//                 ...post,\n//                 author_id: parseInt(post.author_id, 10),\n//                 created_at: new Date(post.created_at).toISOString()\n//             }));\n\n//             setPosts(processedPosts);\n//         } catch (err) {\n//             setError(err.response?.data?.error || err.message);\n//         } finally {\n//             setLoading(false);\n//         }\n//     }, []);\n\n//     useEffect(() => {\n//         fetchPosts();\n//     }, [fetchPosts, refreshTrigger]);\n\n//     const currentUserId = parseInt(localStorage.getItem('userId'), 10);\n\n//     return (\n//         <div className=\"post-list-container\">\n//             {posts.map(post => (\n//                 <div key={post.id} className=\"post-item\">\n//                     <div className=\"post-header\">\n//                         <h3>{post.title}</h3>\n//                         {(() => {\n//     console.log('Текущий пользователь:', currentUserId);\n//     console.log('Автор поста:', post.author_id);\n//     return currentUserId === post.author_id ? (\n//       <button\n//         onClick={() => handleDeletePost(post.id, post.author_id)}\n//         className=\"delete-button\"\n//         title=\"Delete post\"\n//       >\n//         ✕\n//       </button>\n//     ) : null;\n//   })()}\n//                     </div>\n//                     <div className=\"post-content\">\n//                         {post.content.split('\\n').map((p, i) => (\n//                             <p key={i}>{p}</p>\n//                         ))}\n//                     </div>\n//                     <div className=\"post-meta\">\n//                         <span>By {post.author_name}</span>\n//                         <span> • </span>\n//                         <span>\n//                             {new Date(post.created_at).toLocaleDateString('en-US', {\n//                                 year: 'numeric',\n//                                 month: 'long',\n//                                 day: 'numeric',\n//                                 hour: '2-digit',\n//                                 minute: '2-digit'\n//                             })}\n//                         </span>\n//                     </div>\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// };\n\n// export default PostList;\n// import React, { useEffect, useState, useCallback } from 'react';\n// import axios from 'axios';\n// import '../MainLayout.css';\n\n// const PostList = ({ refreshTrigger }) => {\n//     const [posts, setPosts] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     const handleDeletePost = async (postId, authorId) => {\n//         const confirmDelete = window.confirm(\"Are you sure you want to delete this post?\");\n//         if (!confirmDelete) return;\n\n//         try {\n//             const token = localStorage.getItem('token');\n//             const currentUserId = parseInt(localStorage.getItem('userId'));\n//             if (!currentUserId || currentUserId !== authorId) {\n//                 alert(\"You can only delete your own posts\");\n//                 return;\n//             }\n\n//             await axios.delete(`http://localhost:8081/api/v1/posts/${postId}`, {\n//                 headers: {\n//                     'Authorization': `Bearer ${token}`\n//                 }\n//             })\n\n//             fetchPosts();\n//             alert(\"Post deleted successfully\");\n//         } catch (error) {\n//             console.error('Delete post error:', error);\n//             alert(error.response?.data?.error || 'Failed to delete post');\n//         }\n//     };\n\n//     const fetchPosts = useCallback(async () => {\n//         let isMounted = true;\n\n//         try {\n//             setLoading(true);\n//             setError(null);\n\n//             const token = localStorage.getItem('token');\n//             if (!token) {\n//                 throw new Error('Authentication token not found');\n//             }\n\n//             const response = await axios.get('http://localhost:8081/api/v1/posts', {\n//                 headers: {\n//                     'Authorization': `Bearer ${token}`,\n//                     'Accept': 'application/json'\n//                 }\n//             });\n\n//             if (!isMounted) return;\n\n//             const postsData = response.data?.data || response.data;\n\n//             if (!postsData || !Array.isArray(postsData)) {\n//                 throw new Error('Invalid data structure received from server');\n//             }\n\n//             const processedPosts = await Promise.all(\n//                 postsData.map(async (post) => {\n//                     let username = `User ${post.author_id}`;\n\n//                     if (!post.author_name) {\n//                         try {\n//                             const userResponse = await axios.get(\n//                                 `http://localhost:8081/api/users/${post.author_id}`,\n//                                 { \n//                                     headers: { \n//                                         'Authorization': `Bearer ${token}` \n//                                     } \n//                                 }\n//                             );\n//                             username = userResponse.data.username || username;\n//                         } catch (err) {\n//                             console.error('Failed to fetch username:', err);\n//                         }\n//                     } else {\n//                         username = post.author_name;\n//                     }\n\n//                     return {\n//                         id: post.id,\n//                         title: post.title || 'Untitled Post',\n//                         content: post.content || 'No content available',\n//                         author_id: post.author_id,\n//                         author_name: username,\n//                         created_at: post.created_at || new Date().toISOString()\n//                     };\n//                 })\n//             );\n\n//             if (isMounted) {\n//                 setPosts(processedPosts);\n//             }\n//         } catch (err) {\n//             if (isMounted) {\n//                 console.error('Post fetch error:', {\n//                     error: err,\n//                     response: err.response\n//                 });\n\n//                 setError(\n//                     err.response?.data?.error ||\n//                     err.message ||\n//                     'Failed to load posts. Please try again later.'\n//                 );\n//             }\n//         } finally {\n//             if (isMounted) {\n//                 setLoading(false);\n//             }\n//         }\n\n//         return () => { isMounted = false };\n//     }, []);\n\n//     useEffect(() => {\n//         const abortController = new AbortController();\n//         fetchPosts();\n//         return () => {\n//             abortController.abort();\n//         };\n//     }, [fetchPosts, refreshTrigger]);\n\n//     if (loading) {\n//         return (\n//             <div className=\"loading-container\">\n//                 <div className=\"spinner\"></div>\n//                 <p>Loading posts...</p>\n//             </div>\n//         );\n//     }\n\n//     if (error) {\n//         return (\n//             <div className=\"error-container\">\n//                 <p className=\"error-message\">{error}</p>\n//                 <button\n//                     onClick={fetchPosts}\n//                     className=\"retry-button\"\n//                 >\n//                     Retry\n//                 </button>\n//             </div>\n//         );\n//     }\n\n//     return (\n//         <div className=\"post-list-container\">\n//             {posts.length > 0 ? (\n//                 [...posts].reverse().map((post) => (\n//                     <div key={`post-${post.id}`} className=\"post-item\">\n//                         <div className=\"post-header\">\n//                             <h3>{post.title}</h3>\n//                             {post.author_id === Number(localStorage.getItem('userId')) && (\n//                                 <button\n//                                     onClick={() => handleDeletePost(post.id, post.author_id)}\n//                                     className=\"delete-button\"\n//                                     title=\"Delete post\"\n//                                 >\n//                                     Delete\n//                                 </button>\n//                             )}\n//                         </div>\n//                         <div className=\"post-content\">\n//                             {post.content.split('\\n').map((paragraph, i) => (\n//                                 <p key={i}>{paragraph}</p>\n//                             ))}\n//                         </div>\n//                         <div className=\"post-meta\">\n//                         <span className=\"author\">Author: {post.author_name}</span>\n//                             <span className=\"separator\"> | </span>\n//                             <span className=\"date\">\n//                                 {new Date(post.created_at).toLocaleDateString()},\n//                                 {new Date(post.created_at).toLocaleTimeString()}\n//                             </span>\n//                         </div>\n//                     </div>\n//                 ))\n//             ) : (\n//                 <div className=\"no-posts-message\">\n//                     <p>No posts found. Create the first one!</p>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PostList;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","axios","jsxDEV","_jsxDEV","PostList","refreshTrigger","_s","posts","setPosts","loading","setLoading","error","setError","currentUserId","parseInt","localStorage","getItem","token","fetchPosts","response","get","headers","processedPosts","data","map","post","author_id","created_at","Date","toISOString","err","_err$response","_err$response$data","message","handleDeletePost","postId","authorId","confirmDelete","window","confirm","console","log","alert","delete","_error$response","_error$response$data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","title","onClick","id","content","split","p","i","author_name","toLocaleDateString","year","month","day","hour","minute","_c","$RefreshReg$"],"sources":["/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/Posts/PostList.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport axios from 'axios';\nimport '../MainLayout.css';\n\nconst PostList = ({ refreshTrigger }) => {\n    const [posts, setPosts] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    const currentUserId = parseInt(localStorage.getItem('userId'), 10);\n    const token = localStorage.getItem('token');\n\n    const fetchPosts = useCallback(async () => {\n        try {\n            setLoading(true);\n            setError(null);\n\n            const response = await axios.get('http://localhost:8081/api/v1/posts', {\n                headers: { 'Accept': 'application/json' }\n            });\n\n            const processedPosts = response.data.data.map(post => ({\n                ...post,\n                author_id: parseInt(post.author_id, 10),\n                created_at: new Date(post.created_at).toISOString()\n            }));\n\n            setPosts(processedPosts);\n        } catch (err) {\n            setError(err.response?.data?.error || err.message);\n        } finally {\n            setLoading(false);\n        }\n    }, []);\n\n    useEffect(() => {\n        fetchPosts();\n    }, [fetchPosts, refreshTrigger]);\n\n    const handleDeletePost = async (postId, authorId) => {\n        const confirmDelete = window.confirm(\"Are you sure you want to delete this post?\");\n        if (!confirmDelete) return;\n\n        console.log('Trying to delete post:', postId);\n        console.log('Current user:', currentUserId, 'Post author:', authorId);\n\n        if (currentUserId !== authorId) {\n            alert(\"You can only delete your own posts\");\n            return;\n        }\n\n        try {\n            await axios.delete(`http://localhost:8081/api/v1/posts/${postId}`, {\n                headers: { 'Authorization': `Bearer ${token}` },\n            });\n\n            alert(\"Post deleted successfully\");\n            await fetchPosts();\n        } catch (error) {\n            console.error('Delete post error:', error);\n            alert(error.response?.data?.error || 'Failed to delete post');\n        }\n    };\n\n    return (\n        <div className=\"post-list-container\">\n            {loading && <p>Loading posts...</p>}\n            {error && <p style={{ color: 'red' }}>Error: {error}</p>}\n\n            {posts.map(post => (\n                <div key={post.id} className=\"post-item\">\n                    <div className=\"post-header\">\n                        <h3>{post.title}</h3>\n                        {currentUserId === post.author_id && (\n                            <button\n                                onClick={() => handleDeletePost(post.id, post.author_id)}\n                                className=\"delete-button\"\n                                title=\"Delete post\"\n                            >\n                                ✕\n                            </button>\n                        )}\n                    </div>\n                    <div className=\"post-content\">\n                        {post.content.split('\\n').map((p, i) => (\n                            <p key={i}>{p}</p>\n                        ))}\n                    </div>\n                    <div className=\"post-meta\">\n                        <span>By {post.author_name}</span>\n                        <span> • </span>\n                        <span>\n                            {new Date(post.created_at).toLocaleDateString('en-US', {\n                                year: 'numeric',\n                                month: 'long',\n                                day: 'numeric',\n                                hour: '2-digit',\n                                minute: '2-digit'\n                            })}\n                        </span>\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default PostList;\n\n\n// import React, { useEffect, useState, useCallback } from 'react';\n// import axios from 'axios';\n// import '../MainLayout.css';\n\n// const PostList = ({ refreshTrigger }) => {\n//     const [posts, setPosts] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     const handleDeletePost = async (postId, authorId) => {\n//         const confirmDelete = window.confirm(\"Are you sure you want to delete this post?\");\n//         if (!confirmDelete) return;\n    \n//         const token = localStorage.getItem('token');\n//         const currentUserId = parseInt(localStorage.getItem('userId'), 10);\n        \n//         console.log('Trying to delete post:', postId);\n//         console.log('Current user:', currentUserId, 'Post author:', authorId);\n    \n//         if (currentUserId !== authorId) {\n//             alert(\"You can only delete your own posts\");\n//             return;\n//         }\n    \n//         try {\n//             await axios.delete(`http://localhost:8081/api/v1/posts/${postId}`, {\n//                 headers: {\n//                     'Authorization': `Bearer ${token}`\n//                 }\n//             });\n    \n//             setPosts(prev => prev.filter(post => post.id !== postId));\n//             alert(\"Post deleted successfully\");\n//         } catch (error) {\n//             console.error('Delete post error:', error);\n//             alert(error.response?.data?.error || 'Failed to delete post');\n//         }\n//     };\n    \n\n//     const fetchPosts = useCallback(async () => {\n//         try {\n//             setLoading(true);\n//             setError(null);\n\n//             const response = await axios.get('http://localhost:8081/api/v1/posts', {\n//                 headers: {\n//                     'Accept': 'application/json'\n//                 }\n//             });\n\n//             const processedPosts = response.data.data.map(post => ({\n//                 ...post,\n//                 author_id: parseInt(post.author_id, 10),\n//                 created_at: new Date(post.created_at).toISOString()\n//             }));\n\n//             setPosts(processedPosts);\n//         } catch (err) {\n//             setError(err.response?.data?.error || err.message);\n//         } finally {\n//             setLoading(false);\n//         }\n//     }, []);\n\n//     useEffect(() => {\n//         fetchPosts();\n//     }, [fetchPosts, refreshTrigger]);\n\n//     const currentUserId = parseInt(localStorage.getItem('userId'), 10);\n\n//     return (\n//         <div className=\"post-list-container\">\n//             {posts.map(post => (\n//                 <div key={post.id} className=\"post-item\">\n//                     <div className=\"post-header\">\n//                         <h3>{post.title}</h3>\n//                         {(() => {\n//     console.log('Текущий пользователь:', currentUserId);\n//     console.log('Автор поста:', post.author_id);\n//     return currentUserId === post.author_id ? (\n//       <button\n//         onClick={() => handleDeletePost(post.id, post.author_id)}\n//         className=\"delete-button\"\n//         title=\"Delete post\"\n//       >\n//         ✕\n//       </button>\n//     ) : null;\n//   })()}\n//                     </div>\n//                     <div className=\"post-content\">\n//                         {post.content.split('\\n').map((p, i) => (\n//                             <p key={i}>{p}</p>\n//                         ))}\n//                     </div>\n//                     <div className=\"post-meta\">\n//                         <span>By {post.author_name}</span>\n//                         <span> • </span>\n//                         <span>\n//                             {new Date(post.created_at).toLocaleDateString('en-US', {\n//                                 year: 'numeric',\n//                                 month: 'long',\n//                                 day: 'numeric',\n//                                 hour: '2-digit',\n//                                 minute: '2-digit'\n//                             })}\n//                         </span>\n//                     </div>\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// };\n\n// export default PostList;\n// import React, { useEffect, useState, useCallback } from 'react';\n// import axios from 'axios';\n// import '../MainLayout.css';\n\n// const PostList = ({ refreshTrigger }) => {\n//     const [posts, setPosts] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     const handleDeletePost = async (postId, authorId) => {\n//         const confirmDelete = window.confirm(\"Are you sure you want to delete this post?\");\n//         if (!confirmDelete) return;\n\n//         try {\n//             const token = localStorage.getItem('token');\n//             const currentUserId = parseInt(localStorage.getItem('userId'));\n//             if (!currentUserId || currentUserId !== authorId) {\n//                 alert(\"You can only delete your own posts\");\n//                 return;\n//             }\n\n//             await axios.delete(`http://localhost:8081/api/v1/posts/${postId}`, {\n//                 headers: {\n//                     'Authorization': `Bearer ${token}`\n//                 }\n//             })\n\n//             fetchPosts();\n//             alert(\"Post deleted successfully\");\n//         } catch (error) {\n//             console.error('Delete post error:', error);\n//             alert(error.response?.data?.error || 'Failed to delete post');\n//         }\n//     };\n\n//     const fetchPosts = useCallback(async () => {\n//         let isMounted = true;\n\n//         try {\n//             setLoading(true);\n//             setError(null);\n\n//             const token = localStorage.getItem('token');\n//             if (!token) {\n//                 throw new Error('Authentication token not found');\n//             }\n\n//             const response = await axios.get('http://localhost:8081/api/v1/posts', {\n//                 headers: {\n//                     'Authorization': `Bearer ${token}`,\n//                     'Accept': 'application/json'\n//                 }\n//             });\n\n//             if (!isMounted) return;\n\n//             const postsData = response.data?.data || response.data;\n\n//             if (!postsData || !Array.isArray(postsData)) {\n//                 throw new Error('Invalid data structure received from server');\n//             }\n\n//             const processedPosts = await Promise.all(\n//                 postsData.map(async (post) => {\n//                     let username = `User ${post.author_id}`;\n\n//                     if (!post.author_name) {\n//                         try {\n//                             const userResponse = await axios.get(\n//                                 `http://localhost:8081/api/users/${post.author_id}`,\n//                                 { \n//                                     headers: { \n//                                         'Authorization': `Bearer ${token}` \n//                                     } \n//                                 }\n//                             );\n//                             username = userResponse.data.username || username;\n//                         } catch (err) {\n//                             console.error('Failed to fetch username:', err);\n//                         }\n//                     } else {\n//                         username = post.author_name;\n//                     }\n\n//                     return {\n//                         id: post.id,\n//                         title: post.title || 'Untitled Post',\n//                         content: post.content || 'No content available',\n//                         author_id: post.author_id,\n//                         author_name: username,\n//                         created_at: post.created_at || new Date().toISOString()\n//                     };\n//                 })\n//             );\n\n//             if (isMounted) {\n//                 setPosts(processedPosts);\n//             }\n//         } catch (err) {\n//             if (isMounted) {\n//                 console.error('Post fetch error:', {\n//                     error: err,\n//                     response: err.response\n//                 });\n\n//                 setError(\n//                     err.response?.data?.error ||\n//                     err.message ||\n//                     'Failed to load posts. Please try again later.'\n//                 );\n//             }\n//         } finally {\n//             if (isMounted) {\n//                 setLoading(false);\n//             }\n//         }\n\n//         return () => { isMounted = false };\n//     }, []);\n\n//     useEffect(() => {\n//         const abortController = new AbortController();\n//         fetchPosts();\n//         return () => {\n//             abortController.abort();\n//         };\n//     }, [fetchPosts, refreshTrigger]);\n\n//     if (loading) {\n//         return (\n//             <div className=\"loading-container\">\n//                 <div className=\"spinner\"></div>\n//                 <p>Loading posts...</p>\n//             </div>\n//         );\n//     }\n\n//     if (error) {\n//         return (\n//             <div className=\"error-container\">\n//                 <p className=\"error-message\">{error}</p>\n//                 <button\n//                     onClick={fetchPosts}\n//                     className=\"retry-button\"\n//                 >\n//                     Retry\n//                 </button>\n//             </div>\n//         );\n//     }\n\n//     return (\n//         <div className=\"post-list-container\">\n//             {posts.length > 0 ? (\n//                 [...posts].reverse().map((post) => (\n//                     <div key={`post-${post.id}`} className=\"post-item\">\n//                         <div className=\"post-header\">\n//                             <h3>{post.title}</h3>\n//                             {post.author_id === Number(localStorage.getItem('userId')) && (\n//                                 <button\n//                                     onClick={() => handleDeletePost(post.id, post.author_id)}\n//                                     className=\"delete-button\"\n//                                     title=\"Delete post\"\n//                                 >\n//                                     Delete\n//                                 </button>\n//                             )}\n//                         </div>\n//                         <div className=\"post-content\">\n//                             {post.content.split('\\n').map((paragraph, i) => (\n//                                 <p key={i}>{paragraph}</p>\n//                             ))}\n//                         </div>\n//                         <div className=\"post-meta\">\n//                         <span className=\"author\">Author: {post.author_name}</span>\n//                             <span className=\"separator\"> | </span>\n//                             <span className=\"date\">\n//                                 {new Date(post.created_at).toLocaleDateString()},\n//                                 {new Date(post.created_at).toLocaleTimeString()}\n//                             </span>\n//                         </div>\n//                     </div>\n//                 ))\n//             ) : (\n//                 <div className=\"no-posts-message\">\n//                     <p>No posts found. Create the first one!</p>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PostList;"],"mappings":"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AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAgE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}