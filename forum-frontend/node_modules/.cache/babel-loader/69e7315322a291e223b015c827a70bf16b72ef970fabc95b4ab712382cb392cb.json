{"ast":null,"code":"var _jsxFileName = \"/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/Chat/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport useWebSocket from 'react-use-websocket';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [connectionStatus, setConnectionStatus] = useState('connecting');\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  const messagesEndRef = useRef(null);\n  const token = localStorage.getItem('token');\n  const username = localStorage.getItem('username');\n  const isAuthenticated = !!token;\n  const {\n    sendMessage,\n    lastMessage,\n    readyState\n  } = useWebSocket('ws://localhost:8082/ws', {\n    onOpen: () => {\n      console.log('WebSocket connection established');\n      setConnectionStatus('connected');\n    },\n    onClose: () => {\n      console.log('WebSocket connection closed');\n      setConnectionStatus('disconnected');\n    },\n    onError: event => {\n      console.error('WebSocket error:', event);\n      setConnectionStatus('error');\n      setError('Failed to connect to chat server');\n    },\n    shouldReconnect: closeEvent => true,\n    reconnectAttempts: 10,\n    reconnectInterval: 3000\n  });\n  useEffect(() => {\n    const fetchMessages = async () => {\n      try {\n        const response = await axios.get('http://localhost:8082/messages');\n        setMessages(response.data || []);\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n        setError('Failed to load chat history');\n      }\n    };\n    fetchMessages();\n  }, []);\n  useEffect(() => {\n    if (lastMessage !== null) {\n      try {\n        const newMessage = JSON.parse(lastMessage.data);\n        setMessages(prev => [...prev, newMessage]);\n      } catch (err) {\n        console.error('Error parsing message:', err);\n      }\n    }\n  }, [lastMessage]);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const handleSendMessage = () => {\n    if (!isAuthenticated) {\n      navigate('/login');\n      return;\n    }\n    if (!message.trim()) return;\n    const msg = {\n      username: username || 'Anonymous',\n      message: message.trim(),\n      timestamp: new Date().toISOString()\n    };\n    sendMessage(JSON.stringify(msg));\n    setMessage('');\n  };\n  const connectionStatusColors = {\n    connecting: 'orange',\n    connected: 'green',\n    disconnected: 'red',\n    error: 'red'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"connection-status\",\n      style: {\n        color: connectionStatusColors[connectionStatus]\n      },\n      children: [connectionStatus.toUpperCase(), error && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"error-text\",\n        children: [\" - \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: [messages.length > 0 ? messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-username\",\n          children: [msg.username, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-text\",\n          children: msg.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-time\",\n          children: new Date(msg.timestamp).toLocaleTimeString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-messages\",\n        children: \"No messages yet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        onKeyPress: e => e.key === 'Enter' && handleSendMessage(),\n        placeholder: isAuthenticated ? \"Type your message...\" : \"Please login to chat\",\n        disabled: !isAuthenticated || connectionStatus !== 'connected'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        disabled: !message.trim() || !isAuthenticated || connectionStatus !== 'connected',\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"Z8in2XQvDRZjfFZJ9CJbFJNmYpA=\", false, function () {\n  return [useNavigate, useWebSocket];\n});\n_c = Chat;\nexport default Chat;\n// src/Chat.js\n// import React, { useState, useEffect, useRef } from 'react';\n// import useWebSocket from 'react-use-websocket';\n// import axios from 'axios';\n// import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css';\n\n// const Chat = () => {\n//   const [message, setMessage] = useState('');\n//   const [messages, setMessages] = useState([]);\n//   const { sendMessage, lastMessage } = useWebSocket('ws://localhost:8082/ws');\n//   const usernames = localStorage.getItem(\"username\");\n//   const messagesEndRef = useRef(null);\n\n//   useEffect(() => {\n//     // Загрузка сообщений из базы данных при инициализации\n//     const fetchMessages = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:8082/messages');\n//         setMessages(response.data);\n//       } catch (error) {\n//         console.error('Error fetching messages:', error);\n//       }\n//     };\n\n//     fetchMessages();\n//   }, []);\n\n//   useEffect(() => {\n//     if (lastMessage !== null) {\n//       setMessages((prevMessages) => {\n//         if (Array.isArray(prevMessages)) {\n//           return [...prevMessages, JSON.parse(lastMessage.data)];\n//         } else {\n//           return [JSON.parse(lastMessage.data)];\n//         }\n//       });\n//     }\n//   }, [lastMessage]);\n\n//   useEffect(() => {\n//     // Прокрутка вниз при добавлении нового сообщения\n//     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n//   }, [messages]);\n\n//   const handleSendMessage = () => {\n//     const msg = { username: usernames, message };\n//     sendMessage(JSON.stringify(msg));\n//     setMessage('');\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"connection-status connected\">\n//         Чатик\n//       </div>\n//       <div className=\"messages\">\n//         {messages && messages.length > 0 ? (\n//           messages.map((msg, index) => (\n//             <div key={index} className=\"message\">\n//               <span className=\"user\">{msg.username}:</span>\n//               <span>{msg.message}</span>\n//             </div>\n//           ))\n//         ) : (\n//           <div className=\"message system\">No messages yet.</div>\n//         )}\n//         <div ref={messagesEndRef} />\n//       </div>\n//       <div className=\"message-form\">\n//         <input\n//           type=\"text\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={handleSendMessage} disabled={!message.trim()}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useWebSocket","axios","useNavigate","jsxDEV","_jsxDEV","Chat","_s","message","setMessage","messages","setMessages","connectionStatus","setConnectionStatus","error","setError","navigate","messagesEndRef","token","localStorage","getItem","username","isAuthenticated","sendMessage","lastMessage","readyState","onOpen","console","log","onClose","onError","event","shouldReconnect","closeEvent","reconnectAttempts","reconnectInterval","fetchMessages","response","get","data","newMessage","JSON","parse","prev","err","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","trim","msg","timestamp","Date","toISOString","stringify","connectionStatusColors","connecting","connected","disconnected","className","children","style","color","toUpperCase","fileName","_jsxFileName","lineNumber","columnNumber","length","map","index","toLocaleTimeString","ref","type","value","onChange","e","target","onKeyPress","key","placeholder","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/Chat/Chat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport useWebSocket from 'react-use-websocket';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css';\n\nconst Chat = () => {\n    const [message, setMessage] = useState('');\n    const [messages, setMessages] = useState([]);\n    const [connectionStatus, setConnectionStatus] = useState('connecting');\n    const [error, setError] = useState(null);\n    const navigate = useNavigate();\n    const messagesEndRef = useRef(null);\n\n    const token = localStorage.getItem('token');\n    const username = localStorage.getItem('username');\n    const isAuthenticated = !!token;\n\n    const { sendMessage, lastMessage, readyState } = useWebSocket(\n        'ws://localhost:8082/ws',\n        {\n            onOpen: () => {\n                console.log('WebSocket connection established');\n                setConnectionStatus('connected');\n            },\n            onClose: () => {\n                console.log('WebSocket connection closed');\n                setConnectionStatus('disconnected');\n            },\n            onError: (event) => {\n                console.error('WebSocket error:', event);\n                setConnectionStatus('error');\n                setError('Failed to connect to chat server');\n            },\n            shouldReconnect: (closeEvent) => true,\n            reconnectAttempts: 10,\n            reconnectInterval: 3000,\n        }\n    );\n\n    useEffect(() => {\n        const fetchMessages = async () => {\n            try {\n                const response = await axios.get('http://localhost:8082/messages');\n                setMessages(response.data || []);\n            } catch (error) {\n                console.error('Error fetching messages:', error);\n                setError('Failed to load chat history');\n            }\n        };\n\n        fetchMessages();\n    }, []);\n\n    useEffect(() => {\n        if (lastMessage !== null) {\n            try {\n                const newMessage = JSON.parse(lastMessage.data);\n                setMessages(prev => [...prev, newMessage]);\n            } catch (err) {\n                console.error('Error parsing message:', err);\n            }\n        }\n    }, [lastMessage]);\n\n    useEffect(() => {\n        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n    }, [messages]);\n\n    const handleSendMessage = () => {\n        if (!isAuthenticated) {\n            navigate('/login');\n            return;\n        }\n\n        if (!message.trim()) return;\n\n        const msg = {\n            username: username || 'Anonymous',\n            message: message.trim(),\n            timestamp: new Date().toISOString()\n        };\n\n        sendMessage(JSON.stringify(msg));\n        setMessage('');\n    };\n\n    const connectionStatusColors = {\n        connecting: 'orange',\n        connected: 'green',\n        disconnected: 'red',\n        error: 'red'\n    };\n\n    return (\n        <div className=\"chat-container\">\n            <div className=\"connection-status\" style={{ color: connectionStatusColors[connectionStatus] }}>\n                {connectionStatus.toUpperCase()}\n                {error && <span className=\"error-text\"> - {error}</span>}\n            </div>\n\n            <div className=\"messages\">\n                {messages.length > 0 ? (\n                    messages.map((msg, index) => (\n                        <div key={index} className=\"message\">\n                            <span className=\"message-username\">{msg.username}:</span>\n                            <span className=\"message-text\">{msg.message}</span>\n                            <span className=\"message-time\">\n                                {new Date(msg.timestamp).toLocaleTimeString()}\n                            </span>\n                        </div>\n                    ))\n                ) : (\n                    <div className=\"no-messages\">No messages yet</div>\n                )}\n                <div ref={messagesEndRef} />\n            </div>\n\n            <div className=\"message-input-container\">\n                <input\n                    type=\"text\"\n                    value={message}\n                    onChange={(e) => setMessage(e.target.value)}\n                    onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                    placeholder={isAuthenticated ? \"Type your message...\" : \"Please login to chat\"}\n                    disabled={!isAuthenticated || connectionStatus !== 'connected'}\n                />\n                <button\n                    onClick={handleSendMessage}\n                    disabled={!message.trim() || !isAuthenticated || connectionStatus !== 'connected'}\n                >\n                    Send\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default Chat;\n // src/Chat.js\n// import React, { useState, useEffect, useRef } from 'react';\n// import useWebSocket from 'react-use-websocket';\n// import axios from 'axios';\n// import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css';\n\n// const Chat = () => {\n//   const [message, setMessage] = useState('');\n//   const [messages, setMessages] = useState([]);\n//   const { sendMessage, lastMessage } = useWebSocket('ws://localhost:8082/ws');\n//   const usernames = localStorage.getItem(\"username\");\n//   const messagesEndRef = useRef(null);\n\n//   useEffect(() => {\n//     // Загрузка сообщений из базы данных при инициализации\n//     const fetchMessages = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:8082/messages');\n//         setMessages(response.data);\n//       } catch (error) {\n//         console.error('Error fetching messages:', error);\n//       }\n//     };\n\n//     fetchMessages();\n//   }, []);\n\n//   useEffect(() => {\n//     if (lastMessage !== null) {\n//       setMessages((prevMessages) => {\n//         if (Array.isArray(prevMessages)) {\n//           return [...prevMessages, JSON.parse(lastMessage.data)];\n//         } else {\n//           return [JSON.parse(lastMessage.data)];\n//         }\n//       });\n//     }\n//   }, [lastMessage]);\n\n//   useEffect(() => {\n//     // Прокрутка вниз при добавлении нового сообщения\n//     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n//   }, [messages]);\n\n//   const handleSendMessage = () => {\n//     const msg = { username: usernames, message };\n//     sendMessage(JSON.stringify(msg));\n//     setMessage('');\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"connection-status connected\">\n//         Чатик\n//       </div>\n//       <div className=\"messages\">\n//         {messages && messages.length > 0 ? (\n//           messages.map((msg, index) => (\n//             <div key={index} className=\"message\">\n//               <span className=\"user\">{msg.username}:</span>\n//               <span>{msg.message}</span>\n//             </div>\n//           ))\n//         ) : (\n//           <div className=\"message system\">No messages yet.</div>\n//         )}\n//         <div ref={messagesEndRef} />\n//       </div>\n//       <div className=\"message-form\">\n//         <input\n//           type=\"text\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button onClick={handleSendMessage} disabled={!message.trim()}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}