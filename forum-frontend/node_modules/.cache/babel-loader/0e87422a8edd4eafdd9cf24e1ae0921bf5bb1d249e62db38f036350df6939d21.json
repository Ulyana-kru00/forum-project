{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState, useCallback } from 'react';\nconst useWebSocket = (baseUrl, {\n  manual = false\n} = {}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\n  const [error, setError] = useState(null);\n  const wsRef = useRef(null);\n  const reconnectTimeoutRef = useRef(null);\n  const connect = useCallback(() => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.warn('No token found in localStorage');\n      setError('Authentication token not found.');\n      return;\n    }\n    const wsUrl = `${baseUrl}?token=${encodeURIComponent(token)}`;\n    const ws = new WebSocket(wsUrl);\n    wsRef.current = ws;\n    setConnectionStatus('connecting');\n    ws.onopen = () => {\n      setConnectionStatus('connected');\n      setError(null);\n    };\n    ws.onmessage = event => {\n      try {\n        const data = JSON.parse(event.data);\n        setMessages(prev => [...prev, data]);\n      } catch (err) {\n        console.error('Error parsing message', err);\n      }\n    };\n    ws.onerror = err => {\n      console.error('WebSocket error:', err);\n      setError('WebSocket encountered an error.');\n    };\n    ws.onclose = () => {\n      setConnectionStatus('disconnected');\n      if (!manual) {\n        reconnectTimeoutRef.current = setTimeout(connect, 5000);\n      }\n    };\n  }, [baseUrl, manual]);\n  const disconnect = useCallback((manualClose = false) => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n    }\n    if (wsRef.current) {\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n    setConnectionStatus('disconnected');\n    if (manualClose) {\n      setError(null);\n    }\n  }, []);\n  const sendMessage = useCallback(message => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n    } else {\n      setError('WebSocket is not connected');\n    }\n  }, []);\n  useEffect(() => {\n    if (!manual) {\n      connect();\n    }\n    return () => {\n      disconnect(true);\n    };\n  }, [connect, disconnect, manual]);\n  return {\n    messages,\n    sendMessage,\n    connectionStatus,\n    connect,\n    disconnect,\n    error\n  };\n};\n_s(useWebSocket, \"MzczDXID/WW2Gbb4IXhM3mYkWXM=\");\nexport default useWebSocket;\n\n// import { useEffect, useRef, useState, useCallback } from 'react';\n\n// export function useWebSocket(url, { manual = false } = {}) {\n//   const socketRef = useRef(null);\n//   const reconnectTimeoutRef = useRef(null);\n//   const reconnectInterval = useRef(1000);\n//   const [isConnected, setIsConnected] = useState(false);\n//   const [connectionStatus, setConnectionStatus] = useState('disconnected');\n//   const [messages, setMessages] = useState([]);\n//   const [error, setError] = useState(null);\n//   const messageQueue = useRef([]);\n\n//   const getWebSocketUrl = useCallback(() => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         setError('Authentication token not found');\n//         return null;\n//       }\n\n//       const wsUrl = new URL(url);\n//       wsUrl.searchParams.set('token', token);\n//       return wsUrl.toString();\n//     } catch (e) {\n//       console.error('Invalid WebSocket URL:', e);\n//       setError('Invalid WebSocket URL');\n//       return null;\n//     }\n//   }, [url]);\n\n//   const handleIncomingMessage = useCallback((data) => {\n//     switch (data.type) {\n//       case 'MESSAGE':\n//         setMessages(prev => [...prev, data.data]);\n//         break;\n//       case 'HISTORY':\n//         setMessages(data.data);\n//         break;\n//       case 'AUTH_ERROR':\n//         setError(`Authentication error: ${data.message}`);\n//         localStorage.removeItem('token');\n//         window.location.reload();\n//         break;\n//       default:\n//         console.warn('Unhandled message type:', data.type);\n//     }\n//   }, []);\n\n//   const processMessageQueue = () => {\n//     while (messageQueue.current.length > 0 && socketRef.current?.readyState === WebSocket.OPEN) {\n//       const message = messageQueue.current.shift();\n//       socketRef.current.send(JSON.stringify(message));\n//     }\n//   };\n\n//   // 2. Обновленный useWebSocket.js (React)\n// const connect = useCallback(() => {\n//   const wsUrl = getWebSocketUrl();\n//   if (!wsUrl) return;\n\n//   if (socketRef.current) {\n//     if (socketRef.current.readyState === WebSocket.OPEN) {\n//       console.log('Already connected');\n//       return;\n//     }\n//     socketRef.current.close();\n//   }\n\n//   console.log('Attempting WebSocket connection...');\n//   setConnectionStatus('connecting');\n\n//   const ws = new WebSocket(wsUrl);\n//   socketRef.current = ws;\n\n//   ws.onopen = () => {\n//     console.log('WebSocket connected');\n//     setIsConnected(true);\n//     setConnectionStatus('connected');\n//     setError(null);\n//     reconnectInterval.current = 1000;\n//     processMessageQueue();\n\n//     // Запрос истории\n//     const historyRequest = JSON.stringify({\n//       type: 'GET_HISTORY',\n//       timestamp: Date.now()\n//     });\n//     ws.send(historyRequest);\n//   };\n\n//   ws.onmessage = (event) => {\n//     try {\n//       const parsedData = JSON.parse(event.data);\n//       handleIncomingMessage(parsedData);\n//     } catch (e) {\n//       console.error('Message parse error:', e);\n//     }\n//   };\n\n//   ws.onerror = (error) => {\n//     console.error('WebSocket error:', error);\n//     setError('Connection error');\n//     setConnectionStatus('error');\n//   };\n\n//   ws.onclose = (event) => {\n//     console.log(`WebSocket closed: ${event.code}`, event.reason);\n//     setIsConnected(false);\n//     setConnectionStatus('disconnected');\n\n//     if (event.code === 4002) { // Аутентификация\n//       handleIncomingMessage({\n//         type: 'AUTH_ERROR',\n//         message: event.reason || 'Authentication failed'\n//       });\n//       return;\n//     }\n\n//     if (!event.wasClean && event.code !== 1000) {\n//       const timeout = Math.min(reconnectInterval.current * 2, 30000);\n//       reconnectInterval.current = timeout;\n//       console.log(`Reconnecting in ${timeout}ms...`);\n//       reconnectTimeoutRef.current = setTimeout(connect, timeout);\n//     }\n//   };\n// }, [getWebSocketUrl, handleIncomingMessage]);\n\n//   const disconnect = useCallback((permanent = false) => {\n//     if (socketRef.current) {\n//       if (permanent) {\n//         socketRef.current.onclose = null;\n//       }\n//       socketRef.current.close(\n//         permanent ? 1000 : 1001,\n//         permanent ? 'Normal closure' : 'Reconnecting'\n//       );\n//     }\n//     if (reconnectTimeoutRef.current) {\n//       clearTimeout(reconnectTimeoutRef.current);\n//     }\n//   }, []);\n\n//   const sendMessage = useCallback((message) => {\n//     const userId = parseInt(localStorage.getItem('userId'), 10);\n//     if (isNaN(userId)) {\n//       setError('Invalid user ID');\n//       return;\n//     }\n\n//     const fullMessage = {\n//       ...message,\n//       timestamp: Date.now(),\n//       userId,\n//       username: localStorage.getItem('username') || 'unknown'\n//     };\n\n//     if (socketRef.current?.readyState === WebSocket.OPEN) {\n//       try {\n//         socketRef.current.send(JSON.stringify(fullMessage));\n//       } catch (e) {\n//         console.error('Send error:', e);\n//         setError('Failed to send message');\n//       }\n//     } else {\n//       console.warn('Queueing message - connection not ready');\n//       messageQueue.current.push(fullMessage);\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     if (!manual) {\n//       connect();\n//     }\n\n//     return () => {\n//       disconnect(true);\n//       messageQueue.current = [];\n//     };\n//   }, [connect, disconnect, manual]);\n\n//   return {\n//     isConnected,\n//     connectionStatus,\n//     messages,\n//     sendMessage,\n//     connect,\n//     disconnect,\n//     error\n//   };\n// }\n\n// export default useWebSocket;\n// import { useEffect, useRef, useState, useCallback } from 'react';\n\n// export function useWebSocket(url, { manual = false } = {}) {\n//   const socketRef = useRef(null);\n//   const reconnectTimeoutRef = useRef(null);\n//   const [isConnected, setIsConnected] = useState(false);\n//   const [connectionStatus, setConnectionStatus] = useState('disconnected');\n//   const [messages, setMessages] = useState([]);\n//   const [error, setError] = useState(null);\n\n//   const getWebSocketUrl = useCallback(() => {\n//     const token = localStorage.getItem('token');\n//     if (!token) {\n//       setError('Authentication token not found');\n//       return null;\n//     }\n\n//     try {\n//       const wsUrl = new URL(url);\n//       wsUrl.searchParams.set('token', token);\n//       return wsUrl.toString();\n//     } catch (e) {\n//       console.error('Invalid WebSocket URL:', e);\n//       setError('Invalid WebSocket URL');\n//       return null;\n//     }\n//   }, [url]);\n\n//   const handleIncomingMessage = useCallback((data) => {\n//     if (data.type === 'AUTH_ERROR') {\n//       console.error('Authentication error:', data.message);\n//       setError(data.message);\n//       disconnect();\n//       localStorage.removeItem('token');\n//       window.location.reload();\n//       return;\n//     }\n//     setMessages(prev => [...prev, data]);\n//   }, []);\n\n//   const connect = useCallback(() => {\n//     const wsUrl = getWebSocketUrl();\n//     if (!wsUrl) return;\n\n//     if (socketRef.current && \n//       [WebSocket.OPEN, WebSocket.CONNECTING].includes(socketRef.current.readyState)) {\n//       console.warn('WebSocket already connecting or connected');\n//       return;\n//     }\n\n//     setConnectionStatus('connecting');\n//     console.log('Connecting to WebSocket...');\n\n//     socketRef.current = new WebSocket(wsUrl);\n\n//     socketRef.current.onopen = () => {\n//       console.log('WebSocket connected');\n//       setIsConnected(true);\n//       setConnectionStatus('connected');\n//       setError(null);\n//     };\n\n//     socketRef.current.onmessage = (event) => {\n//       try {\n//         const parsedData = JSON.parse(event.data);\n//         handleIncomingMessage(parsedData);\n//       } catch (e) {\n//         console.warn('Non-JSON message:', event.data);\n//         handleIncomingMessage({ content: event.data });\n//       }\n//     };\n\n//     socketRef.current.onerror = (event) => {\n//       console.error('WebSocket error:', event);\n//       setError('WebSocket connection error');\n//       setConnectionStatus('error');\n//     };\n\n//     socketRef.current.onclose = (event) => {\n//       console.log(`WebSocket closed: ${event.code} ${event.reason}`);\n//       setIsConnected(false);\n//       setConnectionStatus('disconnected');\n\n//       if (!event.wasClean && event.code !== 1000) {\n//         console.log('Reconnecting in 3 seconds...');\n//         reconnectTimeoutRef.current = setTimeout(() => {\n//           connect();\n//         }, 3000);\n//       }\n//     };\n//   }, [getWebSocketUrl, handleIncomingMessage]);\n\n//   const disconnect = useCallback((permanent = false) => {\n//     if (socketRef.current) {\n//       if (permanent) {\n//         socketRef.current.onclose = () => {};\n//       }\n//       socketRef.current.close(\n//         permanent ? 1000 : 1001,\n//         permanent ? 'Normal closure' : 'Reconnecting'\n//       );\n//     }\n//     if (reconnectTimeoutRef.current) {\n//       clearTimeout(reconnectTimeoutRef.current);\n//     }\n//   }, []);\n\n//   const sendMessage = useCallback((message) => {\n//     if (socketRef.current?.readyState === WebSocket.OPEN) {\n//       const messageWithAuth = {\n//         ...message,\n//         timestamp: new Date().toISOString(),\n//         user_id: parseInt(localStorage.getItem('userId'), 10),\n//         username: localStorage.getItem('username') || 'unknown',\n//       };\n//       const raw = localStorage.getItem('username');\n//       console.log('Stored username:', raw); // должно быть нормальное имя\n\n//       try {\n//         socketRef.current.send(JSON.stringify(messageWithAuth));\n//       } catch (e) {\n//         console.error('Error sending message:', e);\n//         setError('Failed to send message');\n//       }\n//     } else {\n//       console.error('Cannot send message - WebSocket not open');\n//       setError('Connection not ready');\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     if (!manual) {\n//       connect();\n//     }\n\n//     return () => {\n//       disconnect(true);\n//     };\n//   }, [connect, disconnect, manual]);\n\n//   return {\n//     isConnected,\n//     connectionStatus,\n//     messages,\n//     sendMessage,\n//     connect,\n//     disconnect,\n//     error,\n//   };\n// }\n\n// export default useWebSocket;","map":{"version":3,"names":["useEffect","useRef","useState","useCallback","useWebSocket","baseUrl","manual","_s","messages","setMessages","connectionStatus","setConnectionStatus","error","setError","wsRef","reconnectTimeoutRef","connect","token","localStorage","getItem","console","warn","wsUrl","encodeURIComponent","ws","WebSocket","current","onopen","onmessage","event","data","JSON","parse","prev","err","onerror","onclose","setTimeout","disconnect","manualClose","clearTimeout","close","sendMessage","message","readyState","OPEN","send","stringify"],"sources":["/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js"],"sourcesContent":["import { useEffect, useRef, useState, useCallback } from 'react';\n\nconst useWebSocket = (baseUrl, { manual = false } = {}) => {\n  const [messages, setMessages] = useState([]);\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\n  const [error, setError] = useState(null);\n\n  const wsRef = useRef(null);\n  const reconnectTimeoutRef = useRef(null);\n\n  const connect = useCallback(() => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      console.warn('No token found in localStorage');\n      setError('Authentication token not found.');\n      return;\n    }\n\n    const wsUrl = `${baseUrl}?token=${encodeURIComponent(token)}`;\n    const ws = new WebSocket(wsUrl);\n\n    wsRef.current = ws;\n    setConnectionStatus('connecting');\n\n    ws.onopen = () => {\n      setConnectionStatus('connected');\n      setError(null);\n    };\n\n    ws.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        setMessages((prev) => [...prev, data]);\n      } catch (err) {\n        console.error('Error parsing message', err);\n      }\n    };\n\n    ws.onerror = (err) => {\n      console.error('WebSocket error:', err);\n      setError('WebSocket encountered an error.');\n    };\n\n    ws.onclose = () => {\n      setConnectionStatus('disconnected');\n      if (!manual) {\n        reconnectTimeoutRef.current = setTimeout(connect, 5000);\n      }\n    };\n  }, [baseUrl, manual]);\n\n  const disconnect = useCallback((manualClose = false) => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n    }\n    if (wsRef.current) {\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n    setConnectionStatus('disconnected');\n    if (manualClose) {\n      setError(null);\n    }\n  }, []);\n\n  const sendMessage = useCallback((message) => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n    } else {\n      setError('WebSocket is not connected');\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!manual) {\n      connect();\n    }\n\n    return () => {\n      disconnect(true);\n    };\n  }, [connect, disconnect, manual]);\n\n  return {\n    messages,\n    sendMessage,\n    connectionStatus,\n    connect,\n    disconnect,\n    error,\n  };\n};\n\nexport default useWebSocket;\n\n\n// import { useEffect, useRef, useState, useCallback } from 'react';\n\n// export function useWebSocket(url, { manual = false } = {}) {\n//   const socketRef = useRef(null);\n//   const reconnectTimeoutRef = useRef(null);\n//   const reconnectInterval = useRef(1000);\n//   const [isConnected, setIsConnected] = useState(false);\n//   const [connectionStatus, setConnectionStatus] = useState('disconnected');\n//   const [messages, setMessages] = useState([]);\n//   const [error, setError] = useState(null);\n//   const messageQueue = useRef([]);\n\n//   const getWebSocketUrl = useCallback(() => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         setError('Authentication token not found');\n//         return null;\n//       }\n      \n//       const wsUrl = new URL(url);\n//       wsUrl.searchParams.set('token', token);\n//       return wsUrl.toString();\n//     } catch (e) {\n//       console.error('Invalid WebSocket URL:', e);\n//       setError('Invalid WebSocket URL');\n//       return null;\n//     }\n//   }, [url]);\n\n//   const handleIncomingMessage = useCallback((data) => {\n//     switch (data.type) {\n//       case 'MESSAGE':\n//         setMessages(prev => [...prev, data.data]);\n//         break;\n//       case 'HISTORY':\n//         setMessages(data.data);\n//         break;\n//       case 'AUTH_ERROR':\n//         setError(`Authentication error: ${data.message}`);\n//         localStorage.removeItem('token');\n//         window.location.reload();\n//         break;\n//       default:\n//         console.warn('Unhandled message type:', data.type);\n//     }\n//   }, []);\n\n//   const processMessageQueue = () => {\n//     while (messageQueue.current.length > 0 && socketRef.current?.readyState === WebSocket.OPEN) {\n//       const message = messageQueue.current.shift();\n//       socketRef.current.send(JSON.stringify(message));\n//     }\n//   };\n\n//   // 2. Обновленный useWebSocket.js (React)\n// const connect = useCallback(() => {\n//   const wsUrl = getWebSocketUrl();\n//   if (!wsUrl) return;\n\n//   if (socketRef.current) {\n//     if (socketRef.current.readyState === WebSocket.OPEN) {\n//       console.log('Already connected');\n//       return;\n//     }\n//     socketRef.current.close();\n//   }\n\n//   console.log('Attempting WebSocket connection...');\n//   setConnectionStatus('connecting');\n  \n//   const ws = new WebSocket(wsUrl);\n//   socketRef.current = ws;\n\n//   ws.onopen = () => {\n//     console.log('WebSocket connected');\n//     setIsConnected(true);\n//     setConnectionStatus('connected');\n//     setError(null);\n//     reconnectInterval.current = 1000;\n//     processMessageQueue();\n    \n//     // Запрос истории\n//     const historyRequest = JSON.stringify({\n//       type: 'GET_HISTORY',\n//       timestamp: Date.now()\n//     });\n//     ws.send(historyRequest);\n//   };\n\n//   ws.onmessage = (event) => {\n//     try {\n//       const parsedData = JSON.parse(event.data);\n//       handleIncomingMessage(parsedData);\n//     } catch (e) {\n//       console.error('Message parse error:', e);\n//     }\n//   };\n\n//   ws.onerror = (error) => {\n//     console.error('WebSocket error:', error);\n//     setError('Connection error');\n//     setConnectionStatus('error');\n//   };\n\n//   ws.onclose = (event) => {\n//     console.log(`WebSocket closed: ${event.code}`, event.reason);\n//     setIsConnected(false);\n//     setConnectionStatus('disconnected');\n\n//     if (event.code === 4002) { // Аутентификация\n//       handleIncomingMessage({\n//         type: 'AUTH_ERROR',\n//         message: event.reason || 'Authentication failed'\n//       });\n//       return;\n//     }\n\n//     if (!event.wasClean && event.code !== 1000) {\n//       const timeout = Math.min(reconnectInterval.current * 2, 30000);\n//       reconnectInterval.current = timeout;\n//       console.log(`Reconnecting in ${timeout}ms...`);\n//       reconnectTimeoutRef.current = setTimeout(connect, timeout);\n//     }\n//   };\n// }, [getWebSocketUrl, handleIncomingMessage]);\n\n//   const disconnect = useCallback((permanent = false) => {\n//     if (socketRef.current) {\n//       if (permanent) {\n//         socketRef.current.onclose = null;\n//       }\n//       socketRef.current.close(\n//         permanent ? 1000 : 1001,\n//         permanent ? 'Normal closure' : 'Reconnecting'\n//       );\n//     }\n//     if (reconnectTimeoutRef.current) {\n//       clearTimeout(reconnectTimeoutRef.current);\n//     }\n//   }, []);\n\n//   const sendMessage = useCallback((message) => {\n//     const userId = parseInt(localStorage.getItem('userId'), 10);\n//     if (isNaN(userId)) {\n//       setError('Invalid user ID');\n//       return;\n//     }\n    \n//     const fullMessage = {\n//       ...message,\n//       timestamp: Date.now(),\n//       userId,\n//       username: localStorage.getItem('username') || 'unknown'\n//     };\n\n//     if (socketRef.current?.readyState === WebSocket.OPEN) {\n//       try {\n//         socketRef.current.send(JSON.stringify(fullMessage));\n//       } catch (e) {\n//         console.error('Send error:', e);\n//         setError('Failed to send message');\n//       }\n//     } else {\n//       console.warn('Queueing message - connection not ready');\n//       messageQueue.current.push(fullMessage);\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     if (!manual) {\n//       connect();\n//     }\n\n//     return () => {\n//       disconnect(true);\n//       messageQueue.current = [];\n//     };\n//   }, [connect, disconnect, manual]);\n\n//   return {\n//     isConnected,\n//     connectionStatus,\n//     messages,\n//     sendMessage,\n//     connect,\n//     disconnect,\n//     error\n//   };\n// }\n\n// export default useWebSocket;\n// import { useEffect, useRef, useState, useCallback } from 'react';\n\n// export function useWebSocket(url, { manual = false } = {}) {\n//   const socketRef = useRef(null);\n//   const reconnectTimeoutRef = useRef(null);\n//   const [isConnected, setIsConnected] = useState(false);\n//   const [connectionStatus, setConnectionStatus] = useState('disconnected');\n//   const [messages, setMessages] = useState([]);\n//   const [error, setError] = useState(null);\n\n//   const getWebSocketUrl = useCallback(() => {\n//     const token = localStorage.getItem('token');\n//     if (!token) {\n//       setError('Authentication token not found');\n//       return null;\n//     }\n\n//     try {\n//       const wsUrl = new URL(url);\n//       wsUrl.searchParams.set('token', token);\n//       return wsUrl.toString();\n//     } catch (e) {\n//       console.error('Invalid WebSocket URL:', e);\n//       setError('Invalid WebSocket URL');\n//       return null;\n//     }\n//   }, [url]);\n\n//   const handleIncomingMessage = useCallback((data) => {\n//     if (data.type === 'AUTH_ERROR') {\n//       console.error('Authentication error:', data.message);\n//       setError(data.message);\n//       disconnect();\n//       localStorage.removeItem('token');\n//       window.location.reload();\n//       return;\n//     }\n//     setMessages(prev => [...prev, data]);\n//   }, []);\n\n//   const connect = useCallback(() => {\n//     const wsUrl = getWebSocketUrl();\n//     if (!wsUrl) return;\n\n//     if (socketRef.current && \n//       [WebSocket.OPEN, WebSocket.CONNECTING].includes(socketRef.current.readyState)) {\n//       console.warn('WebSocket already connecting or connected');\n//       return;\n//     }\n\n//     setConnectionStatus('connecting');\n//     console.log('Connecting to WebSocket...');\n\n//     socketRef.current = new WebSocket(wsUrl);\n\n//     socketRef.current.onopen = () => {\n//       console.log('WebSocket connected');\n//       setIsConnected(true);\n//       setConnectionStatus('connected');\n//       setError(null);\n//     };\n\n//     socketRef.current.onmessage = (event) => {\n//       try {\n//         const parsedData = JSON.parse(event.data);\n//         handleIncomingMessage(parsedData);\n//       } catch (e) {\n//         console.warn('Non-JSON message:', event.data);\n//         handleIncomingMessage({ content: event.data });\n//       }\n//     };\n\n//     socketRef.current.onerror = (event) => {\n//       console.error('WebSocket error:', event);\n//       setError('WebSocket connection error');\n//       setConnectionStatus('error');\n//     };\n\n//     socketRef.current.onclose = (event) => {\n//       console.log(`WebSocket closed: ${event.code} ${event.reason}`);\n//       setIsConnected(false);\n//       setConnectionStatus('disconnected');\n\n//       if (!event.wasClean && event.code !== 1000) {\n//         console.log('Reconnecting in 3 seconds...');\n//         reconnectTimeoutRef.current = setTimeout(() => {\n//           connect();\n//         }, 3000);\n//       }\n//     };\n//   }, [getWebSocketUrl, handleIncomingMessage]);\n\n//   const disconnect = useCallback((permanent = false) => {\n//     if (socketRef.current) {\n//       if (permanent) {\n//         socketRef.current.onclose = () => {};\n//       }\n//       socketRef.current.close(\n//         permanent ? 1000 : 1001,\n//         permanent ? 'Normal closure' : 'Reconnecting'\n//       );\n//     }\n//     if (reconnectTimeoutRef.current) {\n//       clearTimeout(reconnectTimeoutRef.current);\n//     }\n//   }, []);\n\n//   const sendMessage = useCallback((message) => {\n//     if (socketRef.current?.readyState === WebSocket.OPEN) {\n//       const messageWithAuth = {\n//         ...message,\n//         timestamp: new Date().toISOString(),\n//         user_id: parseInt(localStorage.getItem('userId'), 10),\n//         username: localStorage.getItem('username') || 'unknown',\n//       };\n//       const raw = localStorage.getItem('username');\n//       console.log('Stored username:', raw); // должно быть нормальное имя\n      \n//       try {\n//         socketRef.current.send(JSON.stringify(messageWithAuth));\n//       } catch (e) {\n//         console.error('Error sending message:', e);\n//         setError('Failed to send message');\n//       }\n//     } else {\n//       console.error('Cannot send message - WebSocket not open');\n//       setError('Connection not ready');\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     if (!manual) {\n//       connect();\n//     }\n\n//     return () => {\n//       disconnect(true);\n//     };\n//   }, [connect, disconnect, manual]);\n\n//   return {\n//     isConnected,\n//     connectionStatus,\n//     messages,\n//     sendMessage,\n//     connect,\n//     disconnect,\n//     error,\n//   };\n// }\n\n// export default useWebSocket;"],"mappings":"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C,OAAO;IACLE,QAAQ;IACRkC,WAAW;IACXhC,gBAAgB;IAChBM,OAAO;IACPsB,UAAU;IACV1B;EACF,CAAC;AACH,CAAC;AAACL,EAAA,CA1FIH,YAAY;AA4FlB,eAAeA,YAAY;;AAG3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}