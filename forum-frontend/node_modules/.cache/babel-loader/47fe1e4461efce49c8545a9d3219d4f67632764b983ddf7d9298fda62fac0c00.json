{"ast":null,"code":"var _s = $RefreshSig$();\n// useWebSocket.js\nimport { useState, useEffect, useCallback } from 'react';\nconst useWebSocket = (url, options = {}) => {\n  _s();\n  const {\n    manual = false\n  } = options;\n  const [socket, setSocket] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\n  const connect = useCallback(() => {\n    if (socket && (socket.readyState === WebSocket.OPEN || socket.readyState === WebSocket.CONNECTING)) {\n      return; // Avoid creating a new socket if already connecting/connected\n    }\n    const ws = new WebSocket(url);\n    ws.onopen = () => {\n      console.log('WebSocket connected');\n      setSocket(ws);\n      setConnectionStatus('connected');\n    };\n    ws.onmessage = event => {\n      try {\n        const newMessage = JSON.parse(event.data);\n        setMessages(prev => [...prev, newMessage]);\n      } catch (err) {\n        console.error('Error parsing WebSocket message:', err);\n      }\n    };\n    ws.onclose = () => {\n      console.log('WebSocket disconnected');\n      setSocket(null);\n      setConnectionStatus('disconnected');\n      // Auto-reconnect after 5 seconds unless manual\n      if (!manual) {\n        setTimeout(() => {\n          setConnectionStatus('reconnecting');\n          connect();\n        }, 5000);\n      }\n    };\n    ws.onerror = error => {\n      console.error('WebSocket error:', error);\n      setConnectionStatus('error');\n    };\n    setSocket(ws);\n    setConnectionStatus('connecting');\n  }, [url, manual, socket]);\n  const disconnect = useCallback(() => {\n    if (socket) {\n      socket.close();\n      setSocket(null);\n      setConnectionStatus('disconnected');\n    }\n  }, [socket]);\n  useEffect(() => {\n    if (!manual) {\n      connect();\n    }\n    return () => {\n      disconnect();\n    };\n  }, [connect, disconnect, manual]);\n  const sendMessage = message => {\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      socket.send(JSON.stringify(message));\n    } else {\n      console.error('WebSocket is not connected');\n    }\n  };\n  return {\n    socket,\n    messages,\n    sendMessage,\n    connectionStatus,\n    connect,\n    disconnect\n  };\n};\n_s(useWebSocket, \"rXvrEvEKyQ9zoaV5eAnpZ5UHg3E=\");\nexport default useWebSocket;","map":{"version":3,"names":["useState","useEffect","useCallback","useWebSocket","url","options","_s","manual","socket","setSocket","messages","setMessages","connectionStatus","setConnectionStatus","connect","readyState","WebSocket","OPEN","CONNECTING","ws","onopen","console","log","onmessage","event","newMessage","JSON","parse","data","prev","err","error","onclose","setTimeout","onerror","disconnect","close","sendMessage","message","send","stringify"],"sources":["/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js"],"sourcesContent":["// useWebSocket.js\nimport { useState, useEffect, useCallback } from 'react';\n\nconst useWebSocket = (url, options = {}) => {\n    const { manual = false } = options;\n    const [socket, setSocket] = useState(null);\n    const [messages, setMessages] = useState([]);\n    const [connectionStatus, setConnectionStatus] = useState('disconnected');\n\n    const connect = useCallback(() => {\n        if (socket && (socket.readyState === WebSocket.OPEN || socket.readyState === WebSocket.CONNECTING)) {\n            return; // Avoid creating a new socket if already connecting/connected\n        }\n        \n        const ws = new WebSocket(url);\n        \n        ws.onopen = () => {\n            console.log('WebSocket connected');\n            setSocket(ws);\n            setConnectionStatus('connected');\n        };\n\n        ws.onmessage = (event) => {\n            try {\n                const newMessage = JSON.parse(event.data);\n                setMessages(prev => [...prev, newMessage]);\n            } catch (err) {\n                console.error('Error parsing WebSocket message:', err);\n            }\n        };\n\n        ws.onclose = () => {\n            console.log('WebSocket disconnected');\n            setSocket(null);\n            setConnectionStatus('disconnected');\n            // Auto-reconnect after 5 seconds unless manual\n            if (!manual) {\n                setTimeout(() => {\n                    setConnectionStatus('reconnecting');\n                    connect();\n                }, 5000);\n            }\n        };\n\n        ws.onerror = (error) => {\n            console.error('WebSocket error:', error);\n            setConnectionStatus('error');\n        };\n\n        setSocket(ws);\n        setConnectionStatus('connecting');\n    }, [url, manual, socket]);\n\n    const disconnect = useCallback(() => {\n        if (socket) {\n            socket.close();\n            setSocket(null);\n            setConnectionStatus('disconnected');\n        }\n    }, [socket]);\n\n    useEffect(() => {\n        if (!manual) {\n            connect();\n        }\n\n        return () => {\n            disconnect();\n        };\n    }, [connect, disconnect, manual]);\n\n    const sendMessage = (message) => {\n        if (socket && socket.readyState === WebSocket.OPEN) {\n            socket.send(JSON.stringify(message));\n        } else {\n            console.error('WebSocket is not connected');\n        }\n    };\n\n    return { \n        socket, \n        messages, \n        sendMessage, \n        connectionStatus,\n        connect,\n        disconnect \n    };\n};\n\nexport default useWebSocket;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}