{"ast":null,"code":"var _s = $RefreshSig$();\n// useWebSocket.js\nimport { useState, useEffect } from 'react';\nconst useWebSocket = url => {\n  _s();\n  const [socket, setSocket] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\n  useEffect(() => {\n    const ws = new WebSocket(url);\n    ws.onopen = () => {\n      console.log('WebSocket connected');\n      setSocket(ws);\n      setConnectionStatus('connected');\n    };\n    ws.onmessage = event => {\n      try {\n        const newMessage = JSON.parse(event.data);\n        setMessages(prev => [...prev, newMessage]);\n      } catch (err) {\n        console.error('Error parsing WebSocket message:', err);\n      }\n    };\n    ws.onclose = () => {\n      console.log('WebSocket disconnected');\n      setSocket(null);\n      setConnectionStatus('disconnected');\n      // Attempt to reconnect after 5 seconds\n      setTimeout(() => {\n        setConnectionStatus('reconnecting');\n      }, 5000);\n    };\n    ws.onerror = error => {\n      console.error('WebSocket error:', error);\n      setConnectionStatus('error');\n    };\n    return () => {\n      if (ws && ws.readyState === WebSocket.OPEN) {\n        ws.close();\n      }\n    };\n  }, [url]);\n  const sendMessage = message => {\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      socket.send(JSON.stringify(message));\n    } else {\n      console.error('WebSocket is not connected');\n      // Optionally queue messages when disconnected\n    }\n  };\n  return {\n    socket,\n    messages,\n    sendMessage,\n    connectionStatus\n  };\n};\n_s(useWebSocket, \"IhKKRB2Nnw9qvmZutzwECZ0X7o4=\");\nexport default useWebSocket; // Добавьте эту строку\n\n// import { useEffect, useRef, useState, useCallback } from 'react';\n\n// export function useWebSocket(url, { manual = false } = {}) {\n//   const socketRef = useRef(null);\n//   const reconnectTimeoutRef = useRef(null);\n//   const reconnectInterval = useRef(1000);\n//   const [isConnected, setIsConnected] = useState(false);\n//   const [connectionStatus, setConnectionStatus] = useState('disconnected');\n//   const [messages, setMessages] = useState([]);\n//   const [error, setError] = useState(null);\n//   const messageQueue = useRef([]);\n\n//   const getWebSocketUrl = useCallback(() => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         setError('Authentication token not found');\n//         return null;\n//       }\n\n//       const wsUrl = new URL(url);\n//       wsUrl.searchParams.set('token', token);\n//       return wsUrl.toString();\n//     } catch (e) {\n//       console.error('Invalid WebSocket URL:', e);\n//       setError('Invalid WebSocket URL');\n//       return null;\n//     }\n//   }, [url]);\n\n//   const handleIncomingMessage = useCallback((data) => {\n//     switch (data.type) {\n//       case 'MESSAGE':\n//         setMessages(prev => [...prev, data.data]);\n//         break;\n//       case 'HISTORY':\n//         setMessages(data.data);\n//         break;\n//       case 'AUTH_ERROR':\n//         setError(`Authentication error: ${data.message}`);\n//         localStorage.removeItem('token');\n//         window.location.reload();\n//         break;\n//       default:\n//         console.warn('Unhandled message type:', data.type);\n//     }\n//   }, []);\n\n//   const processMessageQueue = () => {\n//     while (messageQueue.current.length > 0 && socketRef.current?.readyState === WebSocket.OPEN) {\n//       const message = messageQueue.current.shift();\n//       socketRef.current.send(JSON.stringify(message));\n//     }\n//   };\n\n//   // 2. Обновленный useWebSocket.js (React)\n// const connect = useCallback(() => {\n//   const wsUrl = getWebSocketUrl();\n//   if (!wsUrl) return;\n\n//   if (socketRef.current) {\n//     if (socketRef.current.readyState === WebSocket.OPEN) {\n//       console.log('Already connected');\n//       return;\n//     }\n//     socketRef.current.close();\n//   }\n\n//   console.log('Attempting WebSocket connection...');\n//   setConnectionStatus('connecting');\n\n//   const ws = new WebSocket(wsUrl);\n//   socketRef.current = ws;\n\n//   ws.onopen = () => {\n//     console.log('WebSocket connected');\n//     setIsConnected(true);\n//     setConnectionStatus('connected');\n//     setError(null);\n//     reconnectInterval.current = 1000;\n//     processMessageQueue();\n\n//     // Запрос истории\n//     const historyRequest = JSON.stringify({\n//       type: 'GET_HISTORY',\n//       timestamp: Date.now()\n//     });\n//     ws.send(historyRequest);\n//   };\n\n//   ws.onmessage = (event) => {\n//     try {\n//       const parsedData = JSON.parse(event.data);\n//       handleIncomingMessage(parsedData);\n//     } catch (e) {\n//       console.error('Message parse error:', e);\n//     }\n//   };\n\n//   ws.onerror = (error) => {\n//     console.error('WebSocket error:', error);\n//     setError('Connection error');\n//     setConnectionStatus('error');\n//   };\n\n//   ws.onclose = (event) => {\n//     console.log(`WebSocket closed: ${event.code}`, event.reason);\n//     setIsConnected(false);\n//     setConnectionStatus('disconnected');\n\n//     if (event.code === 4002) { // Аутентификация\n//       handleIncomingMessage({\n//         type: 'AUTH_ERROR',\n//         message: event.reason || 'Authentication failed'\n//       });\n//       return;\n//     }\n\n//     if (!event.wasClean && event.code !== 1000) {\n//       const timeout = Math.min(reconnectInterval.current * 2, 30000);\n//       reconnectInterval.current = timeout;\n//       console.log(`Reconnecting in ${timeout}ms...`);\n//       reconnectTimeoutRef.current = setTimeout(connect, timeout);\n//     }\n//   };\n// }, [getWebSocketUrl, handleIncomingMessage]);\n\n//   const disconnect = useCallback((permanent = false) => {\n//     if (socketRef.current) {\n//       if (permanent) {\n//         socketRef.current.onclose = null;\n//       }\n//       socketRef.current.close(\n//         permanent ? 1000 : 1001,\n//         permanent ? 'Normal closure' : 'Reconnecting'\n//       );\n//     }\n//     if (reconnectTimeoutRef.current) {\n//       clearTimeout(reconnectTimeoutRef.current);\n//     }\n//   }, []);\n\n//   const sendMessage = useCallback((message) => {\n//     const userId = parseInt(localStorage.getItem('userId'), 10);\n//     if (isNaN(userId)) {\n//       setError('Invalid user ID');\n//       return;\n//     }\n\n//     const fullMessage = {\n//       ...message,\n//       timestamp: Date.now(),\n//       userId,\n//       username: localStorage.getItem('username') || 'unknown'\n//     };\n\n//     if (socketRef.current?.readyState === WebSocket.OPEN) {\n//       try {\n//         socketRef.current.send(JSON.stringify(fullMessage));\n//       } catch (e) {\n//         console.error('Send error:', e);\n//         setError('Failed to send message');\n//       }\n//     } else {\n//       console.warn('Queueing message - connection not ready');\n//       messageQueue.current.push(fullMessage);\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     if (!manual) {\n//       connect();\n//     }\n\n//     return () => {\n//       disconnect(true);\n//       messageQueue.current = [];\n//     };\n//   }, [connect, disconnect, manual]);\n\n//   return {\n//     isConnected,\n//     connectionStatus,\n//     messages,\n//     sendMessage,\n//     connect,\n//     disconnect,\n//     error\n//   };\n// }\n\n// export default useWebSocket;\n// import { useEffect, useRef, useState, useCallback } from 'react';\n\n// export function useWebSocket(url, { manual = false } = {}) {\n//   const socketRef = useRef(null);\n//   const reconnectTimeoutRef = useRef(null);\n//   const [isConnected, setIsConnected] = useState(false);\n//   const [connectionStatus, setConnectionStatus] = useState('disconnected');\n//   const [messages, setMessages] = useState([]);\n//   const [error, setError] = useState(null);\n\n//   const getWebSocketUrl = useCallback(() => {\n//     const token = localStorage.getItem('token');\n//     if (!token) {\n//       setError('Authentication token not found');\n//       return null;\n//     }\n\n//     try {\n//       const wsUrl = new URL(url);\n//       wsUrl.searchParams.set('token', token);\n//       return wsUrl.toString();\n//     } catch (e) {\n//       console.error('Invalid WebSocket URL:', e);\n//       setError('Invalid WebSocket URL');\n//       return null;\n//     }\n//   }, [url]);\n\n//   const handleIncomingMessage = useCallback((data) => {\n//     if (data.type === 'AUTH_ERROR') {\n//       console.error('Authentication error:', data.message);\n//       setError(data.message);\n//       disconnect();\n//       localStorage.removeItem('token');\n//       window.location.reload();\n//       return;\n//     }\n//     setMessages(prev => [...prev, data]);\n//   }, []);\n\n//   const connect = useCallback(() => {\n//     const wsUrl = getWebSocketUrl();\n//     if (!wsUrl) return;\n\n//     if (socketRef.current && \n//       [WebSocket.OPEN, WebSocket.CONNECTING].includes(socketRef.current.readyState)) {\n//       console.warn('WebSocket already connecting or connected');\n//       return;\n//     }\n\n//     setConnectionStatus('connecting');\n//     console.log('Connecting to WebSocket...');\n\n//     socketRef.current = new WebSocket(wsUrl);\n\n//     socketRef.current.onopen = () => {\n//       console.log('WebSocket connected');\n//       setIsConnected(true);\n//       setConnectionStatus('connected');\n//       setError(null);\n//     };\n\n//     socketRef.current.onmessage = (event) => {\n//       try {\n//         const parsedData = JSON.parse(event.data);\n//         handleIncomingMessage(parsedData);\n//       } catch (e) {\n//         console.warn('Non-JSON message:', event.data);\n//         handleIncomingMessage({ content: event.data });\n//       }\n//     };\n\n//     socketRef.current.onerror = (event) => {\n//       console.error('WebSocket error:', event);\n//       setError('WebSocket connection error');\n//       setConnectionStatus('error');\n//     };\n\n//     socketRef.current.onclose = (event) => {\n//       console.log(`WebSocket closed: ${event.code} ${event.reason}`);\n//       setIsConnected(false);\n//       setConnectionStatus('disconnected');\n\n//       if (!event.wasClean && event.code !== 1000) {\n//         console.log('Reconnecting in 3 seconds...');\n//         reconnectTimeoutRef.current = setTimeout(() => {\n//           connect();\n//         }, 3000);\n//       }\n//     };\n//   }, [getWebSocketUrl, handleIncomingMessage]);\n\n//   const disconnect = useCallback((permanent = false) => {\n//     if (socketRef.current) {\n//       if (permanent) {\n//         socketRef.current.onclose = () => {};\n//       }\n//       socketRef.current.close(\n//         permanent ? 1000 : 1001,\n//         permanent ? 'Normal closure' : 'Reconnecting'\n//       );\n//     }\n//     if (reconnectTimeoutRef.current) {\n//       clearTimeout(reconnectTimeoutRef.current);\n//     }\n//   }, []);\n\n//   const sendMessage = useCallback((message) => {\n//     if (socketRef.current?.readyState === WebSocket.OPEN) {\n//       const messageWithAuth = {\n//         ...message,\n//         timestamp: new Date().toISOString(),\n//         user_id: parseInt(localStorage.getItem('userId'), 10),\n//         username: localStorage.getItem('username') || 'unknown',\n//       };\n//       const raw = localStorage.getItem('username');\n//       console.log('Stored username:', raw); // должно быть нормальное имя\n\n//       try {\n//         socketRef.current.send(JSON.stringify(messageWithAuth));\n//       } catch (e) {\n//         console.error('Error sending message:', e);\n//         setError('Failed to send message');\n//       }\n//     } else {\n//       console.error('Cannot send message - WebSocket not open');\n//       setError('Connection not ready');\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     if (!manual) {\n//       connect();\n//     }\n\n//     return () => {\n//       disconnect(true);\n//     };\n//   }, [connect, disconnect, manual]);\n\n//   return {\n//     isConnected,\n//     connectionStatus,\n//     messages,\n//     sendMessage,\n//     connect,\n//     disconnect,\n//     error,\n//   };\n// }\n\n// export default useWebSocket;","map":{"version":3,"names":["useState","useEffect","useWebSocket","url","_s","socket","setSocket","messages","setMessages","connectionStatus","setConnectionStatus","ws","WebSocket","onopen","console","log","onmessage","event","newMessage","JSON","parse","data","prev","err","error","onclose","setTimeout","onerror","readyState","OPEN","close","sendMessage","message","send","stringify"],"sources":["/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js"],"sourcesContent":["// useWebSocket.js\nimport { useState, useEffect } from 'react';\nconst useWebSocket = (url) => {\n    const [socket, setSocket] = useState(null);\n    const [messages, setMessages] = useState([]);\n    const [connectionStatus, setConnectionStatus] = useState('disconnected');\n\n    useEffect(() => {\n        const ws = new WebSocket(url);\n        \n        ws.onopen = () => {\n            console.log('WebSocket connected');\n            setSocket(ws);\n            setConnectionStatus('connected');\n        };\n\n        ws.onmessage = (event) => {\n            try {\n                const newMessage = JSON.parse(event.data);\n                setMessages(prev => [...prev, newMessage]);\n            } catch (err) {\n                console.error('Error parsing WebSocket message:', err);\n            }\n        };\n\n        ws.onclose = () => {\n            console.log('WebSocket disconnected');\n            setSocket(null);\n            setConnectionStatus('disconnected');\n            // Attempt to reconnect after 5 seconds\n            setTimeout(() => {\n                setConnectionStatus('reconnecting');\n            }, 5000);\n        };\n\n        ws.onerror = (error) => {\n            console.error('WebSocket error:', error);\n            setConnectionStatus('error');\n        };\n\n        return () => {\n            if (ws && ws.readyState === WebSocket.OPEN) {\n                ws.close();\n            }\n        };\n    }, [url]);\n\n    const sendMessage = (message) => {\n        if (socket && socket.readyState === WebSocket.OPEN) {\n            socket.send(JSON.stringify(message));\n        } else {\n            console.error('WebSocket is not connected');\n            // Optionally queue messages when disconnected\n        }\n    };\n\n    return { \n        socket, \n        messages, \n        sendMessage, \n        connectionStatus \n    };\n};\n\nexport default useWebSocket; // Добавьте эту строку\n\n// import { useEffect, useRef, useState, useCallback } from 'react';\n\n// export function useWebSocket(url, { manual = false } = {}) {\n//   const socketRef = useRef(null);\n//   const reconnectTimeoutRef = useRef(null);\n//   const reconnectInterval = useRef(1000);\n//   const [isConnected, setIsConnected] = useState(false);\n//   const [connectionStatus, setConnectionStatus] = useState('disconnected');\n//   const [messages, setMessages] = useState([]);\n//   const [error, setError] = useState(null);\n//   const messageQueue = useRef([]);\n\n//   const getWebSocketUrl = useCallback(() => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         setError('Authentication token not found');\n//         return null;\n//       }\n      \n//       const wsUrl = new URL(url);\n//       wsUrl.searchParams.set('token', token);\n//       return wsUrl.toString();\n//     } catch (e) {\n//       console.error('Invalid WebSocket URL:', e);\n//       setError('Invalid WebSocket URL');\n//       return null;\n//     }\n//   }, [url]);\n\n//   const handleIncomingMessage = useCallback((data) => {\n//     switch (data.type) {\n//       case 'MESSAGE':\n//         setMessages(prev => [...prev, data.data]);\n//         break;\n//       case 'HISTORY':\n//         setMessages(data.data);\n//         break;\n//       case 'AUTH_ERROR':\n//         setError(`Authentication error: ${data.message}`);\n//         localStorage.removeItem('token');\n//         window.location.reload();\n//         break;\n//       default:\n//         console.warn('Unhandled message type:', data.type);\n//     }\n//   }, []);\n\n//   const processMessageQueue = () => {\n//     while (messageQueue.current.length > 0 && socketRef.current?.readyState === WebSocket.OPEN) {\n//       const message = messageQueue.current.shift();\n//       socketRef.current.send(JSON.stringify(message));\n//     }\n//   };\n\n//   // 2. Обновленный useWebSocket.js (React)\n// const connect = useCallback(() => {\n//   const wsUrl = getWebSocketUrl();\n//   if (!wsUrl) return;\n\n//   if (socketRef.current) {\n//     if (socketRef.current.readyState === WebSocket.OPEN) {\n//       console.log('Already connected');\n//       return;\n//     }\n//     socketRef.current.close();\n//   }\n\n//   console.log('Attempting WebSocket connection...');\n//   setConnectionStatus('connecting');\n  \n//   const ws = new WebSocket(wsUrl);\n//   socketRef.current = ws;\n\n//   ws.onopen = () => {\n//     console.log('WebSocket connected');\n//     setIsConnected(true);\n//     setConnectionStatus('connected');\n//     setError(null);\n//     reconnectInterval.current = 1000;\n//     processMessageQueue();\n    \n//     // Запрос истории\n//     const historyRequest = JSON.stringify({\n//       type: 'GET_HISTORY',\n//       timestamp: Date.now()\n//     });\n//     ws.send(historyRequest);\n//   };\n\n//   ws.onmessage = (event) => {\n//     try {\n//       const parsedData = JSON.parse(event.data);\n//       handleIncomingMessage(parsedData);\n//     } catch (e) {\n//       console.error('Message parse error:', e);\n//     }\n//   };\n\n//   ws.onerror = (error) => {\n//     console.error('WebSocket error:', error);\n//     setError('Connection error');\n//     setConnectionStatus('error');\n//   };\n\n//   ws.onclose = (event) => {\n//     console.log(`WebSocket closed: ${event.code}`, event.reason);\n//     setIsConnected(false);\n//     setConnectionStatus('disconnected');\n\n//     if (event.code === 4002) { // Аутентификация\n//       handleIncomingMessage({\n//         type: 'AUTH_ERROR',\n//         message: event.reason || 'Authentication failed'\n//       });\n//       return;\n//     }\n\n//     if (!event.wasClean && event.code !== 1000) {\n//       const timeout = Math.min(reconnectInterval.current * 2, 30000);\n//       reconnectInterval.current = timeout;\n//       console.log(`Reconnecting in ${timeout}ms...`);\n//       reconnectTimeoutRef.current = setTimeout(connect, timeout);\n//     }\n//   };\n// }, [getWebSocketUrl, handleIncomingMessage]);\n\n//   const disconnect = useCallback((permanent = false) => {\n//     if (socketRef.current) {\n//       if (permanent) {\n//         socketRef.current.onclose = null;\n//       }\n//       socketRef.current.close(\n//         permanent ? 1000 : 1001,\n//         permanent ? 'Normal closure' : 'Reconnecting'\n//       );\n//     }\n//     if (reconnectTimeoutRef.current) {\n//       clearTimeout(reconnectTimeoutRef.current);\n//     }\n//   }, []);\n\n//   const sendMessage = useCallback((message) => {\n//     const userId = parseInt(localStorage.getItem('userId'), 10);\n//     if (isNaN(userId)) {\n//       setError('Invalid user ID');\n//       return;\n//     }\n    \n//     const fullMessage = {\n//       ...message,\n//       timestamp: Date.now(),\n//       userId,\n//       username: localStorage.getItem('username') || 'unknown'\n//     };\n\n//     if (socketRef.current?.readyState === WebSocket.OPEN) {\n//       try {\n//         socketRef.current.send(JSON.stringify(fullMessage));\n//       } catch (e) {\n//         console.error('Send error:', e);\n//         setError('Failed to send message');\n//       }\n//     } else {\n//       console.warn('Queueing message - connection not ready');\n//       messageQueue.current.push(fullMessage);\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     if (!manual) {\n//       connect();\n//     }\n\n//     return () => {\n//       disconnect(true);\n//       messageQueue.current = [];\n//     };\n//   }, [connect, disconnect, manual]);\n\n//   return {\n//     isConnected,\n//     connectionStatus,\n//     messages,\n//     sendMessage,\n//     connect,\n//     disconnect,\n//     error\n//   };\n// }\n\n// export default useWebSocket;\n// import { useEffect, useRef, useState, useCallback } from 'react';\n\n// export function useWebSocket(url, { manual = false } = {}) {\n//   const socketRef = useRef(null);\n//   const reconnectTimeoutRef = useRef(null);\n//   const [isConnected, setIsConnected] = useState(false);\n//   const [connectionStatus, setConnectionStatus] = useState('disconnected');\n//   const [messages, setMessages] = useState([]);\n//   const [error, setError] = useState(null);\n\n//   const getWebSocketUrl = useCallback(() => {\n//     const token = localStorage.getItem('token');\n//     if (!token) {\n//       setError('Authentication token not found');\n//       return null;\n//     }\n\n//     try {\n//       const wsUrl = new URL(url);\n//       wsUrl.searchParams.set('token', token);\n//       return wsUrl.toString();\n//     } catch (e) {\n//       console.error('Invalid WebSocket URL:', e);\n//       setError('Invalid WebSocket URL');\n//       return null;\n//     }\n//   }, [url]);\n\n//   const handleIncomingMessage = useCallback((data) => {\n//     if (data.type === 'AUTH_ERROR') {\n//       console.error('Authentication error:', data.message);\n//       setError(data.message);\n//       disconnect();\n//       localStorage.removeItem('token');\n//       window.location.reload();\n//       return;\n//     }\n//     setMessages(prev => [...prev, data]);\n//   }, []);\n\n//   const connect = useCallback(() => {\n//     const wsUrl = getWebSocketUrl();\n//     if (!wsUrl) return;\n\n//     if (socketRef.current && \n//       [WebSocket.OPEN, WebSocket.CONNECTING].includes(socketRef.current.readyState)) {\n//       console.warn('WebSocket already connecting or connected');\n//       return;\n//     }\n\n//     setConnectionStatus('connecting');\n//     console.log('Connecting to WebSocket...');\n\n//     socketRef.current = new WebSocket(wsUrl);\n\n//     socketRef.current.onopen = () => {\n//       console.log('WebSocket connected');\n//       setIsConnected(true);\n//       setConnectionStatus('connected');\n//       setError(null);\n//     };\n\n//     socketRef.current.onmessage = (event) => {\n//       try {\n//         const parsedData = JSON.parse(event.data);\n//         handleIncomingMessage(parsedData);\n//       } catch (e) {\n//         console.warn('Non-JSON message:', event.data);\n//         handleIncomingMessage({ content: event.data });\n//       }\n//     };\n\n//     socketRef.current.onerror = (event) => {\n//       console.error('WebSocket error:', event);\n//       setError('WebSocket connection error');\n//       setConnectionStatus('error');\n//     };\n\n//     socketRef.current.onclose = (event) => {\n//       console.log(`WebSocket closed: ${event.code} ${event.reason}`);\n//       setIsConnected(false);\n//       setConnectionStatus('disconnected');\n\n//       if (!event.wasClean && event.code !== 1000) {\n//         console.log('Reconnecting in 3 seconds...');\n//         reconnectTimeoutRef.current = setTimeout(() => {\n//           connect();\n//         }, 3000);\n//       }\n//     };\n//   }, [getWebSocketUrl, handleIncomingMessage]);\n\n//   const disconnect = useCallback((permanent = false) => {\n//     if (socketRef.current) {\n//       if (permanent) {\n//         socketRef.current.onclose = () => {};\n//       }\n//       socketRef.current.close(\n//         permanent ? 1000 : 1001,\n//         permanent ? 'Normal closure' : 'Reconnecting'\n//       );\n//     }\n//     if (reconnectTimeoutRef.current) {\n//       clearTimeout(reconnectTimeoutRef.current);\n//     }\n//   }, []);\n\n//   const sendMessage = useCallback((message) => {\n//     if (socketRef.current?.readyState === WebSocket.OPEN) {\n//       const messageWithAuth = {\n//         ...message,\n//         timestamp: new Date().toISOString(),\n//         user_id: parseInt(localStorage.getItem('userId'), 10),\n//         username: localStorage.getItem('username') || 'unknown',\n//       };\n//       const raw = localStorage.getItem('username');\n//       console.log('Stored username:', raw); // должно быть нормальное имя\n      \n//       try {\n//         socketRef.current.send(JSON.stringify(messageWithAuth));\n//       } catch (e) {\n//         console.error('Error sending message:', e);\n//         setError('Failed to send message');\n//       }\n//     } else {\n//       console.error('Cannot send message - WebSocket not open');\n//       setError('Connection not ready');\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     if (!manual) {\n//       connect();\n//     }\n\n//     return () => {\n//       disconnect(true);\n//     };\n//   }, [connect, disconnect, manual]);\n\n//   return {\n//     isConnected,\n//     connectionStatus,\n//     messages,\n//     sendMessage,\n//     connect,\n//     disconnect,\n//     error,\n//   };\n// }\n\n// export default useWebSocket;"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,MAAMC,YAAY,GAAIC,GAAG,IAAK;EAAAC,EAAA;EAC1B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGV,QAAQ,CAAC,cAAc,CAAC;EAExEC,SAAS,CAAC,MAAM;IACZ,MAAMU,EAAE,GAAG,IAAIC,SAAS,CAACT,GAAG,CAAC;IAE7BQ,EAAE,CAACE,MAAM,GAAG,MAAM;MACdC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MAClCT,SAAS,CAACK,EAAE,CAAC;MACbD,mBAAmB,CAAC,WAAW,CAAC;IACpC,CAAC;IAEDC,EAAE,CAACK,SAAS,GAAIC,KAAK,IAAK;MACtB,IAAI;QACA,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,IAAI,CAAC;QACzCb,WAAW,CAACc,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEJ,UAAU,CAAC,CAAC;MAC9C,CAAC,CAAC,OAAOK,GAAG,EAAE;QACVT,OAAO,CAACU,KAAK,CAAC,kCAAkC,EAAED,GAAG,CAAC;MAC1D;IACJ,CAAC;IAEDZ,EAAE,CAACc,OAAO,GAAG,MAAM;MACfX,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MACrCT,SAAS,CAAC,IAAI,CAAC;MACfI,mBAAmB,CAAC,cAAc,CAAC;MACnC;MACAgB,UAAU,CAAC,MAAM;QACbhB,mBAAmB,CAAC,cAAc,CAAC;MACvC,CAAC,EAAE,IAAI,CAAC;IACZ,CAAC;IAEDC,EAAE,CAACgB,OAAO,GAAIH,KAAK,IAAK;MACpBV,OAAO,CAACU,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MACxCd,mBAAmB,CAAC,OAAO,CAAC;IAChC,CAAC;IAED,OAAO,MAAM;MACT,IAAIC,EAAE,IAAIA,EAAE,CAACiB,UAAU,KAAKhB,SAAS,CAACiB,IAAI,EAAE;QACxClB,EAAE,CAACmB,KAAK,CAAC,CAAC;MACd;IACJ,CAAC;EACL,CAAC,EAAE,CAAC3B,GAAG,CAAC,CAAC;EAET,MAAM4B,WAAW,GAAIC,OAAO,IAAK;IAC7B,IAAI3B,MAAM,IAAIA,MAAM,CAACuB,UAAU,KAAKhB,SAAS,CAACiB,IAAI,EAAE;MAChDxB,MAAM,CAAC4B,IAAI,CAACd,IAAI,CAACe,SAAS,CAACF,OAAO,CAAC,CAAC;IACxC,CAAC,MAAM;MACHlB,OAAO,CAACU,KAAK,CAAC,4BAA4B,CAAC;MAC3C;IACJ;EACJ,CAAC;EAED,OAAO;IACHnB,MAAM;IACNE,QAAQ;IACRwB,WAAW;IACXtB;EACJ,CAAC;AACL,CAAC;AAACL,EAAA,CA5DIF,YAAY;AA8DlB,eAAeA,YAAY,CAAC,CAAC;;AAE7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}