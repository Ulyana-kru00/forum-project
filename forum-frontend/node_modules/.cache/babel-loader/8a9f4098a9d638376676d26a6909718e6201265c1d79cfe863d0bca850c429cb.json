{"ast":null,"code":"var _jsxFileName = \"/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/Chat/Chat.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/components/Chat/Chat.jsx\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useChat = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [socket, setSocket] = useState(null);\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\n  const [error, setError] = useState(null);\n  const connectWebSocket = useCallback(token => {\n    const ws = new WebSocket(`ws://localhost:8080/ws?token=${encodeURIComponent(token)}`);\n    ws.onopen = () => {\n      setConnectionStatus('connected');\n      setError(null);\n    };\n    ws.onmessage = event => {\n      const message = JSON.parse(event.data);\n      setMessages(prev => [...prev, message]);\n    };\n    ws.onclose = event => {\n      setConnectionStatus('disconnected');\n      if (!event.wasClean) {\n        setError('Connection lost. Reconnecting...');\n        setTimeout(() => connectWebSocket(token), 3000);\n      }\n    };\n    ws.onerror = error => {\n      setError('WebSocket error: ' + error.message);\n      setConnectionStatus('error');\n    };\n    setSocket(ws);\n    return () => ws.close();\n  }, []);\n  const sendMessage = messageText => {\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      const message = {\n        Text: messageText,\n        CreatedAt: new Date().toISOString()\n      };\n      socket.send(JSON.stringify(message));\n    }\n  };\n  return {\n    messages,\n    sendMessage,\n    connectionStatus,\n    error,\n    connectWebSocket\n  };\n};\n_s(useChat, \"fCU3rdB/ofpWPmu7uDDAJNcFTXQ=\");\nconst Chat = () => {\n  _s2();\n  const [messageInput, setMessageInput] = useState('');\n  const [user, setUser] = useState(null);\n  const {\n    messages,\n    sendMessage,\n    connectionStatus,\n    error,\n    connectWebSocket\n  } = useChat();\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const userId = localStorage.getItem('userId');\n    const username = localStorage.getItem('username');\n    if (token && userId && username) {\n      setUser({\n        id: userId,\n        username\n      });\n      connectWebSocket(token);\n    }\n  }, [connectWebSocket]);\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (messageInput.trim() && user) {\n      sendMessage(messageInput);\n      setMessageInput('');\n    }\n  };\n  if (!user) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-warning\",\n        children: \"Please login to access the chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Forum Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `status ${connectionStatus}`,\n        children: connectionStatus.toUpperCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.UserID === user.id ? 'own' : 'other'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"username\",\n            children: msg.Username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"time\",\n            children: new Date(msg.CreatedAt).toLocaleTimeString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: msg.Text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"message-form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: messageInput,\n        onChange: e => setMessageInput(e.target.value),\n        placeholder: \"Type your message...\",\n        disabled: connectionStatus !== 'connected'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: connectionStatus !== 'connected' || !messageInput.trim(),\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s2(Chat, \"jejdEd6Hllb/ifYFZBWFpT/34eQ=\", false, function () {\n  return [useChat];\n});\n_c = Chat;\nexport default Chat;\n// import React, { useState, useEffect } from 'react';\n// import useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js';\n// import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css';\n\n// const Chat = () => {\n//     const [messageInput, setMessageInput] = useState('');\n//     const [userData, setUserData] = useState(null);\n//     const token = localStorage.getItem('token');\n//     const wsUrl = `ws://localhost:8082/ws`;\n\n//     const {\n//         messages,\n//         sendMessage,\n//         connectionStatus,\n//         error\n//     } = useWebSocket(wsUrl, token);\n\n//     // Загрузка данных пользователя при монтировании\n//     useEffect(() => {\n//         const userId = localStorage.getItem('userId');\n//         const username = localStorage.getItem('username');\n//         if (userId && username) {\n//             setUserData({ id: userId, username });\n//         }\n//     }, []);\n\n//     // Обработка ошибок\n//     useEffect(() => {\n//         if (error) {\n//             console.error('Chat error:', error);\n//         }\n//     }, [error]);\n\n//     const handleSubmit = (e) => {\n//         e.preventDefault();\n//         if (messageInput.trim() && userData) {\n//             sendMessage({\n//                 Text: messageInput,\n//                 UserID: userData.id,\n//                 Username: userData.username,\n//                 CreatedAt: new Date().toISOString()\n//             });\n//             setMessageInput('');\n//         }\n//     };\n\n//     if (!userData) {\n//         return (\n//             <div className=\"chat-container\">\n//                 <div className=\"auth-warning\">\n//                     Please login to access the chat\n//                 </div>\n//             </div>\n//         );\n//     }\n\n//     return (\n//         <div className=\"chat-container\">\n//             <div className=\"chat-header\">\n//                 <h2>Global Chat</h2>\n//                 <div className={`connection-status ${connectionStatus}`}>\n//                     Status: {connectionStatus.toUpperCase()}\n//                 </div>\n//             </div>\n\n//             <div className=\"messages-list\">\n//                 {messages.map((message, index) => (\n//                     <div key={index} className={`message ${message.UserID === userData.id ? 'own-message' : ''}`}>\n//                         <div className=\"message-header\">\n//                             <span className=\"username\">{message.Username}</span>\n//                             <span className=\"timestamp\">\n//                                 {new Date(message.CreatedAt).toLocaleTimeString()}\n//                             </span>\n//                         </div>\n//                         <div className=\"message-content\">\n//                             {message.Text}\n//                         </div>\n//                     </div>\n//                 ))}\n//             </div>\n\n//             <form className=\"message-form\" onSubmit={handleSubmit}>\n//                 <input\n//                     type=\"text\"\n//                     value={messageInput}\n//                     onChange={(e) => setMessageInput(e.target.value)}\n//                     placeholder=\"Type your message...\"\n//                     disabled={connectionStatus !== 'connected'}\n//                     aria-label=\"Type your message\"\n//                 />\n//                 <button\n//                     type=\"submit\"\n//                     disabled={!messageInput.trim() || connectionStatus !== 'connected'}\n//                     className=\"send-button\"\n//                 >\n//                     {connectionStatus === 'connected' ? 'Send' : 'Connecting...'}\n//                 </button>\n//             </form>\n\n//             {error && (\n//                 <div className=\"error-message\">\n//                     Error: {error}\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default Chat;\n// import React, { useState } from 'react';\n// import useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js';\n// import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css';\n\n// const Chat = () => {\n//     const [message, setMessage] = useState('');\n//     const userId = localStorage.getItem('userId');\n//     const token = localStorage.getItem('token'); // Ensure this is the JWT token\n//     const wsUrl = `ws://localhost:8082/ws`;\n\n//     const { \n//         messages, \n//         sendMessage, \n//         connectionStatus \n//     } = useWebSocket(wsUrl);\n\n//     if (!userId) {\n//         return <div>Please login to use chat</div>;\n//     }\n\n//     const handleSubmit = (e) => {\n//         e.preventDefault();\n//         if (message.trim()) {\n//             sendMessage({\n//                 content: message,\n//                 userId: userId,\n//                 timestamp: new Date().toISOString()\n//             });\n//             setMessage('');\n//         }\n//     };\n\n//     return (\n//         <div className=\"chat-container\">\n//             <div className=\"connection-status\">\n//                 Status: {connectionStatus}\n//             </div>\n//             <div className=\"messages\">\n//                 {messages.map((msg, index) => (\n//                     <div key={index} className=\"message\">\n//                         <span className=\"user\">{msg.userId}</span>\n//                         <span className=\"content\">{msg.content}</span>\n//                     </div>\n//                 ))}\n//             </div>\n//             <form onSubmit={handleSubmit}>\n//                 <input\n//                     type=\"text\"\n//                     value={message}\n//                     onChange={(e) => setMessage(e.target.value)}\n//                     placeholder=\"Type your message...\"\n//                     disabled={connectionStatus !== 'connected'}\n//                 />\n//                 <button \n//                     type=\"submit\"\n//                     disabled={connectionStatus !== 'connected'}\n//                 >\n//                     Send\n//                 </button>\n//             </form>\n//         </div>\n//     );\n// };\n// export default Chat;\n// // import React, { useState, useEffect, useCallback } from 'react';\n// // import axios from 'axios';\n// //  import useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js'; // путь поменяй если другой\n// //  import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css'; // путь к стилям\n\n// // const Chat = () => {\n// //   const [message, setMessage] = useState('');\n// //   const [login, setLogin] = useState('');\n// //   const [password, setPassword] = useState('');\n// //   const [errorMessage, setErrorMessage] = useState('');\n// //   const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n// //   const {\n// //     messages,\n// //     sendMessage,\n// //     connectionStatus,\n// //     connect,\n// //     disconnect,\n// //     error: wsError\n// //   } = useWebSocket('http://localhost:8082/ws', { manual: true });\n\n// //   // Проверка авторизации при монтировании\n// //   useEffect(() => {\n// //     const token = localStorage.getItem('token');\n// //     const userId = localStorage.getItem('userId');\n// //     const username = localStorage.getItem('username');\n\n// //     if (token && userId && username) {\n// //       setIsLoggedIn(true);\n// //     }\n// //   }, []);\n\n// //   // Управление подключением WebSocket\n// //   useEffect(() => {\n// //     if (isLoggedIn) {\n// //       connect();\n// //     }\n\n// //     return () => {\n// //       if (isLoggedIn) {\n// //         disconnect(true);\n// //       }\n// //     };\n// //   }, [isLoggedIn, connect, disconnect]);\n\n// //   // Механизм переподключения\n// //   useEffect(() => {\n// //     const reconnectInterval = setInterval(() => {\n// //       if (connectionStatus === 'disconnected' && isLoggedIn) {\n// //         connect();\n// //       }\n// //     }, 5000);\n\n// //     return () => clearInterval(reconnectInterval);\n// //   }, [connectionStatus, isLoggedIn, connect]);\n\n// //   const handleLogin = async (e) => {\n// //     e.preventDefault();\n// //     try {\n// //       const response = await axios.post('http://localhost:8080/login', {\n// //         login,\n// //         password,\n// //       });\n\n// //       const { token, userId, username } = response.data;\n\n// //       if (!token || !userId || !username) {\n// //         throw new Error('Invalid server response');\n// //       }\n\n// //       localStorage.setItem('token', token);\n// //       localStorage.setItem('userId', userId);\n// //       localStorage.setItem('username', username);\n\n// //       setIsLoggedIn(true);\n// //       setErrorMessage('');\n\n// //     } catch (error) {\n// //       console.error(\"Login error:\", error);\n// //       setErrorMessage(error.response?.data?.message || 'Login failed. Please try again.');\n// //       localStorage.clear();\n// //     }\n// //   };\n\n// //   const handleSendMessage = (e) => {\n// //     e.preventDefault();\n\n// //     const userId = localStorage.getItem('userId');\n// //     const username = localStorage.getItem('username');\n\n// //     if (!userId || !username) {\n// //       setErrorMessage('User session expired');\n// //       localStorage.clear();\n// //       setIsLoggedIn(false);\n// //       return;\n// //     }\n\n// //     if (!message.trim()) {\n// //       setErrorMessage('Cannot send empty message');\n// //       return;\n// //     }\n\n// //     sendMessage({\n// //       content: message.trim(),\n// //       userId: parseInt(userId, 10),\n// //       username,\n// //     });\n\n// //     setMessage('');\n// //     setErrorMessage('');\n// //   };\n\n// //   if (!isLoggedIn) {\n// //     return (\n// //       <div className=\"auth-container\">\n// //         <h2>Login to use Chat</h2>\n// //         <form onSubmit={handleLogin}>\n// //           <div className=\"form-group\">\n// //             <label>Login</label>\n// //             <input\n// //               type=\"text\"\n// //               value={login}\n// //               onChange={(e) => setLogin(e.target.value)}\n// //               required\n// //             />\n// //           </div>\n// //           <div className=\"form-group\">\n// //             <label>Password</label>\n// //             <input\n// //               type=\"password\"\n// //               value={password}\n// //               onChange={(e) => setPassword(e.target.value)}\n// //               required\n// //             />\n// //           </div>\n// //           <button type=\"submit\" className=\"btn-primary\">Login</button>\n// //           {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n// //         </form>\n// //       </div>\n// //     );\n// //   }\n\n// //   return (\n// //     <div className=\"chat-container\">\n// //       <div className=\"connection-status\">\n// //         Connection Status: {connectionStatus}\n// //         {wsError && <span className=\"error-indicator\"> • Error</span>}\n// //       </div>\n\n// //       {wsError && <p className=\"error-message\">{wsError}</p>}\n\n// //       <div className=\"messages-panel\">\n// //         {messages.map((msg, index) => (\n// //           <div key={index} className=\"message\">\n// //             <span className=\"message-username\">{msg.username}:</span>\n// //             <span className=\"message-content\">{msg.content}</span>\n// //             <span className=\"message-timestamp\">\n// //               {new Date(msg.timestamp).toLocaleTimeString()}\n// //             </span>\n// //           </div>\n// //         ))}\n// //       </div>\n\n// //       <form onSubmit={handleSendMessage} className=\"message-form\">\n// //         <input\n// //           type=\"text\"\n// //           value={message}\n// //           onChange={(e) => setMessage(e.target.value)}\n// //           placeholder=\"Type your message...\"\n// //           className=\"message-input\"\n// //         />\n// //         <button \n// //           type=\"submit\" \n// //           className=\"send-button\"\n// //           disabled={connectionStatus !== 'connected'}\n// //         >\n// //           Send\n// //         </button>\n// //       </form>\n// //     </div>\n// //   );\n// // };\n\n// // export default Chat;\n// // import React, { useState, useEffect } from 'react';\n// // import axios from 'axios';\n// // import useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js'; // путь поменяй если другой\n// // import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css'; // путь к стилям\n\n// // const Chat = () => {\n// //   const [message, setMessage] = useState('');\n// //   const [email, setEmail] = useState('');\n// //   const [password, setPassword] = useState('');\n// //   const [errorMessage, setErrorMessage] = useState('');\n// //   const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n// //   const [userId, setUserId] = useState(null);\n// //   const [username, setUsername] = useState(null);\n\n// //   const {\n// //     messages,\n// //     sendMessage,\n// //     connectionStatus,\n// //     connect, // добавляем ручное подключение\n// //     disconnect\n// //   } = useWebSocket('ws://localhost:8082/ws', { manual: true }); // manual mode!\n\n// //   useEffect(() => {\n// //     const storedUserId = localStorage.getItem('userId');\n// //     const storedUsername = localStorage.getItem('username');\n// //     if (storedUserId && storedUsername) {\n// //       setUserId(storedUserId);\n// //       setUsername(storedUsername);\n// //       setIsLoggedIn(true);\n// //       connect(); // подключаем WebSocket только если есть данные\n// //     }\n// //   }, [connect]);\n\n// //   const handleLogin = async (e) => {\n// //     e.preventDefault();\n\n// //     try {\n// //       const response = await axios.post('http://localhost:8080/login', {\n// //         email,\n// //         password,\n// //       });\n\n// //       if (response.status === 200) {\n// //         const { userId, username, token } = response.data;\n\n// //         if (!userId || !username || username === 'undefined') {\n// //           console.warn('Invalid user session, cannot connect');\n// //           setErrorMessage('Login failed: server did not provide user info.');\n// //           return;\n// //         }\n\n// //         localStorage.setItem('userId', userId);\n// //         localStorage.setItem('username', username);\n// //         localStorage.setItem('token', token);\n\n// //         setUserId(userId);\n// //         setUsername(username);\n// //         setIsLoggedIn(true);\n\n// //         connect(); // подключаем WebSocket после логина\n\n// //       }\n// //     } catch (error) {\n// //       console.error(error);\n// //       setErrorMessage('Login failed. Please check your credentials.');\n// //     }\n// //   };\n\n// //   const handleSubmit = (e) => {\n// //     e.preventDefault();\n\n// //     if (!message.trim() || !username) {\n// //       console.warn('Cannot send empty message or missing username');\n// //       return;\n// //     }\n\n// //     sendMessage({\n// //       user_id:  userId,\n// //       username: username,\n// //       content: message.trim(),\n// //     });\n\n// //     setMessage('');\n// //   };\n\n// //   if (!isLoggedIn) {\n// //     return (\n// //       <div>\n// //         <h2>Login to use Chat</h2>\n// //         <form onSubmit={handleLogin}>\n// //           <div>\n// //             <label>Email</label>\n// //             <input\n// //               type=\"email\"\n// //               value={email}\n// //               onChange={(e) => setEmail(e.target.value)}\n// //               required\n// //             />\n// //           </div>\n// //           <div>\n// //             <label>Password</label>\n// //             <input\n// //               type=\"password\"\n// //               value={password}\n// //               onChange={(e) => setPassword(e.target.value)}\n// //               required\n// //             />\n// //           </div>\n// //           <button type=\"submit\">Login</button>\n// //         </form>\n\n// //         {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}\n// //       </div>\n// //     );\n// //   }\n\n// //   return (\n// //     <div className=\"chat-container\">\n// //       <div className=\"connection-status\">\n// //         Status: {connectionStatus}\n// //       </div>\n\n// //       <div className=\"messages\">\n// //         {messages.map((msg, index) => (\n// //           <div key={index} className=\"message\">\n// //             <span className=\"user\">{msg.username}:</span>  \n// //             <span className=\"content\">{msg.content}</span>\n// //           </div>\n// //         ))}\n// //       </div>\n\n// //       <form onSubmit={handleSubmit} className=\"chat-form\">\n// //         <input\n// //           type=\"text\"\n// //           value={message}\n// //           onChange={(e) => setMessage(e.target.value)}\n// //           placeholder=\"Type your message...\"\n// //           disabled={connectionStatus !== 'connected'}\n// //           className=\"chat-input\"\n// //         />\n// //         <button\n// //           type=\"submit\"\n// //           disabled={connectionStatus !== 'connected' || !message.trim()}\n// //           className=\"chat-send-button\"\n// //         >\n// //           Send\n// //         </button>\n// //       </form>\n// //     </div>\n// //   );\n// // };\n\n// // export default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","jsxDEV","_jsxDEV","useChat","_s","messages","setMessages","socket","setSocket","connectionStatus","setConnectionStatus","error","setError","connectWebSocket","token","ws","WebSocket","encodeURIComponent","onopen","onmessage","event","message","JSON","parse","data","prev","onclose","wasClean","setTimeout","onerror","close","sendMessage","messageText","readyState","OPEN","Text","CreatedAt","Date","toISOString","send","stringify","Chat","_s2","messageInput","setMessageInput","user","setUser","localStorage","getItem","userId","username","id","handleSubmit","e","preventDefault","trim","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toUpperCase","map","msg","index","UserID","Username","toLocaleTimeString","onSubmit","type","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/Chat/Chat.js"],"sourcesContent":["// src/components/Chat/Chat.jsx\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './Chat.css';\n\nconst useChat = () => {\n  const [messages, setMessages] = useState([]);\n  const [socket, setSocket] = useState(null);\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\n  const [error, setError] = useState(null);\n\n  const connectWebSocket = useCallback((token) => {\n    const ws = new WebSocket(`ws://localhost:8080/ws?token=${encodeURIComponent(token)}`);\n\n    ws.onopen = () => {\n      setConnectionStatus('connected');\n      setError(null);\n    };\n\n    ws.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      setMessages(prev => [...prev, message]);\n    };\n\n    ws.onclose = (event) => {\n      setConnectionStatus('disconnected');\n      if (!event.wasClean) {\n        setError('Connection lost. Reconnecting...');\n        setTimeout(() => connectWebSocket(token), 3000);\n      }\n    };\n\n    ws.onerror = (error) => {\n      setError('WebSocket error: ' + error.message);\n      setConnectionStatus('error');\n    };\n\n    setSocket(ws);\n    return () => ws.close();\n  }, []);\n\n  const sendMessage = (messageText) => {\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      const message = {\n        Text: messageText,\n        CreatedAt: new Date().toISOString()\n      };\n      socket.send(JSON.stringify(message));\n    }\n  };\n\n  return { messages, sendMessage, connectionStatus, error, connectWebSocket };\n};\n\nconst Chat = () => {\n  const [messageInput, setMessageInput] = useState('');\n  const [user, setUser] = useState(null);\n  const { messages, sendMessage, connectionStatus, error, connectWebSocket } = useChat();\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const userId = localStorage.getItem('userId');\n    const username = localStorage.getItem('username');\n\n    if (token && userId && username) {\n      setUser({ id: userId, username });\n      connectWebSocket(token);\n    }\n  }, [connectWebSocket]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (messageInput.trim() && user) {\n      sendMessage(messageInput);\n      setMessageInput('');\n    }\n  };\n\n  if (!user) {\n    return (\n      <div className=\"chat-container\">\n        <div className=\"auth-warning\">\n          Please login to access the chat\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"header\">\n        <h2>Forum Chat</h2>\n        <div className={`status ${connectionStatus}`}>\n          {connectionStatus.toUpperCase()}\n        </div>\n      </div>\n\n      {error && <div className=\"error\">{error}</div>}\n\n      <div className=\"messages\">\n        {messages.map((msg, index) => (\n          <div \n            key={index}\n            className={`message ${msg.UserID === user.id ? 'own' : 'other'}`}\n          >\n            <div className=\"message-header\">\n              <span className=\"username\">{msg.Username}</span>\n              <span className=\"time\">\n                {new Date(msg.CreatedAt).toLocaleTimeString()}\n              </span>\n            </div>\n            <div className=\"content\">{msg.Text}</div>\n          </div>\n        ))}\n      </div>\n\n      <form className=\"message-form\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={messageInput}\n          onChange={(e) => setMessageInput(e.target.value)}\n          placeholder=\"Type your message...\"\n          disabled={connectionStatus !== 'connected'}\n        />\n        <button \n          type=\"submit\"\n          disabled={connectionStatus !== 'connected' || !messageInput.trim()}\n        >\n          Send\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default Chat;\n// import React, { useState, useEffect } from 'react';\n// import useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js';\n// import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css';\n\n// const Chat = () => {\n//     const [messageInput, setMessageInput] = useState('');\n//     const [userData, setUserData] = useState(null);\n//     const token = localStorage.getItem('token');\n//     const wsUrl = `ws://localhost:8082/ws`;\n\n//     const {\n//         messages,\n//         sendMessage,\n//         connectionStatus,\n//         error\n//     } = useWebSocket(wsUrl, token);\n\n//     // Загрузка данных пользователя при монтировании\n//     useEffect(() => {\n//         const userId = localStorage.getItem('userId');\n//         const username = localStorage.getItem('username');\n//         if (userId && username) {\n//             setUserData({ id: userId, username });\n//         }\n//     }, []);\n\n//     // Обработка ошибок\n//     useEffect(() => {\n//         if (error) {\n//             console.error('Chat error:', error);\n//         }\n//     }, [error]);\n\n//     const handleSubmit = (e) => {\n//         e.preventDefault();\n//         if (messageInput.trim() && userData) {\n//             sendMessage({\n//                 Text: messageInput,\n//                 UserID: userData.id,\n//                 Username: userData.username,\n//                 CreatedAt: new Date().toISOString()\n//             });\n//             setMessageInput('');\n//         }\n//     };\n\n//     if (!userData) {\n//         return (\n//             <div className=\"chat-container\">\n//                 <div className=\"auth-warning\">\n//                     Please login to access the chat\n//                 </div>\n//             </div>\n//         );\n//     }\n\n//     return (\n//         <div className=\"chat-container\">\n//             <div className=\"chat-header\">\n//                 <h2>Global Chat</h2>\n//                 <div className={`connection-status ${connectionStatus}`}>\n//                     Status: {connectionStatus.toUpperCase()}\n//                 </div>\n//             </div>\n\n//             <div className=\"messages-list\">\n//                 {messages.map((message, index) => (\n//                     <div key={index} className={`message ${message.UserID === userData.id ? 'own-message' : ''}`}>\n//                         <div className=\"message-header\">\n//                             <span className=\"username\">{message.Username}</span>\n//                             <span className=\"timestamp\">\n//                                 {new Date(message.CreatedAt).toLocaleTimeString()}\n//                             </span>\n//                         </div>\n//                         <div className=\"message-content\">\n//                             {message.Text}\n//                         </div>\n//                     </div>\n//                 ))}\n//             </div>\n\n//             <form className=\"message-form\" onSubmit={handleSubmit}>\n//                 <input\n//                     type=\"text\"\n//                     value={messageInput}\n//                     onChange={(e) => setMessageInput(e.target.value)}\n//                     placeholder=\"Type your message...\"\n//                     disabled={connectionStatus !== 'connected'}\n//                     aria-label=\"Type your message\"\n//                 />\n//                 <button\n//                     type=\"submit\"\n//                     disabled={!messageInput.trim() || connectionStatus !== 'connected'}\n//                     className=\"send-button\"\n//                 >\n//                     {connectionStatus === 'connected' ? 'Send' : 'Connecting...'}\n//                 </button>\n//             </form>\n\n//             {error && (\n//                 <div className=\"error-message\">\n//                     Error: {error}\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default Chat;\n// import React, { useState } from 'react';\n// import useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js';\n// import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css';\n\n// const Chat = () => {\n//     const [message, setMessage] = useState('');\n//     const userId = localStorage.getItem('userId');\n//     const token = localStorage.getItem('token'); // Ensure this is the JWT token\n//     const wsUrl = `ws://localhost:8082/ws`;\n    \n//     const { \n//         messages, \n//         sendMessage, \n//         connectionStatus \n//     } = useWebSocket(wsUrl);\n\n//     if (!userId) {\n//         return <div>Please login to use chat</div>;\n//     }\n\n//     const handleSubmit = (e) => {\n//         e.preventDefault();\n//         if (message.trim()) {\n//             sendMessage({\n//                 content: message,\n//                 userId: userId,\n//                 timestamp: new Date().toISOString()\n//             });\n//             setMessage('');\n//         }\n//     };\n\n//     return (\n//         <div className=\"chat-container\">\n//             <div className=\"connection-status\">\n//                 Status: {connectionStatus}\n//             </div>\n//             <div className=\"messages\">\n//                 {messages.map((msg, index) => (\n//                     <div key={index} className=\"message\">\n//                         <span className=\"user\">{msg.userId}</span>\n//                         <span className=\"content\">{msg.content}</span>\n//                     </div>\n//                 ))}\n//             </div>\n//             <form onSubmit={handleSubmit}>\n//                 <input\n//                     type=\"text\"\n//                     value={message}\n//                     onChange={(e) => setMessage(e.target.value)}\n//                     placeholder=\"Type your message...\"\n//                     disabled={connectionStatus !== 'connected'}\n//                 />\n//                 <button \n//                     type=\"submit\"\n//                     disabled={connectionStatus !== 'connected'}\n//                 >\n//                     Send\n//                 </button>\n//             </form>\n//         </div>\n//     );\n// };\n// export default Chat;\n// // import React, { useState, useEffect, useCallback } from 'react';\n// // import axios from 'axios';\n// //  import useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js'; // путь поменяй если другой\n// //  import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css'; // путь к стилям\n\n// // const Chat = () => {\n// //   const [message, setMessage] = useState('');\n// //   const [login, setLogin] = useState('');\n// //   const [password, setPassword] = useState('');\n// //   const [errorMessage, setErrorMessage] = useState('');\n// //   const [isLoggedIn, setIsLoggedIn] = useState(false);\n  \n// //   const {\n// //     messages,\n// //     sendMessage,\n// //     connectionStatus,\n// //     connect,\n// //     disconnect,\n// //     error: wsError\n// //   } = useWebSocket('http://localhost:8082/ws', { manual: true });\n\n// //   // Проверка авторизации при монтировании\n// //   useEffect(() => {\n// //     const token = localStorage.getItem('token');\n// //     const userId = localStorage.getItem('userId');\n// //     const username = localStorage.getItem('username');\n    \n// //     if (token && userId && username) {\n// //       setIsLoggedIn(true);\n// //     }\n// //   }, []);\n\n// //   // Управление подключением WebSocket\n// //   useEffect(() => {\n// //     if (isLoggedIn) {\n// //       connect();\n// //     }\n    \n// //     return () => {\n// //       if (isLoggedIn) {\n// //         disconnect(true);\n// //       }\n// //     };\n// //   }, [isLoggedIn, connect, disconnect]);\n\n// //   // Механизм переподключения\n// //   useEffect(() => {\n// //     const reconnectInterval = setInterval(() => {\n// //       if (connectionStatus === 'disconnected' && isLoggedIn) {\n// //         connect();\n// //       }\n// //     }, 5000);\n\n// //     return () => clearInterval(reconnectInterval);\n// //   }, [connectionStatus, isLoggedIn, connect]);\n\n// //   const handleLogin = async (e) => {\n// //     e.preventDefault();\n// //     try {\n// //       const response = await axios.post('http://localhost:8080/login', {\n// //         login,\n// //         password,\n// //       });\n\n// //       const { token, userId, username } = response.data;\n      \n// //       if (!token || !userId || !username) {\n// //         throw new Error('Invalid server response');\n// //       }\n\n// //       localStorage.setItem('token', token);\n// //       localStorage.setItem('userId', userId);\n// //       localStorage.setItem('username', username);\n      \n// //       setIsLoggedIn(true);\n// //       setErrorMessage('');\n\n// //     } catch (error) {\n// //       console.error(\"Login error:\", error);\n// //       setErrorMessage(error.response?.data?.message || 'Login failed. Please try again.');\n// //       localStorage.clear();\n// //     }\n// //   };\n\n// //   const handleSendMessage = (e) => {\n// //     e.preventDefault();\n    \n// //     const userId = localStorage.getItem('userId');\n// //     const username = localStorage.getItem('username');\n    \n// //     if (!userId || !username) {\n// //       setErrorMessage('User session expired');\n// //       localStorage.clear();\n// //       setIsLoggedIn(false);\n// //       return;\n// //     }\n\n// //     if (!message.trim()) {\n// //       setErrorMessage('Cannot send empty message');\n// //       return;\n// //     }\n\n// //     sendMessage({\n// //       content: message.trim(),\n// //       userId: parseInt(userId, 10),\n// //       username,\n// //     });\n\n// //     setMessage('');\n// //     setErrorMessage('');\n// //   };\n\n// //   if (!isLoggedIn) {\n// //     return (\n// //       <div className=\"auth-container\">\n// //         <h2>Login to use Chat</h2>\n// //         <form onSubmit={handleLogin}>\n// //           <div className=\"form-group\">\n// //             <label>Login</label>\n// //             <input\n// //               type=\"text\"\n// //               value={login}\n// //               onChange={(e) => setLogin(e.target.value)}\n// //               required\n// //             />\n// //           </div>\n// //           <div className=\"form-group\">\n// //             <label>Password</label>\n// //             <input\n// //               type=\"password\"\n// //               value={password}\n// //               onChange={(e) => setPassword(e.target.value)}\n// //               required\n// //             />\n// //           </div>\n// //           <button type=\"submit\" className=\"btn-primary\">Login</button>\n// //           {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n// //         </form>\n// //       </div>\n// //     );\n// //   }\n\n// //   return (\n// //     <div className=\"chat-container\">\n// //       <div className=\"connection-status\">\n// //         Connection Status: {connectionStatus}\n// //         {wsError && <span className=\"error-indicator\"> • Error</span>}\n// //       </div>\n      \n// //       {wsError && <p className=\"error-message\">{wsError}</p>}\n\n// //       <div className=\"messages-panel\">\n// //         {messages.map((msg, index) => (\n// //           <div key={index} className=\"message\">\n// //             <span className=\"message-username\">{msg.username}:</span>\n// //             <span className=\"message-content\">{msg.content}</span>\n// //             <span className=\"message-timestamp\">\n// //               {new Date(msg.timestamp).toLocaleTimeString()}\n// //             </span>\n// //           </div>\n// //         ))}\n// //       </div>\n\n// //       <form onSubmit={handleSendMessage} className=\"message-form\">\n// //         <input\n// //           type=\"text\"\n// //           value={message}\n// //           onChange={(e) => setMessage(e.target.value)}\n// //           placeholder=\"Type your message...\"\n// //           className=\"message-input\"\n// //         />\n// //         <button \n// //           type=\"submit\" \n// //           className=\"send-button\"\n// //           disabled={connectionStatus !== 'connected'}\n// //         >\n// //           Send\n// //         </button>\n// //       </form>\n// //     </div>\n// //   );\n// // };\n\n// // export default Chat;\n// // import React, { useState, useEffect } from 'react';\n// // import axios from 'axios';\n// // import useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js'; // путь поменяй если другой\n// // import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css'; // путь к стилям\n\n// // const Chat = () => {\n// //   const [message, setMessage] = useState('');\n// //   const [email, setEmail] = useState('');\n// //   const [password, setPassword] = useState('');\n// //   const [errorMessage, setErrorMessage] = useState('');\n// //   const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n// //   const [userId, setUserId] = useState(null);\n// //   const [username, setUsername] = useState(null);\n\n// //   const {\n// //     messages,\n// //     sendMessage,\n// //     connectionStatus,\n// //     connect, // добавляем ручное подключение\n// //     disconnect\n// //   } = useWebSocket('ws://localhost:8082/ws', { manual: true }); // manual mode!\n\n// //   useEffect(() => {\n// //     const storedUserId = localStorage.getItem('userId');\n// //     const storedUsername = localStorage.getItem('username');\n// //     if (storedUserId && storedUsername) {\n// //       setUserId(storedUserId);\n// //       setUsername(storedUsername);\n// //       setIsLoggedIn(true);\n// //       connect(); // подключаем WebSocket только если есть данные\n// //     }\n// //   }, [connect]);\n\n// //   const handleLogin = async (e) => {\n// //     e.preventDefault();\n\n// //     try {\n// //       const response = await axios.post('http://localhost:8080/login', {\n// //         email,\n// //         password,\n// //       });\n\n// //       if (response.status === 200) {\n// //         const { userId, username, token } = response.data;\n\n// //         if (!userId || !username || username === 'undefined') {\n// //           console.warn('Invalid user session, cannot connect');\n// //           setErrorMessage('Login failed: server did not provide user info.');\n// //           return;\n// //         }\n\n// //         localStorage.setItem('userId', userId);\n// //         localStorage.setItem('username', username);\n// //         localStorage.setItem('token', token);\n\n// //         setUserId(userId);\n// //         setUsername(username);\n// //         setIsLoggedIn(true);\n\n// //         connect(); // подключаем WebSocket после логина\n\n// //       }\n// //     } catch (error) {\n// //       console.error(error);\n// //       setErrorMessage('Login failed. Please check your credentials.');\n// //     }\n// //   };\n\n// //   const handleSubmit = (e) => {\n// //     e.preventDefault();\n\n// //     if (!message.trim() || !username) {\n// //       console.warn('Cannot send empty message or missing username');\n// //       return;\n// //     }\n\n// //     sendMessage({\n// //       user_id:  userId,\n// //       username: username,\n// //       content: message.trim(),\n// //     });\n\n// //     setMessage('');\n// //   };\n\n// //   if (!isLoggedIn) {\n// //     return (\n// //       <div>\n// //         <h2>Login to use Chat</h2>\n// //         <form onSubmit={handleLogin}>\n// //           <div>\n// //             <label>Email</label>\n// //             <input\n// //               type=\"email\"\n// //               value={email}\n// //               onChange={(e) => setEmail(e.target.value)}\n// //               required\n// //             />\n// //           </div>\n// //           <div>\n// //             <label>Password</label>\n// //             <input\n// //               type=\"password\"\n// //               value={password}\n// //               onChange={(e) => setPassword(e.target.value)}\n// //               required\n// //             />\n// //           </div>\n// //           <button type=\"submit\">Login</button>\n// //         </form>\n\n// //         {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}\n// //       </div>\n// //     );\n// //   }\n\n// //   return (\n// //     <div className=\"chat-container\">\n// //       <div className=\"connection-status\">\n// //         Status: {connectionStatus}\n// //       </div>\n\n// //       <div className=\"messages\">\n// //         {messages.map((msg, index) => (\n// //           <div key={index} className=\"message\">\n// //             <span className=\"user\">{msg.username}:</span>  \n// //             <span className=\"content\">{msg.content}</span>\n// //           </div>\n// //         ))}\n// //       </div>\n\n// //       <form onSubmit={handleSubmit} className=\"chat-form\">\n// //         <input\n// //           type=\"text\"\n// //           value={message}\n// //           onChange={(e) => setMessage(e.target.value)}\n// //           placeholder=\"Type your message...\"\n// //           disabled={connectionStatus !== 'connected'}\n// //           className=\"chat-input\"\n// //         />\n// //         <button\n// //           type=\"submit\"\n// //           disabled={connectionStatus !== 'connected' || !message.trim()}\n// //           className=\"chat-send-button\"\n// //         >\n// //           Send\n// //         </button>\n// //       </form>\n// //     </div>\n// //   );\n// // };\n\n// // export default Chat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}