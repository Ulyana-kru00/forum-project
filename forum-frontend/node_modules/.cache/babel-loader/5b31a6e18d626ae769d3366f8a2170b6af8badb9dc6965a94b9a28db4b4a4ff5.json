{"ast":null,"code":"var _jsxFileName = \"/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/Posts/Comment.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Comments = ({\n  postId\n}) => {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [submitting, setSubmitting] = useState(false);\n  const token = localStorage.getItem('token');\n  const isAuthenticated = !!token;\n  const userData = localStorage.getItem('user');\n  const currentUser = userData ? JSON.parse(userData) : null;\n  const navigate = useNavigate();\n  const fetchComments = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const config = isAuthenticated ? {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      } : {};\n      const response = await axios.get(`http://localhost:8081/api/v1/posts/${postId}/comments`, config);\n\n      // Обработка разных форматов ответа\n      const rawData = response.data;\n      let commentsArray = [];\n      if (Array.isArray(rawData)) {\n        commentsArray = rawData;\n      } else if (rawData && Array.isArray(rawData.data)) {\n        commentsArray = rawData.data;\n      } else if (rawData && Array.isArray(rawData.comments)) {\n        commentsArray = rawData.comments;\n      }\n      const processedComments = commentsArray.map(comment => ({\n        id: comment.id ? parseInt(comment.id, 10) : Date.now(),\n        author_id: comment.author_id ? parseInt(comment.author_id, 10) : 0,\n        post_id: comment.post_id ? parseInt(comment.post_id, 10) : 0,\n        content: comment.content || '',\n        author_name: comment.author_name || `User #${comment.author_id || 'unknown'}`,\n        created_at: comment.created_at || new Date().toISOString()\n      }));\n      setComments(processedComments);\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || err.message || 'Failed to load comments');\n    } finally {\n      setLoading(false);\n    }\n  }, [postId, token, isAuthenticated]);\n  const handleSubmitComment = async e => {\n    e.preventDefault();\n    if (!isAuthenticated || !currentUser) {\n      navigate('/login');\n      return;\n    }\n    if (!newComment.trim() || submitting) return;\n    try {\n      setSubmitting(true);\n      setError(null);\n      const response = await axios.post(`http://localhost:8081/api/v1/posts/${postId}/comments`, {\n        content: newComment,\n        author_id: currentUser.id\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // Добавление нового комментария с полными данными\n      const newCommentWithAuthor = {\n        id: response.data.id || Date.now(),\n        author_id: currentUser.id,\n        post_id: postId,\n        content: newComment,\n        author_name: currentUser.username || `User #${currentUser.id}`,\n        created_at: response.data.created_at || new Date().toISOString()\n      };\n      setComments(prev => [newCommentWithAuthor, ...prev]);\n      setNewComment('');\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.error) || err.message || 'Failed to post comment');\n    } finally {\n      setSubmitting(false);\n    }\n  };\n  useEffect(() => {\n    if (postId) {\n      fetchComments();\n    }\n  }, [postId, fetchComments]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"Comments (\", comments.length, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this), isAuthenticated && currentUser ? /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmitComment,\n      className: \"comment-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: newComment,\n        onChange: e => setNewComment(e.target.value),\n        placeholder: \"Write a comment...\",\n        rows: \"3\",\n        disabled: submitting,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"submit-comment-btn\",\n        disabled: submitting || !newComment.trim(),\n        children: submitting ? 'Posting...' : 'Post Comment'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auth-prompt\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Please \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/login\",\n          children: \"login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 31\n        }, this), \" to post comments\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-indicator\",\n      children: \"Loading comments...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 25\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments-list\",\n      children: comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"comment-author\",\n            children: comment.author_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"comment-timestamp\",\n            children: new Date(comment.created_at).toLocaleDateString('en-US', {\n              hour: '2-digit',\n              minute: '2-digit',\n              day: 'numeric',\n              month: 'short',\n              year: 'numeric'\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment-content\",\n          children: (comment.content || '').split('\\n').map((line, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n            children: line\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 25\n        }, this)]\n      }, comment.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 9\n  }, this);\n};\n_s(Comments, \"8Pa5feuxSR6tIJtwAlyc10GSDSE=\", false, function () {\n  return [useNavigate];\n});\n_c = Comments;\nexport default Comments;\n// import React, { useState, useEffect, useCallback } from 'react';\n// import axios from 'axios';\n// import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css';\n\n// const Comments = ({ postId }) => {\n//     const [comments, setComments] = useState([]);\n//     const [newComment, setNewComment] = useState('');\n//     const [loading, setLoading] = useState(false);\n//     const [error, setError] = useState(null);\n//     const [submitting, setSubmitting] = useState(false);\n\n//     const token = localStorage.getItem('token');\n//     const currentUser = JSON.parse(localStorage.getItem('user')) || {};\n\n//     const fetchComments = useCallback(async () => {\n//         try {\n//             setLoading(true);\n//             setError(null);\n\n//             const response = await axios.get(\n//                 `http://localhost:8081/api/v1/posts/${postId}/comments`,\n//                 {\n//                     headers: { \n//                         'Authorization': `Bearer ${token}`\n//                     }\n//                 }\n//             );\n\n//             // Обработка разных форматов ответа\n//             const rawData = response.data;\n//             let commentsArray = [];\n\n//             if (Array.isArray(rawData)) {\n//                 commentsArray = rawData;\n//             } else if (rawData && Array.isArray(rawData.data)) {\n//                 commentsArray = rawData.data;\n//             } else if (rawData && Array.isArray(rawData.comments)) {\n//                 commentsArray = rawData.comments;\n//             }\n\n//             const processedComments = commentsArray.map(comment => ({\n//                 id: parseInt(comment.id, 10),\n//                 author_id: parseInt(comment.author_id, 10),\n//                 post_id: parseInt(comment.post_id, 10),\n//                 content: comment.content || '',\n//                 author_name: comment.author_name || `User #${comment.author_id}`,\n//                 created_at: comment.created_at || new Date().toISOString()\n//             }));\n\n//             setComments(processedComments);\n//         } catch (err) {\n//             setError(err.response?.data?.error || err.message);\n//         } finally {\n//             setLoading(false);\n//         }\n//     }, [postId, token]);\n\n//     const handleSubmitComment = async (e) => {\n//         e.preventDefault();\n//         if (!newComment.trim() || submitting) return;\n\n//         try {\n//             setSubmitting(true);\n//             const response = await axios.post(\n//                 `http://localhost:8081/api/v1/posts/${postId}/comments`,\n//                 { \n//                     content: newComment,\n//                     author_id: currentUser.id\n//                 },\n//                 { \n//                     headers: { \n//                         Authorization: `Bearer ${token}`,\n//                         'Content-Type': 'application/json' \n//                     }\n//                 }\n//             );\n\n//             // Добавление нового комментария с полными данными\n//             const newCommentWithAuthor = {\n//                 ...response.data,\n//                 author_name: currentUser.username || `User #${currentUser.id}`,\n//                 created_at: new Date().toISOString(),\n//                 content: newComment,\n//                 author_id: currentUser.id,\n//                 post_id: postId\n//             };\n\n//             setComments(prev => [newCommentWithAuthor, ...prev]);\n//             setNewComment('');\n//         } catch (err) {\n//             setError(err.response?.data?.error || err.message);\n//         } finally {\n//             setSubmitting(false);\n//         }\n//     };\n\n//     useEffect(() => {\n//         fetchComments();\n//     }, [fetchComments]);\n\n//     return (\n//         <div className=\"comments-section\">\n//             <h4>Comments ({comments.length})</h4>\n\n//             <form onSubmit={handleSubmitComment} className=\"comment-form\">\n//                 <textarea\n//                     value={newComment}\n//                     onChange={(e) => setNewComment(e.target.value)}\n//                     placeholder=\"Write a comment...\"\n//                     rows=\"3\"\n//                     disabled={submitting}\n//                 />\n//                 <button \n//                     type=\"submit\" \n//                     className=\"submit-comment-btn\"\n//                     disabled={submitting || !newComment.trim()}\n//                 >\n//                     {submitting ? 'Posting...' : 'Post Comment'}\n//                 </button>\n//             </form>\n\n//             {loading && <div className=\"loading-indicator\">Loading comments...</div>}\n//             {error && <div className=\"error-message\">Error: {error}</div>}\n\n//             <div className=\"comments-list\">\n//                 {comments.map(comment => (\n//                     <div key={comment.id} className=\"comment-item\">\n//                         <div className=\"comment-header\">\n//                             <span className=\"comment-author\">\n//                                 {comment.author_name}\n//                             </span>\n//                             <span className=\"comment-timestamp\">\n//                                 {new Date(comment.created_at).toLocaleDateString('en-US', {\n//                                     hour: '2-digit',\n//                                     minute: '2-digit',\n//                                     day: 'numeric',\n//                                     month: 'short',\n//                                     year: 'numeric'\n//                                 })}\n//                             </span>\n//                         </div>\n//                         <div className=\"comment-content\">\n//                             {(comment.content || '').split('\\n').map((line, index) => (\n//                                 <p key={index}>{line}</p>\n//                             ))}\n//                         </div>\n//                     </div>\n//                 ))}\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Comments;\nvar _c;\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","axios","useNavigate","jsxDEV","_jsxDEV","Comments","postId","_s","comments","setComments","newComment","setNewComment","loading","setLoading","error","setError","submitting","setSubmitting","token","localStorage","getItem","isAuthenticated","userData","currentUser","JSON","parse","navigate","fetchComments","config","headers","response","get","rawData","data","commentsArray","Array","isArray","processedComments","map","comment","id","parseInt","Date","now","author_id","post_id","content","author_name","created_at","toISOString","err","_err$response","_err$response$data","message","handleSubmitComment","e","preventDefault","trim","post","Authorization","newCommentWithAuthor","username","prev","_err$response2","_err$response2$data","className","children","length","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","value","onChange","target","placeholder","rows","disabled","required","type","href","toLocaleDateString","hour","minute","day","month","year","split","line","index","_c","$RefreshReg$"],"sources":["/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/Posts/Comment.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css';\n\nconst Comments = ({ postId }) => {\n    const [comments, setComments] = useState([]);\n    const [newComment, setNewComment] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [submitting, setSubmitting] = useState(false);\n    \n    const token = localStorage.getItem('token');\n    const isAuthenticated = !!token;\n    const userData = localStorage.getItem('user');\n    const currentUser = userData ? JSON.parse(userData) : null;\n    const navigate = useNavigate();\n\n    const fetchComments = useCallback(async () => {\n        try {\n            setLoading(true);\n            setError(null);\n\n            const config = isAuthenticated ? {\n                headers: { \n                    'Authorization': `Bearer ${token}`\n                }\n            } : {};\n\n            const response = await axios.get(\n                `http://localhost:8081/api/v1/posts/${postId}/comments`,\n                config\n            );\n\n            // Обработка разных форматов ответа\n            const rawData = response.data;\n            let commentsArray = [];\n            \n            if (Array.isArray(rawData)) {\n                commentsArray = rawData;\n            } else if (rawData && Array.isArray(rawData.data)) {\n                commentsArray = rawData.data;\n            } else if (rawData && Array.isArray(rawData.comments)) {\n                commentsArray = rawData.comments;\n            }\n\n            const processedComments = commentsArray.map(comment => ({\n                id: comment.id ? parseInt(comment.id, 10) : Date.now(),\n                author_id: comment.author_id ? parseInt(comment.author_id, 10) : 0,\n                post_id: comment.post_id ? parseInt(comment.post_id, 10) : 0,\n                content: comment.content || '',\n                author_name: comment.author_name || `User #${comment.author_id || 'unknown'}`,\n                created_at: comment.created_at || new Date().toISOString()\n            }));\n\n            setComments(processedComments);\n        } catch (err) {\n            setError(err.response?.data?.error || err.message || 'Failed to load comments');\n        } finally {\n            setLoading(false);\n        }\n    }, [postId, token, isAuthenticated]);\n\n    const handleSubmitComment = async (e) => {\n        e.preventDefault();\n        \n        if (!isAuthenticated || !currentUser) {\n            navigate('/login');\n            return;\n        }\n\n        if (!newComment.trim() || submitting) return;\n\n        try {\n            setSubmitting(true);\n            setError(null);\n            \n            const response = await axios.post(\n                `http://localhost:8081/api/v1/posts/${postId}/comments`,\n                { \n                    content: newComment,\n                    author_id: currentUser.id\n                },\n                { \n                    headers: { \n                        Authorization: `Bearer ${token}`,\n                        'Content-Type': 'application/json' \n                    }\n                }\n            );\n\n            // Добавление нового комментария с полными данными\n            const newCommentWithAuthor = {\n                id: response.data.id || Date.now(),\n                author_id: currentUser.id,\n                post_id: postId,\n                content: newComment,\n                author_name: currentUser.username || `User #${currentUser.id}`,\n                created_at: response.data.created_at || new Date().toISOString()\n            };\n\n            setComments(prev => [newCommentWithAuthor, ...prev]);\n            setNewComment('');\n        } catch (err) {\n            setError(err.response?.data?.error || err.message || 'Failed to post comment');\n        } finally {\n            setSubmitting(false);\n        }\n    };\n\n    useEffect(() => {\n        if (postId) {\n            fetchComments();\n        }\n    }, [postId, fetchComments]);\n\n    return (\n        <div className=\"comments-section\">\n            <h4>Comments ({comments.length})</h4>\n            \n            {isAuthenticated && currentUser ? (\n                <form onSubmit={handleSubmitComment} className=\"comment-form\">\n                    <textarea\n                        value={newComment}\n                        onChange={(e) => setNewComment(e.target.value)}\n                        placeholder=\"Write a comment...\"\n                        rows=\"3\"\n                        disabled={submitting}\n                        required\n                    />\n                    <button \n                        type=\"submit\" \n                        className=\"submit-comment-btn\"\n                        disabled={submitting || !newComment.trim()}\n                    >\n                        {submitting ? 'Posting...' : 'Post Comment'}\n                    </button>\n                </form>\n            ) : (\n                <div className=\"auth-prompt\">\n                    <p>Please <a href=\"/login\">login</a> to post comments</p>\n                </div>\n            )}\n\n            {loading && <div className=\"loading-indicator\">Loading comments...</div>}\n            {error && <div className=\"error-message\">Error: {error}</div>}\n\n            <div className=\"comments-list\">\n                {comments.map(comment => (\n                    <div key={comment.id} className=\"comment-item\">\n                        <div className=\"comment-header\">\n                            <span className=\"comment-author\">\n                                {comment.author_name}\n                            </span>\n                            <span className=\"comment-timestamp\">\n                                {new Date(comment.created_at).toLocaleDateString('en-US', {\n                                    hour: '2-digit',\n                                    minute: '2-digit',\n                                    day: 'numeric',\n                                    month: 'short',\n                                    year: 'numeric'\n                                })}\n                            </span>\n                        </div>\n                        <div className=\"comment-content\">\n                            {(comment.content || '').split('\\n').map((line, index) => (\n                                <p key={index}>{line}</p>\n                            ))}\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default Comments;\n// import React, { useState, useEffect, useCallback } from 'react';\n// import axios from 'axios';\n// import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css';\n\n// const Comments = ({ postId }) => {\n//     const [comments, setComments] = useState([]);\n//     const [newComment, setNewComment] = useState('');\n//     const [loading, setLoading] = useState(false);\n//     const [error, setError] = useState(null);\n//     const [submitting, setSubmitting] = useState(false);\n    \n//     const token = localStorage.getItem('token');\n//     const currentUser = JSON.parse(localStorage.getItem('user')) || {};\n\n//     const fetchComments = useCallback(async () => {\n//         try {\n//             setLoading(true);\n//             setError(null);\n\n//             const response = await axios.get(\n//                 `http://localhost:8081/api/v1/posts/${postId}/comments`,\n//                 {\n//                     headers: { \n//                         'Authorization': `Bearer ${token}`\n//                     }\n//                 }\n//             );\n\n//             // Обработка разных форматов ответа\n//             const rawData = response.data;\n//             let commentsArray = [];\n            \n//             if (Array.isArray(rawData)) {\n//                 commentsArray = rawData;\n//             } else if (rawData && Array.isArray(rawData.data)) {\n//                 commentsArray = rawData.data;\n//             } else if (rawData && Array.isArray(rawData.comments)) {\n//                 commentsArray = rawData.comments;\n//             }\n\n//             const processedComments = commentsArray.map(comment => ({\n//                 id: parseInt(comment.id, 10),\n//                 author_id: parseInt(comment.author_id, 10),\n//                 post_id: parseInt(comment.post_id, 10),\n//                 content: comment.content || '',\n//                 author_name: comment.author_name || `User #${comment.author_id}`,\n//                 created_at: comment.created_at || new Date().toISOString()\n//             }));\n\n//             setComments(processedComments);\n//         } catch (err) {\n//             setError(err.response?.data?.error || err.message);\n//         } finally {\n//             setLoading(false);\n//         }\n//     }, [postId, token]);\n\n//     const handleSubmitComment = async (e) => {\n//         e.preventDefault();\n//         if (!newComment.trim() || submitting) return;\n\n//         try {\n//             setSubmitting(true);\n//             const response = await axios.post(\n//                 `http://localhost:8081/api/v1/posts/${postId}/comments`,\n//                 { \n//                     content: newComment,\n//                     author_id: currentUser.id\n//                 },\n//                 { \n//                     headers: { \n//                         Authorization: `Bearer ${token}`,\n//                         'Content-Type': 'application/json' \n//                     }\n//                 }\n//             );\n\n//             // Добавление нового комментария с полными данными\n//             const newCommentWithAuthor = {\n//                 ...response.data,\n//                 author_name: currentUser.username || `User #${currentUser.id}`,\n//                 created_at: new Date().toISOString(),\n//                 content: newComment,\n//                 author_id: currentUser.id,\n//                 post_id: postId\n//             };\n\n//             setComments(prev => [newCommentWithAuthor, ...prev]);\n//             setNewComment('');\n//         } catch (err) {\n//             setError(err.response?.data?.error || err.message);\n//         } finally {\n//             setSubmitting(false);\n//         }\n//     };\n\n//     useEffect(() => {\n//         fetchComments();\n//     }, [fetchComments]);\n\n//     return (\n//         <div className=\"comments-section\">\n//             <h4>Comments ({comments.length})</h4>\n            \n//             <form onSubmit={handleSubmitComment} className=\"comment-form\">\n//                 <textarea\n//                     value={newComment}\n//                     onChange={(e) => setNewComment(e.target.value)}\n//                     placeholder=\"Write a comment...\"\n//                     rows=\"3\"\n//                     disabled={submitting}\n//                 />\n//                 <button \n//                     type=\"submit\" \n//                     className=\"submit-comment-btn\"\n//                     disabled={submitting || !newComment.trim()}\n//                 >\n//                     {submitting ? 'Posting...' : 'Post Comment'}\n//                 </button>\n//             </form>\n\n//             {loading && <div className=\"loading-indicator\">Loading comments...</div>}\n//             {error && <div className=\"error-message\">Error: {error}</div>}\n\n//             <div className=\"comments-list\">\n//                 {comments.map(comment => (\n//                     <div key={comment.id} className=\"comment-item\">\n//                         <div className=\"comment-header\">\n//                             <span className=\"comment-author\">\n//                                 {comment.author_name}\n//                             </span>\n//                             <span className=\"comment-timestamp\">\n//                                 {new Date(comment.created_at).toLocaleDateString('en-US', {\n//                                     hour: '2-digit',\n//                                     minute: '2-digit',\n//                                     day: 'numeric',\n//                                     month: 'short',\n//                                     year: 'numeric'\n//                                 })}\n//                             </span>\n//                         </div>\n//                         <div className=\"comment-content\">\n//                             {(comment.content || '').split('\\n').map((line, index) => (\n//                                 <p key={index}>{line}</p>\n//                             ))}\n//                         </div>\n//                     </div>\n//                 ))}\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Comments;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}