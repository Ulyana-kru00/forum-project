{"ast":null,"code":"var _s = $RefreshSig$();\n// useWebSocket.js\nimport { useState, useEffect, useCallback } from 'react';\nconst useWebSocket = (url, options = {}) => {\n  _s();\n  const {\n    manual = false,\n    shouldReconnect = true\n  } = options;\n  const [socket, setSocket] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\n  const connect = useCallback(() => {\n    // Закрываем предыдущее соединение\n    if (socket) {\n      socket.close();\n    }\n    const ws = new WebSocket(url);\n    ws.onopen = () => {\n      console.log('WebSocket connected');\n      setSocket(ws);\n      setConnectionStatus('connected');\n    };\n    ws.onmessage = event => {\n      try {\n        const newMessage = JSON.parse(event.data);\n        setMessages(prev => [...prev, newMessage]);\n      } catch (err) {\n        console.error('Error parsing message:', err);\n      }\n    };\n    ws.onclose = event => {\n      console.log('WebSocket closed:', event.code, event.reason);\n      setSocket(null);\n      setConnectionStatus('disconnected');\n      if (shouldReconnect && !manual && event.code !== 1000) {\n        console.log('Reconnecting in 5s...');\n        setTimeout(connect, 5000);\n      }\n    };\n    ws.onerror = error => {\n      console.error('WebSocket error:', error);\n      setConnectionStatus('error');\n    };\n    setConnectionStatus('connecting');\n    setSocket(ws);\n  }, [url, manual, shouldReconnect, socket]);\n  const disconnect = useCallback(() => {\n    if (socket) {\n      socket.close(1000, 'User disconnected');\n      setSocket(null);\n      setConnectionStatus('disconnected');\n    }\n  }, [socket]);\n  useEffect(() => {\n    if (!manual) {\n      connect();\n    }\n    return () => {\n      disconnect();\n    };\n  }, [connect, disconnect, manual]);\n  const sendMessage = message => {\n    if ((socket === null || socket === void 0 ? void 0 : socket.readyState) === WebSocket.OPEN) {\n      socket.send(JSON.stringify(message));\n      return true;\n    }\n    console.error('Cannot send message - connection not open');\n    return false;\n  };\n  return {\n    socket,\n    messages,\n    sendMessage,\n    connectionStatus,\n    connect,\n    disconnect\n  };\n};\n_s(useWebSocket, \"rXvrEvEKyQ9zoaV5eAnpZ5UHg3E=\");\nexport default useWebSocket;","map":{"version":3,"names":["useState","useEffect","useCallback","useWebSocket","url","options","_s","manual","shouldReconnect","socket","setSocket","messages","setMessages","connectionStatus","setConnectionStatus","connect","close","ws","WebSocket","onopen","console","log","onmessage","event","newMessage","JSON","parse","data","prev","err","error","onclose","code","reason","setTimeout","onerror","disconnect","sendMessage","message","readyState","OPEN","send","stringify"],"sources":["/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js"],"sourcesContent":["// useWebSocket.js\nimport { useState, useEffect, useCallback } from 'react';\n\nconst useWebSocket = (url, options = {}) => {\n    const { manual = false, shouldReconnect = true } = options;\n    const [socket, setSocket] = useState(null);\n    const [messages, setMessages] = useState([]);\n    const [connectionStatus, setConnectionStatus] = useState('disconnected');\n\n    const connect = useCallback(() => {\n        // Закрываем предыдущее соединение\n        if (socket) {\n            socket.close();\n        }\n\n        const ws = new WebSocket(url);\n        \n        ws.onopen = () => {\n            console.log('WebSocket connected');\n            setSocket(ws);\n            setConnectionStatus('connected');\n        };\n\n        ws.onmessage = (event) => {\n            try {\n                const newMessage = JSON.parse(event.data);\n                setMessages(prev => [...prev, newMessage]);\n            } catch (err) {\n                console.error('Error parsing message:', err);\n            }\n        };\n\n        ws.onclose = (event) => {\n            console.log('WebSocket closed:', event.code, event.reason);\n            setSocket(null);\n            setConnectionStatus('disconnected');\n            \n            if (shouldReconnect && !manual && event.code !== 1000) {\n                console.log('Reconnecting in 5s...');\n                setTimeout(connect, 5000);\n            }\n        };\n\n        ws.onerror = (error) => {\n            console.error('WebSocket error:', error);\n            setConnectionStatus('error');\n        };\n\n        setConnectionStatus('connecting');\n        setSocket(ws);\n    }, [url, manual, shouldReconnect, socket]);\n\n    const disconnect = useCallback(() => {\n        if (socket) {\n            socket.close(1000, 'User disconnected');\n            setSocket(null);\n            setConnectionStatus('disconnected');\n        }\n    }, [socket]);\n\n    useEffect(() => {\n        if (!manual) {\n            connect();\n        }\n\n        return () => {\n            disconnect();\n        };\n    }, [connect, disconnect, manual]);\n\n    const sendMessage = (message) => {\n        if (socket?.readyState === WebSocket.OPEN) {\n            socket.send(JSON.stringify(message));\n            return true;\n        }\n        console.error('Cannot send message - connection not open');\n        return false;\n    };\n\n    return {\n        socket,\n        messages,\n        sendMessage,\n        connectionStatus,\n        connect,\n        disconnect\n    };\n};\n\nexport default useWebSocket;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}