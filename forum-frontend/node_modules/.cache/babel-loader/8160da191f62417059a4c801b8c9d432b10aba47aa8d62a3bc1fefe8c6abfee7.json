{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState, useCallback } from 'react';\nimport '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css'; // путь к стилям\n\nexport function useWebSocket(url, {\n  manual = false\n} = {}) {\n  _s();\n  const socketRef = useRef(null);\n  const reconnectTimeoutRef = useRef(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\n  const [messages, setMessages] = useState([]);\n  const [error, setError] = useState(null);\n  const getWebSocketUrl = useCallback(() => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      setError('Authentication token not found');\n      return null;\n    }\n    try {\n      const wsUrl = new URL(url);\n      wsUrl.searchParams.set('token', token);\n      return wsUrl.toString();\n    } catch (e) {\n      console.error('Invalid WebSocket URL:', e);\n      setError('Invalid WebSocket URL');\n      return null;\n    }\n  }, [url]);\n  const handleIncomingMessage = useCallback(data => {\n    if (data.type === 'AUTH_ERROR') {\n      console.error('Authentication error:', data.message);\n      setError(data.message);\n      disconnect();\n      localStorage.removeItem('token');\n      window.location.reload();\n      return;\n    }\n    setMessages(prev => [...prev, data]);\n  }, []);\n  const connect = useCallback(() => {\n    const wsUrl = getWebSocketUrl();\n    if (!wsUrl) return;\n    if (socketRef.current) {\n      disconnect(true);\n    }\n    setConnectionStatus('connecting');\n    console.log('Connecting to WebSocket...');\n    socketRef.current = new WebSocket(wsUrl);\n\n    // Таймаут подключения\n    const connectTimeout = setTimeout(() => {\n      var _socketRef$current;\n      if (((_socketRef$current = socketRef.current) === null || _socketRef$current === void 0 ? void 0 : _socketRef$current.readyState) !== WebSocket.OPEN) {\n        setError('Connection timeout');\n        disconnect();\n      }\n    }, 5000);\n    socketRef.current.onopen = () => {\n      clearTimeout(connectTimeout);\n      console.log('WebSocket connected');\n      setIsConnected(true);\n      setConnectionStatus('connected');\n      setError(null);\n    };\n    socketRef.current.onmessage = event => {\n      try {\n        const parsedData = JSON.parse(event.data);\n        handleIncomingMessage(parsedData);\n      } catch (e) {\n        console.warn('Non-JSON message:', event.data);\n        handleIncomingMessage({\n          content: event.data\n        });\n      }\n    };\n    socketRef.current.onerror = event => {\n      console.error('WebSocket error:', event);\n      setError('WebSocket connection error');\n      setConnectionStatus('error');\n    };\n    socketRef.current.onclose = event => {\n      console.log(`WebSocket closed: ${event.code} ${event.reason}`);\n      setIsConnected(false);\n      setConnectionStatus('disconnected');\n      if (!event.wasClean && event.code !== 1000) {\n        console.log('Reconnecting in 3 seconds...');\n        reconnectTimeoutRef.current = setTimeout(() => {\n          connect();\n        }, 3000);\n      }\n    };\n  }, [getWebSocketUrl, disconnect, handleIncomingMessage]);\n  const disconnect = useCallback((permanent = false) => {\n    if (socketRef.current) {\n      if (permanent) {\n        socketRef.current.onclose = () => {};\n      }\n      socketRef.current.close(permanent ? 1000 : 1001, permanent ? 'Normal closure' : 'Reconnecting');\n    }\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n    }\n  }, []);\n  const sendMessage = useCallback(message => {\n    var _socketRef$current2;\n    if (((_socketRef$current2 = socketRef.current) === null || _socketRef$current2 === void 0 ? void 0 : _socketRef$current2.readyState) === WebSocket.OPEN) {\n      const messageWithAuth = {\n        ...message,\n        timestamp: new Date().toISOString(),\n        user_id: parseInt(localStorage.getItem('userId'), 10),\n        username: localStorage.getItem('username') || 'unknown'\n      };\n      try {\n        socketRef.current.send(JSON.stringify(messageWithAuth));\n        return Promise.resolve();\n      } catch (e) {\n        console.error('Error sending message:', e);\n        setError('Failed to send message');\n        return Promise.reject(e);\n      }\n    }\n    return Promise.reject(new Error('WebSocket not connected'));\n  }, []);\n  useEffect(() => {\n    if (!manual) {\n      connect();\n    }\n    return () => {\n      disconnect(true);\n    };\n  }, [connect, disconnect, manual]);\n  return {\n    isConnected,\n    connectionStatus,\n    messages,\n    sendMessage,\n    connect,\n    disconnect,\n    error\n  };\n}\n_s(useWebSocket, \"vPPQoK0jlNnRWGamV6kh/z2+XwI=\");\nexport default useWebSocket;\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js'; // путь поменяй если другой\n// import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css'; // путь к стилям\n\n// const Chat = () => {\n//   const [message, setMessage] = useState('');\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [errorMessage, setErrorMessage] = useState('');\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [userId, setUserId] = useState(null);\n//   const [username, setUsername] = useState(null);\n\n//   const {\n//     messages,\n//     sendMessage,\n//     connectionStatus,\n//     connect,\n//     disconnect,\n//   } = useWebSocket('ws://localhost:8082/ws', { manual: true });\n\n//   // Load user data from localStorage on initial mount\n//   useEffect(() => {\n//     const storedUserId = localStorage.getItem('userId');\n//     const storedUsername = localStorage.getItem('username');\n\n//     if (storedUserId && storedUsername) {\n//       setUserId(storedUserId);\n//       setUsername(storedUsername);\n//       setIsLoggedIn(true);\n//     }\n//   }, []);\n\n//   // Connect when isLoggedIn changes to true\n//   useEffect(() => {\n//     if (isLoggedIn) {\n//       connect(); // Connect WebSocket when isLoggedIn is true\n//     } else {\n//       disconnect(); // Disconnect if isLoggedIn becomes false (e.g., logout)\n//     }\n\n//     return () => {\n//         disconnect(); // Disconnect when component unmounts\n//     }\n//   }, [isLoggedIn, connect, disconnect]);\n\n//   const handleLogin = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       const response = await axios.post('http://localhost:8080/login', {\n//         email,\n//         password,\n//       });\n\n//       if (response.status === 200) {\n//         const { userId, username, token } = response.data;\n\n//         if (!userId || !username || username === 'undefined') {\n//           console.warn('Invalid user session, cannot connect');\n//           setErrorMessage('Login failed: server did not provide user info.');\n//           return;\n//         }\n\n//         localStorage.setItem('userId', userId);\n//         localStorage.setItem('username', username);\n//         localStorage.setItem('token', token);\n\n//         setUserId(userId);\n//         setUsername(username);\n//         setIsLoggedIn(true);  // Set isLoggedIn AFTER setting userId and username\n\n//       }\n//     } catch (error) {\n//       console.error(\"Login error:\", error.response || error.message || error); // Log detailed error\n//       setErrorMessage('Login failed. Please check your credentials.');\n//     }\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     if (!message.trim() || !username) {\n//       console.warn('Cannot send empty message or missing username');\n//       return;\n//     }\n\n//     sendMessage({\n//       user_id: userId,\n//       username: username,\n//       content: message.trim(),\n//     });\n\n//     setMessage('');\n//   };\n\n//   if (!isLoggedIn) {\n//     return (\n//       <div>\n//         <h2>Login to use Chat</h2>\n//         <form onSubmit={handleLogin}>\n//           <div>\n//             <label>Login</label>\n//             <input\n//               type=\"login\"\n//               value={login}\n//               onChange={(e) => setEmail(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <div>\n//             <label>Password</label>\n//             <input\n//               type=\"password\"\n//               value={password}\n//               onChange={(e) => setPassword(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <button type=\"submit\">Login</button>\n//         </form>\n//         {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"connection-status\">\n//         Status: {connectionStatus}\n//       </div>\n//       <div className=\"messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message\">\n//             <span className=\"user\">{msg.username}:</span>\n//             <span className=\"content\">{msg.content}</span>\n//           </div>\n//         ))}\n//       </div>\n//       <form onSubmit={handleSubmit}>\n//         <input\n//           type=\"text\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//           placeholder=\"Type your message...\"\n//         />\n//         <button type=\"submit\">Send</button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default Chat;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js'; // путь поменяй если другой\n// import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css'; // путь к стилям\n\n// const Chat = () => {\n//   const [message, setMessage] = useState('');\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [errorMessage, setErrorMessage] = useState('');\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n//   const [userId, setUserId] = useState(null);\n//   const [username, setUsername] = useState(null);\n\n//   const {\n//     messages,\n//     sendMessage,\n//     connectionStatus,\n//     connect, // добавляем ручное подключение\n//     disconnect\n//   } = useWebSocket('ws://localhost:8082/ws', { manual: true }); // manual mode!\n\n//   useEffect(() => {\n//     const storedUserId = localStorage.getItem('userId');\n//     const storedUsername = localStorage.getItem('username');\n//     if (storedUserId && storedUsername) {\n//       setUserId(storedUserId);\n//       setUsername(storedUsername);\n//       setIsLoggedIn(true);\n//       connect(); // подключаем WebSocket только если есть данные\n//     }\n//   }, [connect]);\n\n//   const handleLogin = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       const response = await axios.post('http://localhost:8080/login', {\n//         email,\n//         password,\n//       });\n\n//       if (response.status === 200) {\n//         const { userId, username, token } = response.data;\n\n//         if (!userId || !username || username === 'undefined') {\n//           console.warn('Invalid user session, cannot connect');\n//           setErrorMessage('Login failed: server did not provide user info.');\n//           return;\n//         }\n\n//         localStorage.setItem('userId', userId);\n//         localStorage.setItem('username', username);\n//         localStorage.setItem('token', token);\n\n//         setUserId(userId);\n//         setUsername(username);\n//         setIsLoggedIn(true);\n\n//         connect(); // подключаем WebSocket после логина\n\n//       }\n//     } catch (error) {\n//       console.error(error);\n//       setErrorMessage('Login failed. Please check your credentials.');\n//     }\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     if (!message.trim() || !username) {\n//       console.warn('Cannot send empty message or missing username');\n//       return;\n//     }\n\n//     sendMessage({\n//       user_id:  userId,\n//       username: username,\n//       content: message.trim(),\n//     });\n\n//     setMessage('');\n//   };\n\n//   if (!isLoggedIn) {\n//     return (\n//       <div>\n//         <h2>Login to use Chat</h2>\n//         <form onSubmit={handleLogin}>\n//           <div>\n//             <label>Email</label>\n//             <input\n//               type=\"email\"\n//               value={email}\n//               onChange={(e) => setEmail(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <div>\n//             <label>Password</label>\n//             <input\n//               type=\"password\"\n//               value={password}\n//               onChange={(e) => setPassword(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <button type=\"submit\">Login</button>\n//         </form>\n\n//         {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"connection-status\">\n//         Status: {connectionStatus}\n//       </div>\n\n//       <div className=\"messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message\">\n//             <span className=\"user\">{msg.username}:</span>  \n//             <span className=\"content\">{msg.content}</span>\n//           </div>\n//         ))}\n//       </div>\n\n//       <form onSubmit={handleSubmit} className=\"chat-form\">\n//         <input\n//           type=\"text\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//           placeholder=\"Type your message...\"\n//           disabled={connectionStatus !== 'connected'}\n//           className=\"chat-input\"\n//         />\n//         <button\n//           type=\"submit\"\n//           disabled={connectionStatus !== 'connected' || !message.trim()}\n//           className=\"chat-send-button\"\n//         >\n//           Send\n//         </button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default Chat;","map":{"version":3,"names":["useEffect","useRef","useState","useCallback","useWebSocket","url","manual","_s","socketRef","reconnectTimeoutRef","isConnected","setIsConnected","connectionStatus","setConnectionStatus","messages","setMessages","error","setError","getWebSocketUrl","token","localStorage","getItem","wsUrl","URL","searchParams","set","toString","e","console","handleIncomingMessage","data","type","message","disconnect","removeItem","window","location","reload","prev","connect","current","log","WebSocket","connectTimeout","setTimeout","_socketRef$current","readyState","OPEN","onopen","clearTimeout","onmessage","event","parsedData","JSON","parse","warn","content","onerror","onclose","code","reason","wasClean","permanent","close","sendMessage","_socketRef$current2","messageWithAuth","timestamp","Date","toISOString","user_id","parseInt","username","send","stringify","Promise","resolve","reject","Error"],"sources":["/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/Chat/Chat.js"],"sourcesContent":["import { useEffect, useRef, useState, useCallback } from 'react';\n import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css'; // путь к стилям\n\nexport function useWebSocket(url, { manual = false } = {}) {\n  const socketRef = useRef(null);\n  const reconnectTimeoutRef = useRef(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\n  const [messages, setMessages] = useState([]);\n  const [error, setError] = useState(null);\n\n  const getWebSocketUrl = useCallback(() => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      setError('Authentication token not found');\n      return null;\n    }\n\n    try {\n      const wsUrl = new URL(url);\n      wsUrl.searchParams.set('token', token);\n      return wsUrl.toString();\n    } catch (e) {\n      console.error('Invalid WebSocket URL:', e);\n      setError('Invalid WebSocket URL');\n      return null;\n    }\n  }, [url]);\n\n  const handleIncomingMessage = useCallback((data) => {\n    if (data.type === 'AUTH_ERROR') {\n      console.error('Authentication error:', data.message);\n      setError(data.message);\n      disconnect();\n      localStorage.removeItem('token');\n      window.location.reload();\n      return;\n    }\n    setMessages(prev => [...prev, data]);\n  }, []);\n\n  const connect = useCallback(() => {\n    const wsUrl = getWebSocketUrl();\n    if (!wsUrl) return;\n\n    if (socketRef.current) {\n      disconnect(true);\n    }\n\n    setConnectionStatus('connecting');\n    console.log('Connecting to WebSocket...');\n\n    socketRef.current = new WebSocket(wsUrl);\n\n    // Таймаут подключения\n    const connectTimeout = setTimeout(() => {\n      if (socketRef.current?.readyState !== WebSocket.OPEN) {\n        setError('Connection timeout');\n        disconnect();\n      }\n    }, 5000);\n\n    socketRef.current.onopen = () => {\n      clearTimeout(connectTimeout);\n      console.log('WebSocket connected');\n      setIsConnected(true);\n      setConnectionStatus('connected');\n      setError(null);\n    };\n\n    socketRef.current.onmessage = (event) => {\n      try {\n        const parsedData = JSON.parse(event.data);\n        handleIncomingMessage(parsedData);\n      } catch (e) {\n        console.warn('Non-JSON message:', event.data);\n        handleIncomingMessage({ content: event.data });\n      }\n    };\n\n    socketRef.current.onerror = (event) => {\n      console.error('WebSocket error:', event);\n      setError('WebSocket connection error');\n      setConnectionStatus('error');\n    };\n\n    socketRef.current.onclose = (event) => {\n      console.log(`WebSocket closed: ${event.code} ${event.reason}`);\n      setIsConnected(false);\n      setConnectionStatus('disconnected');\n\n      if (!event.wasClean && event.code !== 1000) {\n        console.log('Reconnecting in 3 seconds...');\n        reconnectTimeoutRef.current = setTimeout(() => {\n          connect();\n        }, 3000);\n      }\n    };\n  }, [getWebSocketUrl, disconnect, handleIncomingMessage]);\n\n  const disconnect = useCallback((permanent = false) => {\n    if (socketRef.current) {\n      if (permanent) {\n        socketRef.current.onclose = () => {};\n      }\n      socketRef.current.close(\n        permanent ? 1000 : 1001,\n        permanent ? 'Normal closure' : 'Reconnecting'\n      );\n    }\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n    }\n  }, []);\n\n  const sendMessage = useCallback((message) => {\n    if (socketRef.current?.readyState === WebSocket.OPEN) {\n      const messageWithAuth = {\n        ...message,\n        timestamp: new Date().toISOString(),\n        user_id: parseInt(localStorage.getItem('userId'), 10),\n        username: localStorage.getItem('username') || 'unknown',\n      };\n      \n      try {\n        socketRef.current.send(JSON.stringify(messageWithAuth));\n        return Promise.resolve();\n      } catch (e) {\n        console.error('Error sending message:', e);\n        setError('Failed to send message');\n        return Promise.reject(e);\n      }\n    }\n    return Promise.reject(new Error('WebSocket not connected'));\n  }, []);\n\n  useEffect(() => {\n    if (!manual) {\n      connect();\n    }\n\n    return () => {\n      disconnect(true);\n    };\n  }, [connect, disconnect, manual]);\n\n  return {\n    isConnected,\n    connectionStatus,\n    messages,\n    sendMessage,\n    connect,\n    disconnect,\n    error,\n  };\n}\n\nexport default useWebSocket;\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js'; // путь поменяй если другой\n// import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css'; // путь к стилям\n\n// const Chat = () => {\n//   const [message, setMessage] = useState('');\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [errorMessage, setErrorMessage] = useState('');\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [userId, setUserId] = useState(null);\n//   const [username, setUsername] = useState(null);\n\n//   const {\n//     messages,\n//     sendMessage,\n//     connectionStatus,\n//     connect,\n//     disconnect,\n//   } = useWebSocket('ws://localhost:8082/ws', { manual: true });\n\n//   // Load user data from localStorage on initial mount\n//   useEffect(() => {\n//     const storedUserId = localStorage.getItem('userId');\n//     const storedUsername = localStorage.getItem('username');\n\n//     if (storedUserId && storedUsername) {\n//       setUserId(storedUserId);\n//       setUsername(storedUsername);\n//       setIsLoggedIn(true);\n//     }\n//   }, []);\n\n//   // Connect when isLoggedIn changes to true\n//   useEffect(() => {\n//     if (isLoggedIn) {\n//       connect(); // Connect WebSocket when isLoggedIn is true\n//     } else {\n//       disconnect(); // Disconnect if isLoggedIn becomes false (e.g., logout)\n//     }\n\n//     return () => {\n//         disconnect(); // Disconnect when component unmounts\n//     }\n//   }, [isLoggedIn, connect, disconnect]);\n\n//   const handleLogin = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       const response = await axios.post('http://localhost:8080/login', {\n//         email,\n//         password,\n//       });\n\n//       if (response.status === 200) {\n//         const { userId, username, token } = response.data;\n\n//         if (!userId || !username || username === 'undefined') {\n//           console.warn('Invalid user session, cannot connect');\n//           setErrorMessage('Login failed: server did not provide user info.');\n//           return;\n//         }\n\n//         localStorage.setItem('userId', userId);\n//         localStorage.setItem('username', username);\n//         localStorage.setItem('token', token);\n\n//         setUserId(userId);\n//         setUsername(username);\n//         setIsLoggedIn(true);  // Set isLoggedIn AFTER setting userId and username\n\n//       }\n//     } catch (error) {\n//       console.error(\"Login error:\", error.response || error.message || error); // Log detailed error\n//       setErrorMessage('Login failed. Please check your credentials.');\n//     }\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     if (!message.trim() || !username) {\n//       console.warn('Cannot send empty message or missing username');\n//       return;\n//     }\n\n//     sendMessage({\n//       user_id: userId,\n//       username: username,\n//       content: message.trim(),\n//     });\n\n//     setMessage('');\n//   };\n\n//   if (!isLoggedIn) {\n//     return (\n//       <div>\n//         <h2>Login to use Chat</h2>\n//         <form onSubmit={handleLogin}>\n//           <div>\n//             <label>Login</label>\n//             <input\n//               type=\"login\"\n//               value={login}\n//               onChange={(e) => setEmail(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <div>\n//             <label>Password</label>\n//             <input\n//               type=\"password\"\n//               value={password}\n//               onChange={(e) => setPassword(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <button type=\"submit\">Login</button>\n//         </form>\n//         {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"connection-status\">\n//         Status: {connectionStatus}\n//       </div>\n//       <div className=\"messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message\">\n//             <span className=\"user\">{msg.username}:</span>\n//             <span className=\"content\">{msg.content}</span>\n//           </div>\n//         ))}\n//       </div>\n//       <form onSubmit={handleSubmit}>\n//         <input\n//           type=\"text\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//           placeholder=\"Type your message...\"\n//         />\n//         <button type=\"submit\">Send</button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default Chat;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js'; // путь поменяй если другой\n// import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css'; // путь к стилям\n\n// const Chat = () => {\n//   const [message, setMessage] = useState('');\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [errorMessage, setErrorMessage] = useState('');\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n//   const [userId, setUserId] = useState(null);\n//   const [username, setUsername] = useState(null);\n\n//   const {\n//     messages,\n//     sendMessage,\n//     connectionStatus,\n//     connect, // добавляем ручное подключение\n//     disconnect\n//   } = useWebSocket('ws://localhost:8082/ws', { manual: true }); // manual mode!\n\n//   useEffect(() => {\n//     const storedUserId = localStorage.getItem('userId');\n//     const storedUsername = localStorage.getItem('username');\n//     if (storedUserId && storedUsername) {\n//       setUserId(storedUserId);\n//       setUsername(storedUsername);\n//       setIsLoggedIn(true);\n//       connect(); // подключаем WebSocket только если есть данные\n//     }\n//   }, [connect]);\n\n//   const handleLogin = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       const response = await axios.post('http://localhost:8080/login', {\n//         email,\n//         password,\n//       });\n\n//       if (response.status === 200) {\n//         const { userId, username, token } = response.data;\n\n//         if (!userId || !username || username === 'undefined') {\n//           console.warn('Invalid user session, cannot connect');\n//           setErrorMessage('Login failed: server did not provide user info.');\n//           return;\n//         }\n\n//         localStorage.setItem('userId', userId);\n//         localStorage.setItem('username', username);\n//         localStorage.setItem('token', token);\n\n//         setUserId(userId);\n//         setUsername(username);\n//         setIsLoggedIn(true);\n\n//         connect(); // подключаем WebSocket после логина\n\n//       }\n//     } catch (error) {\n//       console.error(error);\n//       setErrorMessage('Login failed. Please check your credentials.');\n//     }\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     if (!message.trim() || !username) {\n//       console.warn('Cannot send empty message or missing username');\n//       return;\n//     }\n\n//     sendMessage({\n//       user_id:  userId,\n//       username: username,\n//       content: message.trim(),\n//     });\n\n//     setMessage('');\n//   };\n\n//   if (!isLoggedIn) {\n//     return (\n//       <div>\n//         <h2>Login to use Chat</h2>\n//         <form onSubmit={handleLogin}>\n//           <div>\n//             <label>Email</label>\n//             <input\n//               type=\"email\"\n//               value={email}\n//               onChange={(e) => setEmail(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <div>\n//             <label>Password</label>\n//             <input\n//               type=\"password\"\n//               value={password}\n//               onChange={(e) => setPassword(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <button type=\"submit\">Login</button>\n//         </form>\n\n//         {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"connection-status\">\n//         Status: {connectionStatus}\n//       </div>\n\n//       <div className=\"messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message\">\n//             <span className=\"user\">{msg.username}:</span>  \n//             <span className=\"content\">{msg.content}</span>\n//           </div>\n//         ))}\n//       </div>\n\n//       <form onSubmit={handleSubmit} className=\"chat-form\">\n//         <input\n//           type=\"text\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//           placeholder=\"Type your message...\"\n//           disabled={connectionStatus !== 'connected'}\n//           className=\"chat-input\"\n//         />\n//         <button\n//           type=\"submit\"\n//           disabled={connectionStatus !== 'connected' || !message.trim()}\n//           className=\"chat-send-button\"\n//         >\n//           Send\n//         </button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default Chat;\n"],"mappings":"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A;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}