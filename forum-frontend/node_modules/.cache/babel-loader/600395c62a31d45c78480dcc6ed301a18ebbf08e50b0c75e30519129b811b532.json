{"ast":null,"code":"var _jsxFileName = \"/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/Posts/PostList.js\";\nimport React from 'react';\nimport '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostList = ({\n  posts,\n  onDelete,\n  isProfilePage\n}) => {\n  const currentUserId = parseInt(localStorage.getItem('userId'), 10);\n  const currentUserRole = localStorage.getItem('userRole');\n  const handleDeletePost = async postId => {\n    const confirmDelete = window.confirm(\"Are you sure you want to delete this post?\");\n    if (!confirmDelete) return;\n    try {\n      await onDelete(postId); // Передаем управление родительскому компоненту\n    } catch (error) {\n      alert(error.message || 'Failed to delete post');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"post-list-container\",\n    children: posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 25\n        }, this), (isProfilePage || currentUserId === post.author_id || currentUserRole === 'admin') && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDeletePost(post.id),\n          className: \"delete-button\",\n          title: currentUserRole === 'admin' ? \"Delete post (admin)\" : \"Delete your post\",\n          children: \"\\u2715\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-content\",\n        children: post.content.split('\\n').map((p, i) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: p\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-meta\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"author\",\n          children: post.author_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"separator\",\n          children: \"\\u2022\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"timestamp\",\n          children: new Date(post.created_at).toLocaleDateString('en-US', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n            hour: '2-digit',\n            minute: '2-digit'\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }, this), currentUserRole === 'admin' && post.author_id !== currentUserId && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"admin-badge\",\n          children: \"(admin action)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this)]\n    }, post.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n};\n_c = PostList;\nexport default PostList;\n// import React, { useEffect, useState, useCallback } from 'react';\n// import axios from 'axios';\n// import '../MainLayout.css';\n\n// const PostList = ({ refreshTrigger }) => {\n//     const [posts, setPosts] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     const currentUserId = parseInt(localStorage.getItem('userId'), 10);\n//     const currentUserRole = localStorage.getItem('userRole');\n//     const token = localStorage.getItem('token');\n\n//     const fetchPosts = useCallback(async () => {\n//         try {\n//             setLoading(true);\n//             setError(null);\n\n//             const response = await axios.get('http://localhost:8081/api/v1/posts', {\n//                 headers: { \n//                     'Accept': 'application/json',\n//                     'Authorization': `Bearer ${token}`\n//                 }\n//             });\n\n//             const processedPosts = response.data.data.map(post => ({\n//                 ...post,\n//                 id: parseInt(post.id, 10),\n//                 author_id: parseInt(post.author_id, 10),\n//                 created_at: new Date(post.created_at).toISOString()\n//             }));\n\n//             setPosts(processedPosts);\n//         } catch (err) {\n//             setError(err.response?.data?.error || err.message);\n//         } finally {\n//             setLoading(false);\n//         }\n//     }, [token]);\n\n//     useEffect(() => {\n//         fetchPosts();\n//     }, [fetchPosts, refreshTrigger]);\n\n//     const handleDeletePost = async (postId, authorId) => {\n//         const confirmDelete = window.confirm(\"Are you sure you want to delete this post?\");\n//         if (!confirmDelete) return;\n\n//         try {\n//             await axios.delete(`http://localhost:8081/api/v1/posts/${postId}`, {\n//                 headers: { \n//                     'Authorization': `Bearer ${token}`,\n//                     'Content-Type': 'application/json'\n//                 }\n//             });\n\n//             setPosts(prev => prev.filter(post => post.id !== postId));\n\n//         } catch (error) {\n//             console.error('Delete post error:', error);\n//             const errorMessage = error.response?.data?.error || \n//                                error.response?.data?.message || \n//                                'Failed to delete post';\n\n//             alert(errorMessage);\n//             await fetchPosts();\n//         }\n//     };\n\n//     return (\n//         <div className=\"post-list-container\">\n//             {loading && <div className=\"loading-indicator\">Loading posts...</div>}\n//             {error && <div className=\"error-message\">Error: {error}</div>}\n\n//             {posts.map(post => (\n//                 <div key={post.id} className=\"post-item\">\n//                     <div className=\"post-header\">\n//                         <h3>{post.title}</h3>\n//                         {(currentUserId === post.author_id || currentUserRole === 'admin') && (\n//                             <button\n//                                 onClick={() => handleDeletePost(post.id, post.author_id)}\n//                                 className=\"delete-button\"\n//                                 title={currentUserRole === 'admin' \n//                                     ? \"Delete post (admin)\" \n//                                     : \"Delete your post\"}\n//                             >\n//                                 ✕\n//                             </button>\n//                         )}\n//                     </div>\n//                     <div className=\"post-content\">\n//                         {post.content.split('\\n').map((p, i) => (\n//                             <p key={i}>{p}</p>\n//                         ))}\n//                     </div>\n//                     <div className=\"post-meta\">\n//                         <span className=\"author\">{post.author_name}</span>\n//                         <span className=\"separator\">•</span>\n//                         <span className=\"timestamp\">\n//                             {new Date(post.created_at).toLocaleDateString('en-US', {\n//                                 year: 'numeric',\n//                                 month: 'long',\n//                                 day: 'numeric',\n//                                 hour: '2-digit',\n//                                 minute: '2-digit'\n//                             })}\n//                         </span>\n//                         {currentUserRole === 'admin' && post.author_id !== currentUserId && (\n//                             <span className=\"admin-badge\">(admin action)</span>\n//                         )}\n//                     </div>\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// };\n\n// export default PostList;\n\n// import React, { useEffect, useState, useCallback } from 'react';\n// import axios from 'axios';\n// import '../MainLayout.css';\n\n// const PostList = ({ refreshTrigger }) => {\n//     const [posts, setPosts] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     const handleDeletePost = async (postId, authorId) => {\n//         const confirmDelete = window.confirm(\"Are you sure you want to delete this post?\");\n//         if (!confirmDelete) return;\n\n//         const token = localStorage.getItem('token');\n//         const currentUserId = parseInt(localStorage.getItem('userId'), 10);\n\n//         console.log('Trying to delete post:', postId);\n//         console.log('Current user:', currentUserId, 'Post author:', authorId);\n\n//         if (currentUserId !== authorId) {\n//             alert(\"You can only delete your own posts\");\n//             return;\n//         }\n\n//         try {\n//             await axios.delete(`http://localhost:8081/api/v1/posts/${postId}`, {\n//                 headers: {\n//                     'Authorization': `Bearer ${token}`\n//                 }\n//             });\n\n//             setPosts(prev => prev.filter(post => post.id !== postId));\n//             alert(\"Post deleted successfully\");\n//         } catch (error) {\n//             console.error('Delete post error:', error);\n//             alert(error.response?.data?.error || 'Failed to delete post');\n//         }\n//     };\n\n//     const fetchPosts = useCallback(async () => {\n//         try {\n//             setLoading(true);\n//             setError(null);\n\n//             const response = await axios.get('http://localhost:8081/api/v1/posts', {\n//                 headers: {\n//                     'Accept': 'application/json'\n//                 }\n//             });\n\n//             const processedPosts = response.data.data.map(post => ({\n//                 ...post,\n//                 author_id: parseInt(post.author_id, 10),\n//                 created_at: new Date(post.created_at).toISOString()\n//             }));\n\n//             setPosts(processedPosts);\n//         } catch (err) {\n//             setError(err.response?.data?.error || err.message);\n//         } finally {\n//             setLoading(false);\n//         }\n//     }, []);\n\n//     useEffect(() => {\n//         fetchPosts();\n//     }, [fetchPosts, refreshTrigger]);\n\n//     const currentUserId = parseInt(localStorage.getItem('userId'), 10);\n\n//     return (\n//         <div className=\"post-list-container\">\n//             {posts.map(post => (\n//                 <div key={post.id} className=\"post-item\">\n//                     <div className=\"post-header\">\n//                         <h3>{post.title}</h3>\n//                         {(() => {\n//     console.log('Текущий пользователь:', currentUserId);\n//     console.log('Автор поста:', post.author_id);\n//     return currentUserId === post.author_id ? (\n//       <button\n//         onClick={() => handleDeletePost(post.id, post.author_id)}\n//         className=\"delete-button\"\n//         title=\"Delete post\"\n//       >\n//         ✕\n//       </button>\n//     ) : null;\n//   })()}\n//                     </div>\n//                     <div className=\"post-content\">\n//                         {post.content.split('\\n').map((p, i) => (\n//                             <p key={i}>{p}</p>\n//                         ))}\n//                     </div>\n//                     <div className=\"post-meta\">\n//                         <span>By {post.author_name}</span>\n//                         <span> • </span>\n//                         <span>\n//                             {new Date(post.created_at).toLocaleDateString('en-US', {\n//                                 year: 'numeric',\n//                                 month: 'long',\n//                                 day: 'numeric',\n//                                 hour: '2-digit',\n//                                 minute: '2-digit'\n//                             })}\n//                         </span>\n//                     </div>\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// };\n\n// export default PostList;\n// import React, { useEffect, useState, useCallback } from 'react';\n// import axios from 'axios';\n// import '../MainLayout.css';\n\n// const PostList = ({ refreshTrigger }) => {\n//     const [posts, setPosts] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     const handleDeletePost = async (postId, authorId) => {\n//         const confirmDelete = window.confirm(\"Are you sure you want to delete this post?\");\n//         if (!confirmDelete) return;\n\n//         try {\n//             const token = localStorage.getItem('token');\n//             const currentUserId = parseInt(localStorage.getItem('userId'));\n//             if (!currentUserId || currentUserId !== authorId) {\n//                 alert(\"You can only delete your own posts\");\n//                 return;\n//             }\n\n//             await axios.delete(`http://localhost:8081/api/v1/posts/${postId}`, {\n//                 headers: {\n//                     'Authorization': `Bearer ${token}`\n//                 }\n//             })\n\n//             fetchPosts();\n//             alert(\"Post deleted successfully\");\n//         } catch (error) {\n//             console.error('Delete post error:', error);\n//             alert(error.response?.data?.error || 'Failed to delete post');\n//         }\n//     };\n\n//     const fetchPosts = useCallback(async () => {\n//         let isMounted = true;\n\n//         try {\n//             setLoading(true);\n//             setError(null);\n\n//             const token = localStorage.getItem('token');\n//             if (!token) {\n//                 throw new Error('Authentication token not found');\n//             }\n\n//             const response = await axios.get('http://localhost:8081/api/v1/posts', {\n//                 headers: {\n//                     'Authorization': `Bearer ${token}`,\n//                     'Accept': 'application/json'\n//                 }\n//             });\n\n//             if (!isMounted) return;\n\n//             const postsData = response.data?.data || response.data;\n\n//             if (!postsData || !Array.isArray(postsData)) {\n//                 throw new Error('Invalid data structure received from server');\n//             }\n\n//             const processedPosts = await Promise.all(\n//                 postsData.map(async (post) => {\n//                     let username = `User ${post.author_id}`;\n\n//                     if (!post.author_name) {\n//                         try {\n//                             const userResponse = await axios.get(\n//                                 `http://localhost:8081/api/users/${post.author_id}`,\n//                                 { \n//                                     headers: { \n//                                         'Authorization': `Bearer ${token}` \n//                                     } \n//                                 }\n//                             );\n//                             username = userResponse.data.username || username;\n//                         } catch (err) {\n//                             console.error('Failed to fetch username:', err);\n//                         }\n//                     } else {\n//                         username = post.author_name;\n//                     }\n\n//                     return {\n//                         id: post.id,\n//                         title: post.title || 'Untitled Post',\n//                         content: post.content || 'No content available',\n//                         author_id: post.author_id,\n//                         author_name: username,\n//                         created_at: post.created_at || new Date().toISOString()\n//                     };\n//                 })\n//             );\n\n//             if (isMounted) {\n//                 setPosts(processedPosts);\n//             }\n//         } catch (err) {\n//             if (isMounted) {\n//                 console.error('Post fetch error:', {\n//                     error: err,\n//                     response: err.response\n//                 });\n\n//                 setError(\n//                     err.response?.data?.error ||\n//                     err.message ||\n//                     'Failed to load posts. Please try again later.'\n//                 );\n//             }\n//         } finally {\n//             if (isMounted) {\n//                 setLoading(false);\n//             }\n//         }\n\n//         return () => { isMounted = false };\n//     }, []);\n\n//     useEffect(() => {\n//         const abortController = new AbortController();\n//         fetchPosts();\n//         return () => {\n//             abortController.abort();\n//         };\n//     }, [fetchPosts, refreshTrigger]);\n\n//     if (loading) {\n//         return (\n//             <div className=\"loading-container\">\n//                 <div className=\"spinner\"></div>\n//                 <p>Loading posts...</p>\n//             </div>\n//         );\n//     }\n\n//     if (error) {\n//         return (\n//             <div className=\"error-container\">\n//                 <p className=\"error-message\">{error}</p>\n//                 <button\n//                     onClick={fetchPosts}\n//                     className=\"retry-button\"\n//                 >\n//                     Retry\n//                 </button>\n//             </div>\n//         );\n//     }\n\n//     return (\n//         <div className=\"post-list-container\">\n//             {posts.length > 0 ? (\n//                 [...posts].reverse().map((post) => (\n//                     <div key={`post-${post.id}`} className=\"post-item\">\n//                         <div className=\"post-header\">\n//                             <h3>{post.title}</h3>\n//                             {post.author_id === Number(localStorage.getItem('userId')) && (\n//                                 <button\n//                                     onClick={() => handleDeletePost(post.id, post.author_id)}\n//                                     className=\"delete-button\"\n//                                     title=\"Delete post\"\n//                                 >\n//                                     Delete\n//                                 </button>\n//                             )}\n//                         </div>\n//                         <div className=\"post-content\">\n//                             {post.content.split('\\n').map((paragraph, i) => (\n//                                 <p key={i}>{paragraph}</p>\n//                             ))}\n//                         </div>\n//                         <div className=\"post-meta\">\n//                         <span className=\"author\">Author: {post.author_name}</span>\n//                             <span className=\"separator\"> | </span>\n//                             <span className=\"date\">\n//                                 {new Date(post.created_at).toLocaleDateString()},\n//                                 {new Date(post.created_at).toLocaleTimeString()}\n//                             </span>\n//                         </div>\n//                     </div>\n//                 ))\n//             ) : (\n//                 <div className=\"no-posts-message\">\n//                     <p>No posts found. Create the first one!</p>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PostList;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","PostList","posts","onDelete","isProfilePage","currentUserId","parseInt","localStorage","getItem","currentUserRole","handleDeletePost","postId","confirmDelete","window","confirm","error","alert","message","className","children","map","post","title","fileName","_jsxFileName","lineNumber","columnNumber","author_id","onClick","id","content","split","p","i","author_name","Date","created_at","toLocaleDateString","year","month","day","hour","minute","_c","$RefreshReg$"],"sources":["/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/Posts/PostList.js"],"sourcesContent":["import React from 'react';\nimport '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css';\n\nconst PostList = ({ posts, onDelete, isProfilePage }) => {\n    const currentUserId = parseInt(localStorage.getItem('userId'), 10);\n    const currentUserRole = localStorage.getItem('userRole');\n\n    const handleDeletePost = async (postId) => {\n        const confirmDelete = window.confirm(\"Are you sure you want to delete this post?\");\n        if (!confirmDelete) return;\n\n        try {\n            await onDelete(postId); // Передаем управление родительскому компоненту\n        } catch (error) {\n            alert(error.message || 'Failed to delete post');\n        }\n    };\n\n    return (\n        <div className=\"post-list-container\">\n            {posts.map(post => (\n                <div key={post.id} className=\"post-item\">\n                    <div className=\"post-header\">\n                        <h3>{post.title}</h3>\n                        {(isProfilePage || currentUserId === post.author_id || currentUserRole === 'admin') && (\n                            <button\n                                onClick={() => handleDeletePost(post.id)}\n                                className=\"delete-button\"\n                                title={currentUserRole === 'admin' \n                                    ? \"Delete post (admin)\" \n                                    : \"Delete your post\"}\n                            >\n                                ✕\n                            </button>\n                        )}\n                    </div>\n                    <div className=\"post-content\">\n                        {post.content.split('\\n').map((p, i) => (\n                            <p key={i}>{p}</p>\n                        ))}\n                    </div>\n                    <div className=\"post-meta\">\n                        <span className=\"author\">{post.author_name}</span>\n                        <span className=\"separator\">•</span>\n                        <span className=\"timestamp\">\n                            {new Date(post.created_at).toLocaleDateString('en-US', {\n                                year: 'numeric',\n                                month: 'long',\n                                day: 'numeric',\n                                hour: '2-digit',\n                                minute: '2-digit'\n                            })}\n                        </span>\n                        {currentUserRole === 'admin' && post.author_id !== currentUserId && (\n                            <span className=\"admin-badge\">(admin action)</span>\n                        )}\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default PostList;\n// import React, { useEffect, useState, useCallback } from 'react';\n// import axios from 'axios';\n// import '../MainLayout.css';\n\n// const PostList = ({ refreshTrigger }) => {\n//     const [posts, setPosts] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     const currentUserId = parseInt(localStorage.getItem('userId'), 10);\n//     const currentUserRole = localStorage.getItem('userRole');\n//     const token = localStorage.getItem('token');\n\n//     const fetchPosts = useCallback(async () => {\n//         try {\n//             setLoading(true);\n//             setError(null);\n\n//             const response = await axios.get('http://localhost:8081/api/v1/posts', {\n//                 headers: { \n//                     'Accept': 'application/json',\n//                     'Authorization': `Bearer ${token}`\n//                 }\n//             });\n\n//             const processedPosts = response.data.data.map(post => ({\n//                 ...post,\n//                 id: parseInt(post.id, 10),\n//                 author_id: parseInt(post.author_id, 10),\n//                 created_at: new Date(post.created_at).toISOString()\n//             }));\n\n//             setPosts(processedPosts);\n//         } catch (err) {\n//             setError(err.response?.data?.error || err.message);\n//         } finally {\n//             setLoading(false);\n//         }\n//     }, [token]);\n\n//     useEffect(() => {\n//         fetchPosts();\n//     }, [fetchPosts, refreshTrigger]);\n\n//     const handleDeletePost = async (postId, authorId) => {\n//         const confirmDelete = window.confirm(\"Are you sure you want to delete this post?\");\n//         if (!confirmDelete) return;\n\n//         try {\n//             await axios.delete(`http://localhost:8081/api/v1/posts/${postId}`, {\n//                 headers: { \n//                     'Authorization': `Bearer ${token}`,\n//                     'Content-Type': 'application/json'\n//                 }\n//             });\n\n//             setPosts(prev => prev.filter(post => post.id !== postId));\n            \n//         } catch (error) {\n//             console.error('Delete post error:', error);\n//             const errorMessage = error.response?.data?.error || \n//                                error.response?.data?.message || \n//                                'Failed to delete post';\n            \n//             alert(errorMessage);\n//             await fetchPosts();\n//         }\n//     };\n\n//     return (\n//         <div className=\"post-list-container\">\n//             {loading && <div className=\"loading-indicator\">Loading posts...</div>}\n//             {error && <div className=\"error-message\">Error: {error}</div>}\n\n//             {posts.map(post => (\n//                 <div key={post.id} className=\"post-item\">\n//                     <div className=\"post-header\">\n//                         <h3>{post.title}</h3>\n//                         {(currentUserId === post.author_id || currentUserRole === 'admin') && (\n//                             <button\n//                                 onClick={() => handleDeletePost(post.id, post.author_id)}\n//                                 className=\"delete-button\"\n//                                 title={currentUserRole === 'admin' \n//                                     ? \"Delete post (admin)\" \n//                                     : \"Delete your post\"}\n//                             >\n//                                 ✕\n//                             </button>\n//                         )}\n//                     </div>\n//                     <div className=\"post-content\">\n//                         {post.content.split('\\n').map((p, i) => (\n//                             <p key={i}>{p}</p>\n//                         ))}\n//                     </div>\n//                     <div className=\"post-meta\">\n//                         <span className=\"author\">{post.author_name}</span>\n//                         <span className=\"separator\">•</span>\n//                         <span className=\"timestamp\">\n//                             {new Date(post.created_at).toLocaleDateString('en-US', {\n//                                 year: 'numeric',\n//                                 month: 'long',\n//                                 day: 'numeric',\n//                                 hour: '2-digit',\n//                                 minute: '2-digit'\n//                             })}\n//                         </span>\n//                         {currentUserRole === 'admin' && post.author_id !== currentUserId && (\n//                             <span className=\"admin-badge\">(admin action)</span>\n//                         )}\n//                     </div>\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// };\n\n// export default PostList;\n\n// import React, { useEffect, useState, useCallback } from 'react';\n// import axios from 'axios';\n// import '../MainLayout.css';\n\n// const PostList = ({ refreshTrigger }) => {\n//     const [posts, setPosts] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     const handleDeletePost = async (postId, authorId) => {\n//         const confirmDelete = window.confirm(\"Are you sure you want to delete this post?\");\n//         if (!confirmDelete) return;\n    \n//         const token = localStorage.getItem('token');\n//         const currentUserId = parseInt(localStorage.getItem('userId'), 10);\n        \n//         console.log('Trying to delete post:', postId);\n//         console.log('Current user:', currentUserId, 'Post author:', authorId);\n    \n//         if (currentUserId !== authorId) {\n//             alert(\"You can only delete your own posts\");\n//             return;\n//         }\n    \n//         try {\n//             await axios.delete(`http://localhost:8081/api/v1/posts/${postId}`, {\n//                 headers: {\n//                     'Authorization': `Bearer ${token}`\n//                 }\n//             });\n    \n//             setPosts(prev => prev.filter(post => post.id !== postId));\n//             alert(\"Post deleted successfully\");\n//         } catch (error) {\n//             console.error('Delete post error:', error);\n//             alert(error.response?.data?.error || 'Failed to delete post');\n//         }\n//     };\n    \n\n//     const fetchPosts = useCallback(async () => {\n//         try {\n//             setLoading(true);\n//             setError(null);\n\n//             const response = await axios.get('http://localhost:8081/api/v1/posts', {\n//                 headers: {\n//                     'Accept': 'application/json'\n//                 }\n//             });\n\n//             const processedPosts = response.data.data.map(post => ({\n//                 ...post,\n//                 author_id: parseInt(post.author_id, 10),\n//                 created_at: new Date(post.created_at).toISOString()\n//             }));\n\n//             setPosts(processedPosts);\n//         } catch (err) {\n//             setError(err.response?.data?.error || err.message);\n//         } finally {\n//             setLoading(false);\n//         }\n//     }, []);\n\n//     useEffect(() => {\n//         fetchPosts();\n//     }, [fetchPosts, refreshTrigger]);\n\n//     const currentUserId = parseInt(localStorage.getItem('userId'), 10);\n\n//     return (\n//         <div className=\"post-list-container\">\n//             {posts.map(post => (\n//                 <div key={post.id} className=\"post-item\">\n//                     <div className=\"post-header\">\n//                         <h3>{post.title}</h3>\n//                         {(() => {\n//     console.log('Текущий пользователь:', currentUserId);\n//     console.log('Автор поста:', post.author_id);\n//     return currentUserId === post.author_id ? (\n//       <button\n//         onClick={() => handleDeletePost(post.id, post.author_id)}\n//         className=\"delete-button\"\n//         title=\"Delete post\"\n//       >\n//         ✕\n//       </button>\n//     ) : null;\n//   })()}\n//                     </div>\n//                     <div className=\"post-content\">\n//                         {post.content.split('\\n').map((p, i) => (\n//                             <p key={i}>{p}</p>\n//                         ))}\n//                     </div>\n//                     <div className=\"post-meta\">\n//                         <span>By {post.author_name}</span>\n//                         <span> • </span>\n//                         <span>\n//                             {new Date(post.created_at).toLocaleDateString('en-US', {\n//                                 year: 'numeric',\n//                                 month: 'long',\n//                                 day: 'numeric',\n//                                 hour: '2-digit',\n//                                 minute: '2-digit'\n//                             })}\n//                         </span>\n//                     </div>\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// };\n\n// export default PostList;\n// import React, { useEffect, useState, useCallback } from 'react';\n// import axios from 'axios';\n// import '../MainLayout.css';\n\n// const PostList = ({ refreshTrigger }) => {\n//     const [posts, setPosts] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     const handleDeletePost = async (postId, authorId) => {\n//         const confirmDelete = window.confirm(\"Are you sure you want to delete this post?\");\n//         if (!confirmDelete) return;\n\n//         try {\n//             const token = localStorage.getItem('token');\n//             const currentUserId = parseInt(localStorage.getItem('userId'));\n//             if (!currentUserId || currentUserId !== authorId) {\n//                 alert(\"You can only delete your own posts\");\n//                 return;\n//             }\n\n//             await axios.delete(`http://localhost:8081/api/v1/posts/${postId}`, {\n//                 headers: {\n//                     'Authorization': `Bearer ${token}`\n//                 }\n//             })\n\n//             fetchPosts();\n//             alert(\"Post deleted successfully\");\n//         } catch (error) {\n//             console.error('Delete post error:', error);\n//             alert(error.response?.data?.error || 'Failed to delete post');\n//         }\n//     };\n\n//     const fetchPosts = useCallback(async () => {\n//         let isMounted = true;\n\n//         try {\n//             setLoading(true);\n//             setError(null);\n\n//             const token = localStorage.getItem('token');\n//             if (!token) {\n//                 throw new Error('Authentication token not found');\n//             }\n\n//             const response = await axios.get('http://localhost:8081/api/v1/posts', {\n//                 headers: {\n//                     'Authorization': `Bearer ${token}`,\n//                     'Accept': 'application/json'\n//                 }\n//             });\n\n//             if (!isMounted) return;\n\n//             const postsData = response.data?.data || response.data;\n\n//             if (!postsData || !Array.isArray(postsData)) {\n//                 throw new Error('Invalid data structure received from server');\n//             }\n\n//             const processedPosts = await Promise.all(\n//                 postsData.map(async (post) => {\n//                     let username = `User ${post.author_id}`;\n\n//                     if (!post.author_name) {\n//                         try {\n//                             const userResponse = await axios.get(\n//                                 `http://localhost:8081/api/users/${post.author_id}`,\n//                                 { \n//                                     headers: { \n//                                         'Authorization': `Bearer ${token}` \n//                                     } \n//                                 }\n//                             );\n//                             username = userResponse.data.username || username;\n//                         } catch (err) {\n//                             console.error('Failed to fetch username:', err);\n//                         }\n//                     } else {\n//                         username = post.author_name;\n//                     }\n\n//                     return {\n//                         id: post.id,\n//                         title: post.title || 'Untitled Post',\n//                         content: post.content || 'No content available',\n//                         author_id: post.author_id,\n//                         author_name: username,\n//                         created_at: post.created_at || new Date().toISOString()\n//                     };\n//                 })\n//             );\n\n//             if (isMounted) {\n//                 setPosts(processedPosts);\n//             }\n//         } catch (err) {\n//             if (isMounted) {\n//                 console.error('Post fetch error:', {\n//                     error: err,\n//                     response: err.response\n//                 });\n\n//                 setError(\n//                     err.response?.data?.error ||\n//                     err.message ||\n//                     'Failed to load posts. Please try again later.'\n//                 );\n//             }\n//         } finally {\n//             if (isMounted) {\n//                 setLoading(false);\n//             }\n//         }\n\n//         return () => { isMounted = false };\n//     }, []);\n\n//     useEffect(() => {\n//         const abortController = new AbortController();\n//         fetchPosts();\n//         return () => {\n//             abortController.abort();\n//         };\n//     }, [fetchPosts, refreshTrigger]);\n\n//     if (loading) {\n//         return (\n//             <div className=\"loading-container\">\n//                 <div className=\"spinner\"></div>\n//                 <p>Loading posts...</p>\n//             </div>\n//         );\n//     }\n\n//     if (error) {\n//         return (\n//             <div className=\"error-container\">\n//                 <p className=\"error-message\">{error}</p>\n//                 <button\n//                     onClick={fetchPosts}\n//                     className=\"retry-button\"\n//                 >\n//                     Retry\n//                 </button>\n//             </div>\n//         );\n//     }\n\n//     return (\n//         <div className=\"post-list-container\">\n//             {posts.length > 0 ? (\n//                 [...posts].reverse().map((post) => (\n//                     <div key={`post-${post.id}`} className=\"post-item\">\n//                         <div className=\"post-header\">\n//                             <h3>{post.title}</h3>\n//                             {post.author_id === Number(localStorage.getItem('userId')) && (\n//                                 <button\n//                                     onClick={() => handleDeletePost(post.id, post.author_id)}\n//                                     className=\"delete-button\"\n//                                     title=\"Delete post\"\n//                                 >\n//                                     Delete\n//                                 </button>\n//                             )}\n//                         </div>\n//                         <div className=\"post-content\">\n//                             {post.content.split('\\n').map((paragraph, i) => (\n//                                 <p key={i}>{paragraph}</p>\n//                             ))}\n//                         </div>\n//                         <div className=\"post-meta\">\n//                         <span className=\"author\">Author: {post.author_name}</span>\n//                             <span className=\"separator\"> | </span>\n//                             <span className=\"date\">\n//                                 {new Date(post.created_at).toLocaleDateString()},\n//                                 {new Date(post.created_at).toLocaleTimeString()}\n//                             </span>\n//                         </div>\n//                     </div>\n//                 ))\n//             ) : (\n//                 <div className=\"no-posts-message\">\n//                     <p>No posts found. Create the first one!</p>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PostList;"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}