{"ast":null,"code":"var _jsxFileName = \"/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/Chat/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js';\nimport '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const {\n    messages,\n    sendMessage,\n    connectionStatus,\n    connect,\n    disconnect,\n    error: wsError\n  } = useWebSocket('ws://localhost:8082/ws', {\n    manual: true\n  });\n\n  // Проверка авторизации при монтировании\n  useEffect(() => {\n    const checkConnection = () => {\n      if (connectionStatus === 'disconnected' && isLoggedIn && !reconnectTimeoutRef.current) {\n        console.log('Triggering reconnect...');\n        connect();\n      }\n    };\n    const interval = setInterval(checkConnection, 5000);\n    return () => clearInterval(interval);\n  }, [connectionStatus, isLoggedIn, connect]);\n\n  // Автоподключение и управление соединением\n  useEffect(() => {\n    if (isLoggedIn) {\n      connect();\n    }\n    return () => {\n      if (isLoggedIn) {\n        disconnect(true);\n      }\n    };\n  }, [isLoggedIn, connect, disconnect]);\n\n  // Механизм переподключения\n  useEffect(() => {\n    const reconnectInterval = setInterval(() => {\n      if (connectionStatus === 'disconnected' && isLoggedIn) {\n        connect();\n      }\n    }, 5000);\n    return () => clearInterval(reconnectInterval);\n  }, [connectionStatus, isLoggedIn, connect]);\n  const handleLogin = async e => {\n    e.preventDefault();\n    try {\n      const response = await axios.post('http://localhost:8080/login', {\n        email,\n        password\n      });\n      const {\n        token,\n        userId,\n        username\n      } = response.data;\n      if (!token || !userId || !username) {\n        throw new Error('Invalid server response');\n      }\n      localStorage.setItem('token', token);\n      localStorage.setItem('userId', userId);\n      localStorage.setItem('username', username);\n      setIsLoggedIn(true);\n      setErrorMessage('');\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error(\"Login error:\", error);\n      setErrorMessage(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed. Please try again.');\n      localStorage.clear();\n    }\n  };\n  const handleSendMessage = e => {\n    e.preventDefault();\n    const userId = localStorage.getItem('userId');\n    const username = localStorage.getItem('username');\n    if (!userId || !username) {\n      setErrorMessage('User session expired');\n      localStorage.clear();\n      setIsLoggedIn(false);\n      return;\n    }\n    if (!message.trim()) {\n      setErrorMessage('Cannot send empty message');\n      return;\n    }\n    sendMessage({\n      content: message.trim(),\n      userId: parseInt(userId, 10),\n      username\n    });\n    setMessage('');\n    setErrorMessage('');\n  };\n  if (!isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auth-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Login to use Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleLogin,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            value: email,\n            onChange: e => setEmail(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            value: password,\n            onChange: e => setPassword(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn-primary\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-message\",\n          children: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"connection-status\",\n      children: [\"Connection Status: \", connectionStatus, wsError && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"error-indicator\",\n        children: \" \\u2022 Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), wsError && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: wsError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-panel\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-username\",\n          children: [msg.username, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-content\",\n          children: msg.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-timestamp\",\n          children: new Date(msg.timestamp).toLocaleTimeString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSendMessage,\n      className: \"message-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        placeholder: \"Type your message...\",\n        className: \"message-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"send-button\",\n        disabled: connectionStatus !== 'connected',\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"KhHq7wSeMUT/yb9LyImGQcUPxUI=\", false, function () {\n  return [useWebSocket];\n});\n_c = Chat;\nexport default Chat;\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js'; // путь поменяй если другой\n// import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css'; // путь к стилям\n\n// const Chat = () => {\n//   const [message, setMessage] = useState('');\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [errorMessage, setErrorMessage] = useState('');\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n//   const [userId, setUserId] = useState(null);\n//   const [username, setUsername] = useState(null);\n\n//   const {\n//     messages,\n//     sendMessage,\n//     connectionStatus,\n//     connect, // добавляем ручное подключение\n//     disconnect\n//   } = useWebSocket('ws://localhost:8082/ws', { manual: true }); // manual mode!\n\n//   useEffect(() => {\n//     const storedUserId = localStorage.getItem('userId');\n//     const storedUsername = localStorage.getItem('username');\n//     if (storedUserId && storedUsername) {\n//       setUserId(storedUserId);\n//       setUsername(storedUsername);\n//       setIsLoggedIn(true);\n//       connect(); // подключаем WebSocket только если есть данные\n//     }\n//   }, [connect]);\n\n//   const handleLogin = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       const response = await axios.post('http://localhost:8080/login', {\n//         email,\n//         password,\n//       });\n\n//       if (response.status === 200) {\n//         const { userId, username, token } = response.data;\n\n//         if (!userId || !username || username === 'undefined') {\n//           console.warn('Invalid user session, cannot connect');\n//           setErrorMessage('Login failed: server did not provide user info.');\n//           return;\n//         }\n\n//         localStorage.setItem('userId', userId);\n//         localStorage.setItem('username', username);\n//         localStorage.setItem('token', token);\n\n//         setUserId(userId);\n//         setUsername(username);\n//         setIsLoggedIn(true);\n\n//         connect(); // подключаем WebSocket после логина\n\n//       }\n//     } catch (error) {\n//       console.error(error);\n//       setErrorMessage('Login failed. Please check your credentials.');\n//     }\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     if (!message.trim() || !username) {\n//       console.warn('Cannot send empty message or missing username');\n//       return;\n//     }\n\n//     sendMessage({\n//       user_id:  userId,\n//       username: username,\n//       content: message.trim(),\n//     });\n\n//     setMessage('');\n//   };\n\n//   if (!isLoggedIn) {\n//     return (\n//       <div>\n//         <h2>Login to use Chat</h2>\n//         <form onSubmit={handleLogin}>\n//           <div>\n//             <label>Email</label>\n//             <input\n//               type=\"email\"\n//               value={email}\n//               onChange={(e) => setEmail(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <div>\n//             <label>Password</label>\n//             <input\n//               type=\"password\"\n//               value={password}\n//               onChange={(e) => setPassword(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <button type=\"submit\">Login</button>\n//         </form>\n\n//         {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"connection-status\">\n//         Status: {connectionStatus}\n//       </div>\n\n//       <div className=\"messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message\">\n//             <span className=\"user\">{msg.username}:</span>  \n//             <span className=\"content\">{msg.content}</span>\n//           </div>\n//         ))}\n//       </div>\n\n//       <form onSubmit={handleSubmit} className=\"chat-form\">\n//         <input\n//           type=\"text\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//           placeholder=\"Type your message...\"\n//           disabled={connectionStatus !== 'connected'}\n//           className=\"chat-input\"\n//         />\n//         <button\n//           type=\"submit\"\n//           disabled={connectionStatus !== 'connected' || !message.trim()}\n//           className=\"chat-send-button\"\n//         >\n//           Send\n//         </button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","axios","useWebSocket","jsxDEV","_jsxDEV","Chat","_s","message","setMessage","email","setEmail","password","setPassword","errorMessage","setErrorMessage","isLoggedIn","setIsLoggedIn","messages","sendMessage","connectionStatus","connect","disconnect","error","wsError","manual","checkConnection","reconnectTimeoutRef","current","console","log","interval","setInterval","clearInterval","reconnectInterval","handleLogin","e","preventDefault","response","post","token","userId","username","data","Error","localStorage","setItem","_error$response","_error$response$data","clear","handleSendMessage","getItem","trim","content","parseInt","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","required","map","msg","index","Date","timestamp","toLocaleTimeString","placeholder","disabled","_c","$RefreshReg$"],"sources":["/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/Chat/Chat.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js';\nimport '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css';\n\nconst Chat = () => {\n  const [message, setMessage] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  \n  const {\n    messages,\n    sendMessage,\n    connectionStatus,\n    connect,\n    disconnect,\n    error: wsError\n  } = useWebSocket('ws://localhost:8082/ws', { manual: true });\n\n  // Проверка авторизации при монтировании\n  useEffect(() => {\n    const checkConnection = () => {\n      if (\n        connectionStatus === 'disconnected' && \n        isLoggedIn &&\n        !reconnectTimeoutRef.current\n      ) {\n        console.log('Triggering reconnect...');\n        connect();\n      }\n    };\n  \n    const interval = setInterval(checkConnection, 5000);\n    return () => clearInterval(interval);\n  }, [connectionStatus, isLoggedIn, connect]);\n\n  // Автоподключение и управление соединением\n  useEffect(() => {\n    if (isLoggedIn) {\n      connect();\n    }\n    \n    return () => {\n      if (isLoggedIn) {\n        disconnect(true);\n      }\n    };\n  }, [isLoggedIn, connect, disconnect]);\n\n  // Механизм переподключения\n  useEffect(() => {\n    const reconnectInterval = setInterval(() => {\n      if (connectionStatus === 'disconnected' && isLoggedIn) {\n        connect();\n      }\n    }, 5000);\n\n    return () => clearInterval(reconnectInterval);\n  }, [connectionStatus, isLoggedIn, connect]);\n\n  const handleLogin = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await axios.post('http://localhost:8080/login', {\n        email,\n        password,\n      });\n\n      const { token, userId, username } = response.data;\n      \n      if (!token || !userId || !username) {\n        throw new Error('Invalid server response');\n      }\n\n      localStorage.setItem('token', token);\n      localStorage.setItem('userId', userId);\n      localStorage.setItem('username', username);\n      \n      setIsLoggedIn(true);\n      setErrorMessage('');\n\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      setErrorMessage(error.response?.data?.message || 'Login failed. Please try again.');\n      localStorage.clear();\n    }\n  };\n\n  const handleSendMessage = (e) => {\n    e.preventDefault();\n    \n    const userId = localStorage.getItem('userId');\n    const username = localStorage.getItem('username');\n    \n    if (!userId || !username) {\n      setErrorMessage('User session expired');\n      localStorage.clear();\n      setIsLoggedIn(false);\n      return;\n    }\n\n    if (!message.trim()) {\n      setErrorMessage('Cannot send empty message');\n      return;\n    }\n\n    sendMessage({\n      content: message.trim(),\n      userId: parseInt(userId, 10),\n      username,\n    });\n\n    setMessage('');\n    setErrorMessage('');\n  };\n\n  if (!isLoggedIn) {\n    return (\n      <div className=\"auth-container\">\n        <h2>Login to use Chat</h2>\n        <form onSubmit={handleLogin}>\n          <div className=\"form-group\">\n            <label>Email</label>\n            <input\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              required\n            />\n          </div>\n          <div className=\"form-group\">\n            <label>Password</label>\n            <input\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              required\n            />\n          </div>\n          <button type=\"submit\" className=\"btn-primary\">Login</button>\n          {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n        </form>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"connection-status\">\n        Connection Status: {connectionStatus}\n        {wsError && <span className=\"error-indicator\"> • Error</span>}\n      </div>\n      \n      {wsError && <p className=\"error-message\">{wsError}</p>}\n\n      <div className=\"messages-panel\">\n        {messages.map((msg, index) => (\n          <div key={index} className=\"message\">\n            <span className=\"message-username\">{msg.username}:</span>\n            <span className=\"message-content\">{msg.content}</span>\n            <span className=\"message-timestamp\">\n              {new Date(msg.timestamp).toLocaleTimeString()}\n            </span>\n          </div>\n        ))}\n      </div>\n\n      <form onSubmit={handleSendMessage} className=\"message-form\">\n        <input\n          type=\"text\"\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n          placeholder=\"Type your message...\"\n          className=\"message-input\"\n        />\n        <button \n          type=\"submit\" \n          className=\"send-button\"\n          disabled={connectionStatus !== 'connected'}\n        >\n          Send\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default Chat;\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js'; // путь поменяй если другой\n// import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css'; // путь к стилям\n\n// const Chat = () => {\n//   const [message, setMessage] = useState('');\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [errorMessage, setErrorMessage] = useState('');\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n//   const [userId, setUserId] = useState(null);\n//   const [username, setUsername] = useState(null);\n\n//   const {\n//     messages,\n//     sendMessage,\n//     connectionStatus,\n//     connect, // добавляем ручное подключение\n//     disconnect\n//   } = useWebSocket('ws://localhost:8082/ws', { manual: true }); // manual mode!\n\n//   useEffect(() => {\n//     const storedUserId = localStorage.getItem('userId');\n//     const storedUsername = localStorage.getItem('username');\n//     if (storedUserId && storedUsername) {\n//       setUserId(storedUserId);\n//       setUsername(storedUsername);\n//       setIsLoggedIn(true);\n//       connect(); // подключаем WebSocket только если есть данные\n//     }\n//   }, [connect]);\n\n//   const handleLogin = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       const response = await axios.post('http://localhost:8080/login', {\n//         email,\n//         password,\n//       });\n\n//       if (response.status === 200) {\n//         const { userId, username, token } = response.data;\n\n//         if (!userId || !username || username === 'undefined') {\n//           console.warn('Invalid user session, cannot connect');\n//           setErrorMessage('Login failed: server did not provide user info.');\n//           return;\n//         }\n\n//         localStorage.setItem('userId', userId);\n//         localStorage.setItem('username', username);\n//         localStorage.setItem('token', token);\n\n//         setUserId(userId);\n//         setUsername(username);\n//         setIsLoggedIn(true);\n\n//         connect(); // подключаем WebSocket после логина\n\n//       }\n//     } catch (error) {\n//       console.error(error);\n//       setErrorMessage('Login failed. Please check your credentials.');\n//     }\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     if (!message.trim() || !username) {\n//       console.warn('Cannot send empty message or missing username');\n//       return;\n//     }\n\n//     sendMessage({\n//       user_id:  userId,\n//       username: username,\n//       content: message.trim(),\n//     });\n\n//     setMessage('');\n//   };\n\n//   if (!isLoggedIn) {\n//     return (\n//       <div>\n//         <h2>Login to use Chat</h2>\n//         <form onSubmit={handleLogin}>\n//           <div>\n//             <label>Email</label>\n//             <input\n//               type=\"email\"\n//               value={email}\n//               onChange={(e) => setEmail(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <div>\n//             <label>Password</label>\n//             <input\n//               type=\"password\"\n//               value={password}\n//               onChange={(e) => setPassword(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <button type=\"submit\">Login</button>\n//         </form>\n\n//         {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"connection-status\">\n//         Status: {connectionStatus}\n//       </div>\n\n//       <div className=\"messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message\">\n//             <span className=\"user\">{msg.username}:</span>  \n//             <span className=\"content\">{msg.content}</span>\n//           </div>\n//         ))}\n//       </div>\n\n//       <form onSubmit={handleSubmit} className=\"chat-form\">\n//         <input\n//           type=\"text\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//           placeholder=\"Type your message...\"\n//           disabled={connectionStatus !== 'connected'}\n//           className=\"chat-input\"\n//         />\n//         <button\n//           type=\"submit\"\n//           disabled={connectionStatus !== 'connected' || !message.trim()}\n//           className=\"chat-send-button\"\n//         >\n//           Send\n//         </button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default Chat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}