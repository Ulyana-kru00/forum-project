{"ast":null,"code":"var _jsxFileName = \"/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/Chat/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js';\nimport '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [messageInput, setMessageInput] = useState('');\n  const [userData, setUserData] = useState(null);\n  const token = localStorage.getItem('token');\n  const wsUrl = `ws://localhost:8082/ws`;\n  const {\n    messages,\n    sendMessage,\n    connectionStatus,\n    error\n  } = useWebSocket(wsUrl, token);\n\n  // Загрузка данных пользователя при монтировании\n  useEffect(() => {\n    const userId = localStorage.getItem('userId');\n    const username = localStorage.getItem('username');\n    if (userId && username) {\n      setUserData({\n        id: userId,\n        username\n      });\n    }\n  }, []);\n\n  // Обработка ошибок\n  useEffect(() => {\n    if (error) {\n      console.error('Chat error:', error);\n    }\n  }, [error]);\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (messageInput.trim() && userData) {\n      sendMessage({\n        Text: messageInput,\n        UserID: userData.id,\n        Username: userData.username,\n        CreatedAt: new Date().toISOString()\n      });\n      setMessageInput('');\n    }\n  };\n  if (!userData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-warning\",\n        children: \"Please login to access the chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Global Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `connection-status ${connectionStatus}`,\n        children: [\"Status: \", connectionStatus.toUpperCase()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-list\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.UserID === userData.id ? 'own-message' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"username\",\n            children: message.Username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"timestamp\",\n            children: new Date(message.CreatedAt).toLocaleTimeString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: message.Text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"message-form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: messageInput,\n        onChange: e => setMessageInput(e.target.value),\n        placeholder: \"Type your message...\",\n        disabled: connectionStatus !== 'connected',\n        \"aria-label\": \"Type your message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !messageInput.trim() || connectionStatus !== 'connected',\n        className: \"send-button\",\n        children: connectionStatus === 'connected' ? 'Send' : 'Connecting...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"EQBAocV5pyfsigSl3i3UrpUvsZM=\", false, function () {\n  return [useWebSocket];\n});\n_c = Chat;\nexport default Chat;\n// import React, { useState } from 'react';\n// import useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js';\n// import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css';\n\n// const Chat = () => {\n//     const [message, setMessage] = useState('');\n//     const userId = localStorage.getItem('userId');\n//     const token = localStorage.getItem('token'); // Ensure this is the JWT token\n//     const wsUrl = `ws://localhost:8082/ws`;\n\n//     const { \n//         messages, \n//         sendMessage, \n//         connectionStatus \n//     } = useWebSocket(wsUrl);\n\n//     if (!userId) {\n//         return <div>Please login to use chat</div>;\n//     }\n\n//     const handleSubmit = (e) => {\n//         e.preventDefault();\n//         if (message.trim()) {\n//             sendMessage({\n//                 content: message,\n//                 userId: userId,\n//                 timestamp: new Date().toISOString()\n//             });\n//             setMessage('');\n//         }\n//     };\n\n//     return (\n//         <div className=\"chat-container\">\n//             <div className=\"connection-status\">\n//                 Status: {connectionStatus}\n//             </div>\n//             <div className=\"messages\">\n//                 {messages.map((msg, index) => (\n//                     <div key={index} className=\"message\">\n//                         <span className=\"user\">{msg.userId}</span>\n//                         <span className=\"content\">{msg.content}</span>\n//                     </div>\n//                 ))}\n//             </div>\n//             <form onSubmit={handleSubmit}>\n//                 <input\n//                     type=\"text\"\n//                     value={message}\n//                     onChange={(e) => setMessage(e.target.value)}\n//                     placeholder=\"Type your message...\"\n//                     disabled={connectionStatus !== 'connected'}\n//                 />\n//                 <button \n//                     type=\"submit\"\n//                     disabled={connectionStatus !== 'connected'}\n//                 >\n//                     Send\n//                 </button>\n//             </form>\n//         </div>\n//     );\n// };\n// export default Chat;\n// // import React, { useState, useEffect, useCallback } from 'react';\n// // import axios from 'axios';\n// //  import useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js'; // путь поменяй если другой\n// //  import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css'; // путь к стилям\n\n// // const Chat = () => {\n// //   const [message, setMessage] = useState('');\n// //   const [login, setLogin] = useState('');\n// //   const [password, setPassword] = useState('');\n// //   const [errorMessage, setErrorMessage] = useState('');\n// //   const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n// //   const {\n// //     messages,\n// //     sendMessage,\n// //     connectionStatus,\n// //     connect,\n// //     disconnect,\n// //     error: wsError\n// //   } = useWebSocket('http://localhost:8082/ws', { manual: true });\n\n// //   // Проверка авторизации при монтировании\n// //   useEffect(() => {\n// //     const token = localStorage.getItem('token');\n// //     const userId = localStorage.getItem('userId');\n// //     const username = localStorage.getItem('username');\n\n// //     if (token && userId && username) {\n// //       setIsLoggedIn(true);\n// //     }\n// //   }, []);\n\n// //   // Управление подключением WebSocket\n// //   useEffect(() => {\n// //     if (isLoggedIn) {\n// //       connect();\n// //     }\n\n// //     return () => {\n// //       if (isLoggedIn) {\n// //         disconnect(true);\n// //       }\n// //     };\n// //   }, [isLoggedIn, connect, disconnect]);\n\n// //   // Механизм переподключения\n// //   useEffect(() => {\n// //     const reconnectInterval = setInterval(() => {\n// //       if (connectionStatus === 'disconnected' && isLoggedIn) {\n// //         connect();\n// //       }\n// //     }, 5000);\n\n// //     return () => clearInterval(reconnectInterval);\n// //   }, [connectionStatus, isLoggedIn, connect]);\n\n// //   const handleLogin = async (e) => {\n// //     e.preventDefault();\n// //     try {\n// //       const response = await axios.post('http://localhost:8080/login', {\n// //         login,\n// //         password,\n// //       });\n\n// //       const { token, userId, username } = response.data;\n\n// //       if (!token || !userId || !username) {\n// //         throw new Error('Invalid server response');\n// //       }\n\n// //       localStorage.setItem('token', token);\n// //       localStorage.setItem('userId', userId);\n// //       localStorage.setItem('username', username);\n\n// //       setIsLoggedIn(true);\n// //       setErrorMessage('');\n\n// //     } catch (error) {\n// //       console.error(\"Login error:\", error);\n// //       setErrorMessage(error.response?.data?.message || 'Login failed. Please try again.');\n// //       localStorage.clear();\n// //     }\n// //   };\n\n// //   const handleSendMessage = (e) => {\n// //     e.preventDefault();\n\n// //     const userId = localStorage.getItem('userId');\n// //     const username = localStorage.getItem('username');\n\n// //     if (!userId || !username) {\n// //       setErrorMessage('User session expired');\n// //       localStorage.clear();\n// //       setIsLoggedIn(false);\n// //       return;\n// //     }\n\n// //     if (!message.trim()) {\n// //       setErrorMessage('Cannot send empty message');\n// //       return;\n// //     }\n\n// //     sendMessage({\n// //       content: message.trim(),\n// //       userId: parseInt(userId, 10),\n// //       username,\n// //     });\n\n// //     setMessage('');\n// //     setErrorMessage('');\n// //   };\n\n// //   if (!isLoggedIn) {\n// //     return (\n// //       <div className=\"auth-container\">\n// //         <h2>Login to use Chat</h2>\n// //         <form onSubmit={handleLogin}>\n// //           <div className=\"form-group\">\n// //             <label>Login</label>\n// //             <input\n// //               type=\"text\"\n// //               value={login}\n// //               onChange={(e) => setLogin(e.target.value)}\n// //               required\n// //             />\n// //           </div>\n// //           <div className=\"form-group\">\n// //             <label>Password</label>\n// //             <input\n// //               type=\"password\"\n// //               value={password}\n// //               onChange={(e) => setPassword(e.target.value)}\n// //               required\n// //             />\n// //           </div>\n// //           <button type=\"submit\" className=\"btn-primary\">Login</button>\n// //           {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n// //         </form>\n// //       </div>\n// //     );\n// //   }\n\n// //   return (\n// //     <div className=\"chat-container\">\n// //       <div className=\"connection-status\">\n// //         Connection Status: {connectionStatus}\n// //         {wsError && <span className=\"error-indicator\"> • Error</span>}\n// //       </div>\n\n// //       {wsError && <p className=\"error-message\">{wsError}</p>}\n\n// //       <div className=\"messages-panel\">\n// //         {messages.map((msg, index) => (\n// //           <div key={index} className=\"message\">\n// //             <span className=\"message-username\">{msg.username}:</span>\n// //             <span className=\"message-content\">{msg.content}</span>\n// //             <span className=\"message-timestamp\">\n// //               {new Date(msg.timestamp).toLocaleTimeString()}\n// //             </span>\n// //           </div>\n// //         ))}\n// //       </div>\n\n// //       <form onSubmit={handleSendMessage} className=\"message-form\">\n// //         <input\n// //           type=\"text\"\n// //           value={message}\n// //           onChange={(e) => setMessage(e.target.value)}\n// //           placeholder=\"Type your message...\"\n// //           className=\"message-input\"\n// //         />\n// //         <button \n// //           type=\"submit\" \n// //           className=\"send-button\"\n// //           disabled={connectionStatus !== 'connected'}\n// //         >\n// //           Send\n// //         </button>\n// //       </form>\n// //     </div>\n// //   );\n// // };\n\n// // export default Chat;\n// // import React, { useState, useEffect } from 'react';\n// // import axios from 'axios';\n// // import useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js'; // путь поменяй если другой\n// // import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css'; // путь к стилям\n\n// // const Chat = () => {\n// //   const [message, setMessage] = useState('');\n// //   const [email, setEmail] = useState('');\n// //   const [password, setPassword] = useState('');\n// //   const [errorMessage, setErrorMessage] = useState('');\n// //   const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n// //   const [userId, setUserId] = useState(null);\n// //   const [username, setUsername] = useState(null);\n\n// //   const {\n// //     messages,\n// //     sendMessage,\n// //     connectionStatus,\n// //     connect, // добавляем ручное подключение\n// //     disconnect\n// //   } = useWebSocket('ws://localhost:8082/ws', { manual: true }); // manual mode!\n\n// //   useEffect(() => {\n// //     const storedUserId = localStorage.getItem('userId');\n// //     const storedUsername = localStorage.getItem('username');\n// //     if (storedUserId && storedUsername) {\n// //       setUserId(storedUserId);\n// //       setUsername(storedUsername);\n// //       setIsLoggedIn(true);\n// //       connect(); // подключаем WebSocket только если есть данные\n// //     }\n// //   }, [connect]);\n\n// //   const handleLogin = async (e) => {\n// //     e.preventDefault();\n\n// //     try {\n// //       const response = await axios.post('http://localhost:8080/login', {\n// //         email,\n// //         password,\n// //       });\n\n// //       if (response.status === 200) {\n// //         const { userId, username, token } = response.data;\n\n// //         if (!userId || !username || username === 'undefined') {\n// //           console.warn('Invalid user session, cannot connect');\n// //           setErrorMessage('Login failed: server did not provide user info.');\n// //           return;\n// //         }\n\n// //         localStorage.setItem('userId', userId);\n// //         localStorage.setItem('username', username);\n// //         localStorage.setItem('token', token);\n\n// //         setUserId(userId);\n// //         setUsername(username);\n// //         setIsLoggedIn(true);\n\n// //         connect(); // подключаем WebSocket после логина\n\n// //       }\n// //     } catch (error) {\n// //       console.error(error);\n// //       setErrorMessage('Login failed. Please check your credentials.');\n// //     }\n// //   };\n\n// //   const handleSubmit = (e) => {\n// //     e.preventDefault();\n\n// //     if (!message.trim() || !username) {\n// //       console.warn('Cannot send empty message or missing username');\n// //       return;\n// //     }\n\n// //     sendMessage({\n// //       user_id:  userId,\n// //       username: username,\n// //       content: message.trim(),\n// //     });\n\n// //     setMessage('');\n// //   };\n\n// //   if (!isLoggedIn) {\n// //     return (\n// //       <div>\n// //         <h2>Login to use Chat</h2>\n// //         <form onSubmit={handleLogin}>\n// //           <div>\n// //             <label>Email</label>\n// //             <input\n// //               type=\"email\"\n// //               value={email}\n// //               onChange={(e) => setEmail(e.target.value)}\n// //               required\n// //             />\n// //           </div>\n// //           <div>\n// //             <label>Password</label>\n// //             <input\n// //               type=\"password\"\n// //               value={password}\n// //               onChange={(e) => setPassword(e.target.value)}\n// //               required\n// //             />\n// //           </div>\n// //           <button type=\"submit\">Login</button>\n// //         </form>\n\n// //         {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}\n// //       </div>\n// //     );\n// //   }\n\n// //   return (\n// //     <div className=\"chat-container\">\n// //       <div className=\"connection-status\">\n// //         Status: {connectionStatus}\n// //       </div>\n\n// //       <div className=\"messages\">\n// //         {messages.map((msg, index) => (\n// //           <div key={index} className=\"message\">\n// //             <span className=\"user\">{msg.username}:</span>  \n// //             <span className=\"content\">{msg.content}</span>\n// //           </div>\n// //         ))}\n// //       </div>\n\n// //       <form onSubmit={handleSubmit} className=\"chat-form\">\n// //         <input\n// //           type=\"text\"\n// //           value={message}\n// //           onChange={(e) => setMessage(e.target.value)}\n// //           placeholder=\"Type your message...\"\n// //           disabled={connectionStatus !== 'connected'}\n// //           className=\"chat-input\"\n// //         />\n// //         <button\n// //           type=\"submit\"\n// //           disabled={connectionStatus !== 'connected' || !message.trim()}\n// //           className=\"chat-send-button\"\n// //         >\n// //           Send\n// //         </button>\n// //       </form>\n// //     </div>\n// //   );\n// // };\n\n// // export default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useWebSocket","jsxDEV","_jsxDEV","Chat","_s","messageInput","setMessageInput","userData","setUserData","token","localStorage","getItem","wsUrl","messages","sendMessage","connectionStatus","error","userId","username","id","console","handleSubmit","e","preventDefault","trim","Text","UserID","Username","CreatedAt","Date","toISOString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toUpperCase","map","message","index","toLocaleTimeString","onSubmit","type","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/Chat/Chat.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js';\nimport '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css';\n\nconst Chat = () => {\n    const [messageInput, setMessageInput] = useState('');\n    const [userData, setUserData] = useState(null);\n    const token = localStorage.getItem('token');\n    const wsUrl = `ws://localhost:8082/ws`;\n\n    const {\n        messages,\n        sendMessage,\n        connectionStatus,\n        error\n    } = useWebSocket(wsUrl, token);\n\n    // Загрузка данных пользователя при монтировании\n    useEffect(() => {\n        const userId = localStorage.getItem('userId');\n        const username = localStorage.getItem('username');\n        if (userId && username) {\n            setUserData({ id: userId, username });\n        }\n    }, []);\n\n    // Обработка ошибок\n    useEffect(() => {\n        if (error) {\n            console.error('Chat error:', error);\n        }\n    }, [error]);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (messageInput.trim() && userData) {\n            sendMessage({\n                Text: messageInput,\n                UserID: userData.id,\n                Username: userData.username,\n                CreatedAt: new Date().toISOString()\n            });\n            setMessageInput('');\n        }\n    };\n\n    if (!userData) {\n        return (\n            <div className=\"chat-container\">\n                <div className=\"auth-warning\">\n                    Please login to access the chat\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"chat-container\">\n            <div className=\"chat-header\">\n                <h2>Global Chat</h2>\n                <div className={`connection-status ${connectionStatus}`}>\n                    Status: {connectionStatus.toUpperCase()}\n                </div>\n            </div>\n\n            <div className=\"messages-list\">\n                {messages.map((message, index) => (\n                    <div key={index} className={`message ${message.UserID === userData.id ? 'own-message' : ''}`}>\n                        <div className=\"message-header\">\n                            <span className=\"username\">{message.Username}</span>\n                            <span className=\"timestamp\">\n                                {new Date(message.CreatedAt).toLocaleTimeString()}\n                            </span>\n                        </div>\n                        <div className=\"message-content\">\n                            {message.Text}\n                        </div>\n                    </div>\n                ))}\n            </div>\n\n            <form className=\"message-form\" onSubmit={handleSubmit}>\n                <input\n                    type=\"text\"\n                    value={messageInput}\n                    onChange={(e) => setMessageInput(e.target.value)}\n                    placeholder=\"Type your message...\"\n                    disabled={connectionStatus !== 'connected'}\n                    aria-label=\"Type your message\"\n                />\n                <button\n                    type=\"submit\"\n                    disabled={!messageInput.trim() || connectionStatus !== 'connected'}\n                    className=\"send-button\"\n                >\n                    {connectionStatus === 'connected' ? 'Send' : 'Connecting...'}\n                </button>\n            </form>\n\n            {error && (\n                <div className=\"error-message\">\n                    Error: {error}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Chat;\n// import React, { useState } from 'react';\n// import useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js';\n// import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css';\n\n// const Chat = () => {\n//     const [message, setMessage] = useState('');\n//     const userId = localStorage.getItem('userId');\n//     const token = localStorage.getItem('token'); // Ensure this is the JWT token\n//     const wsUrl = `ws://localhost:8082/ws`;\n    \n//     const { \n//         messages, \n//         sendMessage, \n//         connectionStatus \n//     } = useWebSocket(wsUrl);\n\n//     if (!userId) {\n//         return <div>Please login to use chat</div>;\n//     }\n\n//     const handleSubmit = (e) => {\n//         e.preventDefault();\n//         if (message.trim()) {\n//             sendMessage({\n//                 content: message,\n//                 userId: userId,\n//                 timestamp: new Date().toISOString()\n//             });\n//             setMessage('');\n//         }\n//     };\n\n//     return (\n//         <div className=\"chat-container\">\n//             <div className=\"connection-status\">\n//                 Status: {connectionStatus}\n//             </div>\n//             <div className=\"messages\">\n//                 {messages.map((msg, index) => (\n//                     <div key={index} className=\"message\">\n//                         <span className=\"user\">{msg.userId}</span>\n//                         <span className=\"content\">{msg.content}</span>\n//                     </div>\n//                 ))}\n//             </div>\n//             <form onSubmit={handleSubmit}>\n//                 <input\n//                     type=\"text\"\n//                     value={message}\n//                     onChange={(e) => setMessage(e.target.value)}\n//                     placeholder=\"Type your message...\"\n//                     disabled={connectionStatus !== 'connected'}\n//                 />\n//                 <button \n//                     type=\"submit\"\n//                     disabled={connectionStatus !== 'connected'}\n//                 >\n//                     Send\n//                 </button>\n//             </form>\n//         </div>\n//     );\n// };\n// export default Chat;\n// // import React, { useState, useEffect, useCallback } from 'react';\n// // import axios from 'axios';\n// //  import useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js'; // путь поменяй если другой\n// //  import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css'; // путь к стилям\n\n// // const Chat = () => {\n// //   const [message, setMessage] = useState('');\n// //   const [login, setLogin] = useState('');\n// //   const [password, setPassword] = useState('');\n// //   const [errorMessage, setErrorMessage] = useState('');\n// //   const [isLoggedIn, setIsLoggedIn] = useState(false);\n  \n// //   const {\n// //     messages,\n// //     sendMessage,\n// //     connectionStatus,\n// //     connect,\n// //     disconnect,\n// //     error: wsError\n// //   } = useWebSocket('http://localhost:8082/ws', { manual: true });\n\n// //   // Проверка авторизации при монтировании\n// //   useEffect(() => {\n// //     const token = localStorage.getItem('token');\n// //     const userId = localStorage.getItem('userId');\n// //     const username = localStorage.getItem('username');\n    \n// //     if (token && userId && username) {\n// //       setIsLoggedIn(true);\n// //     }\n// //   }, []);\n\n// //   // Управление подключением WebSocket\n// //   useEffect(() => {\n// //     if (isLoggedIn) {\n// //       connect();\n// //     }\n    \n// //     return () => {\n// //       if (isLoggedIn) {\n// //         disconnect(true);\n// //       }\n// //     };\n// //   }, [isLoggedIn, connect, disconnect]);\n\n// //   // Механизм переподключения\n// //   useEffect(() => {\n// //     const reconnectInterval = setInterval(() => {\n// //       if (connectionStatus === 'disconnected' && isLoggedIn) {\n// //         connect();\n// //       }\n// //     }, 5000);\n\n// //     return () => clearInterval(reconnectInterval);\n// //   }, [connectionStatus, isLoggedIn, connect]);\n\n// //   const handleLogin = async (e) => {\n// //     e.preventDefault();\n// //     try {\n// //       const response = await axios.post('http://localhost:8080/login', {\n// //         login,\n// //         password,\n// //       });\n\n// //       const { token, userId, username } = response.data;\n      \n// //       if (!token || !userId || !username) {\n// //         throw new Error('Invalid server response');\n// //       }\n\n// //       localStorage.setItem('token', token);\n// //       localStorage.setItem('userId', userId);\n// //       localStorage.setItem('username', username);\n      \n// //       setIsLoggedIn(true);\n// //       setErrorMessage('');\n\n// //     } catch (error) {\n// //       console.error(\"Login error:\", error);\n// //       setErrorMessage(error.response?.data?.message || 'Login failed. Please try again.');\n// //       localStorage.clear();\n// //     }\n// //   };\n\n// //   const handleSendMessage = (e) => {\n// //     e.preventDefault();\n    \n// //     const userId = localStorage.getItem('userId');\n// //     const username = localStorage.getItem('username');\n    \n// //     if (!userId || !username) {\n// //       setErrorMessage('User session expired');\n// //       localStorage.clear();\n// //       setIsLoggedIn(false);\n// //       return;\n// //     }\n\n// //     if (!message.trim()) {\n// //       setErrorMessage('Cannot send empty message');\n// //       return;\n// //     }\n\n// //     sendMessage({\n// //       content: message.trim(),\n// //       userId: parseInt(userId, 10),\n// //       username,\n// //     });\n\n// //     setMessage('');\n// //     setErrorMessage('');\n// //   };\n\n// //   if (!isLoggedIn) {\n// //     return (\n// //       <div className=\"auth-container\">\n// //         <h2>Login to use Chat</h2>\n// //         <form onSubmit={handleLogin}>\n// //           <div className=\"form-group\">\n// //             <label>Login</label>\n// //             <input\n// //               type=\"text\"\n// //               value={login}\n// //               onChange={(e) => setLogin(e.target.value)}\n// //               required\n// //             />\n// //           </div>\n// //           <div className=\"form-group\">\n// //             <label>Password</label>\n// //             <input\n// //               type=\"password\"\n// //               value={password}\n// //               onChange={(e) => setPassword(e.target.value)}\n// //               required\n// //             />\n// //           </div>\n// //           <button type=\"submit\" className=\"btn-primary\">Login</button>\n// //           {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n// //         </form>\n// //       </div>\n// //     );\n// //   }\n\n// //   return (\n// //     <div className=\"chat-container\">\n// //       <div className=\"connection-status\">\n// //         Connection Status: {connectionStatus}\n// //         {wsError && <span className=\"error-indicator\"> • Error</span>}\n// //       </div>\n      \n// //       {wsError && <p className=\"error-message\">{wsError}</p>}\n\n// //       <div className=\"messages-panel\">\n// //         {messages.map((msg, index) => (\n// //           <div key={index} className=\"message\">\n// //             <span className=\"message-username\">{msg.username}:</span>\n// //             <span className=\"message-content\">{msg.content}</span>\n// //             <span className=\"message-timestamp\">\n// //               {new Date(msg.timestamp).toLocaleTimeString()}\n// //             </span>\n// //           </div>\n// //         ))}\n// //       </div>\n\n// //       <form onSubmit={handleSendMessage} className=\"message-form\">\n// //         <input\n// //           type=\"text\"\n// //           value={message}\n// //           onChange={(e) => setMessage(e.target.value)}\n// //           placeholder=\"Type your message...\"\n// //           className=\"message-input\"\n// //         />\n// //         <button \n// //           type=\"submit\" \n// //           className=\"send-button\"\n// //           disabled={connectionStatus !== 'connected'}\n// //         >\n// //           Send\n// //         </button>\n// //       </form>\n// //     </div>\n// //   );\n// // };\n\n// // export default Chat;\n// // import React, { useState, useEffect } from 'react';\n// // import axios from 'axios';\n// // import useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js'; // путь поменяй если другой\n// // import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css'; // путь к стилям\n\n// // const Chat = () => {\n// //   const [message, setMessage] = useState('');\n// //   const [email, setEmail] = useState('');\n// //   const [password, setPassword] = useState('');\n// //   const [errorMessage, setErrorMessage] = useState('');\n// //   const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n// //   const [userId, setUserId] = useState(null);\n// //   const [username, setUsername] = useState(null);\n\n// //   const {\n// //     messages,\n// //     sendMessage,\n// //     connectionStatus,\n// //     connect, // добавляем ручное подключение\n// //     disconnect\n// //   } = useWebSocket('ws://localhost:8082/ws', { manual: true }); // manual mode!\n\n// //   useEffect(() => {\n// //     const storedUserId = localStorage.getItem('userId');\n// //     const storedUsername = localStorage.getItem('username');\n// //     if (storedUserId && storedUsername) {\n// //       setUserId(storedUserId);\n// //       setUsername(storedUsername);\n// //       setIsLoggedIn(true);\n// //       connect(); // подключаем WebSocket только если есть данные\n// //     }\n// //   }, [connect]);\n\n// //   const handleLogin = async (e) => {\n// //     e.preventDefault();\n\n// //     try {\n// //       const response = await axios.post('http://localhost:8080/login', {\n// //         email,\n// //         password,\n// //       });\n\n// //       if (response.status === 200) {\n// //         const { userId, username, token } = response.data;\n\n// //         if (!userId || !username || username === 'undefined') {\n// //           console.warn('Invalid user session, cannot connect');\n// //           setErrorMessage('Login failed: server did not provide user info.');\n// //           return;\n// //         }\n\n// //         localStorage.setItem('userId', userId);\n// //         localStorage.setItem('username', username);\n// //         localStorage.setItem('token', token);\n\n// //         setUserId(userId);\n// //         setUsername(username);\n// //         setIsLoggedIn(true);\n\n// //         connect(); // подключаем WebSocket после логина\n\n// //       }\n// //     } catch (error) {\n// //       console.error(error);\n// //       setErrorMessage('Login failed. Please check your credentials.');\n// //     }\n// //   };\n\n// //   const handleSubmit = (e) => {\n// //     e.preventDefault();\n\n// //     if (!message.trim() || !username) {\n// //       console.warn('Cannot send empty message or missing username');\n// //       return;\n// //     }\n\n// //     sendMessage({\n// //       user_id:  userId,\n// //       username: username,\n// //       content: message.trim(),\n// //     });\n\n// //     setMessage('');\n// //   };\n\n// //   if (!isLoggedIn) {\n// //     return (\n// //       <div>\n// //         <h2>Login to use Chat</h2>\n// //         <form onSubmit={handleLogin}>\n// //           <div>\n// //             <label>Email</label>\n// //             <input\n// //               type=\"email\"\n// //               value={email}\n// //               onChange={(e) => setEmail(e.target.value)}\n// //               required\n// //             />\n// //           </div>\n// //           <div>\n// //             <label>Password</label>\n// //             <input\n// //               type=\"password\"\n// //               value={password}\n// //               onChange={(e) => setPassword(e.target.value)}\n// //               required\n// //             />\n// //           </div>\n// //           <button type=\"submit\">Login</button>\n// //         </form>\n\n// //         {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}\n// //       </div>\n// //     );\n// //   }\n\n// //   return (\n// //     <div className=\"chat-container\">\n// //       <div className=\"connection-status\">\n// //         Status: {connectionStatus}\n// //       </div>\n\n// //       <div className=\"messages\">\n// //         {messages.map((msg, index) => (\n// //           <div key={index} className=\"message\">\n// //             <span className=\"user\">{msg.username}:</span>  \n// //             <span className=\"content\">{msg.content}</span>\n// //           </div>\n// //         ))}\n// //       </div>\n\n// //       <form onSubmit={handleSubmit} className=\"chat-form\">\n// //         <input\n// //           type=\"text\"\n// //           value={message}\n// //           onChange={(e) => setMessage(e.target.value)}\n// //           placeholder=\"Type your message...\"\n// //           disabled={connectionStatus !== 'connected'}\n// //           className=\"chat-input\"\n// //         />\n// //         <button\n// //           type=\"submit\"\n// //           disabled={connectionStatus !== 'connected' || !message.trim()}\n// //           className=\"chat-send-button\"\n// //         >\n// //           Send\n// //         </button>\n// //       </form>\n// //     </div>\n// //   );\n// // };\n\n// // export default Chat;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,YAAY,MAAM,kFAAkF;AAC3G,OAAO,sFAAsF;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9F,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACf,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAMW,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,MAAMC,KAAK,GAAG,wBAAwB;EAEtC,MAAM;IACFC,QAAQ;IACRC,WAAW;IACXC,gBAAgB;IAChBC;EACJ,CAAC,GAAGhB,YAAY,CAACY,KAAK,EAAEH,KAAK,CAAC;;EAE9B;EACAV,SAAS,CAAC,MAAM;IACZ,MAAMkB,MAAM,GAAGP,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IAC7C,MAAMO,QAAQ,GAAGR,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACjD,IAAIM,MAAM,IAAIC,QAAQ,EAAE;MACpBV,WAAW,CAAC;QAAEW,EAAE,EAAEF,MAAM;QAAEC;MAAS,CAAC,CAAC;IACzC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAnB,SAAS,CAAC,MAAM;IACZ,IAAIiB,KAAK,EAAE;MACPI,OAAO,CAACJ,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;IACvC;EACJ,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,MAAMK,YAAY,GAAIC,CAAC,IAAK;IACxBA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAIlB,YAAY,CAACmB,IAAI,CAAC,CAAC,IAAIjB,QAAQ,EAAE;MACjCO,WAAW,CAAC;QACRW,IAAI,EAAEpB,YAAY;QAClBqB,MAAM,EAAEnB,QAAQ,CAACY,EAAE;QACnBQ,QAAQ,EAAEpB,QAAQ,CAACW,QAAQ;QAC3BU,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACtC,CAAC,CAAC;MACFxB,eAAe,CAAC,EAAE,CAAC;IACvB;EACJ,CAAC;EAED,IAAI,CAACC,QAAQ,EAAE;IACX,oBACIL,OAAA;MAAK6B,SAAS,EAAC,gBAAgB;MAAAC,QAAA,eAC3B9B,OAAA;QAAK6B,SAAS,EAAC,cAAc;QAAAC,QAAA,EAAC;MAE9B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAEd;EAEA,oBACIlC,OAAA;IAAK6B,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC3B9B,OAAA;MAAK6B,SAAS,EAAC,aAAa;MAAAC,QAAA,gBACxB9B,OAAA;QAAA8B,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpBlC,OAAA;QAAK6B,SAAS,EAAE,qBAAqBhB,gBAAgB,EAAG;QAAAiB,QAAA,GAAC,UAC7C,EAACjB,gBAAgB,CAACsB,WAAW,CAAC,CAAC;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eAENlC,OAAA;MAAK6B,SAAS,EAAC,eAAe;MAAAC,QAAA,EACzBnB,QAAQ,CAACyB,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBACzBtC,OAAA;QAAiB6B,SAAS,EAAE,WAAWQ,OAAO,CAACb,MAAM,KAAKnB,QAAQ,CAACY,EAAE,GAAG,aAAa,GAAG,EAAE,EAAG;QAAAa,QAAA,gBACzF9B,OAAA;UAAK6B,SAAS,EAAC,gBAAgB;UAAAC,QAAA,gBAC3B9B,OAAA;YAAM6B,SAAS,EAAC,UAAU;YAAAC,QAAA,EAAEO,OAAO,CAACZ;UAAQ;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACpDlC,OAAA;YAAM6B,SAAS,EAAC,WAAW;YAAAC,QAAA,EACtB,IAAIH,IAAI,CAACU,OAAO,CAACX,SAAS,CAAC,CAACa,kBAAkB,CAAC;UAAC;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/C,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eACNlC,OAAA;UAAK6B,SAAS,EAAC,iBAAiB;UAAAC,QAAA,EAC3BO,OAAO,CAACd;QAAI;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACZ,CAAC;MAAA,GATAI,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAUV,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eAENlC,OAAA;MAAM6B,SAAS,EAAC,cAAc;MAACW,QAAQ,EAAErB,YAAa;MAAAW,QAAA,gBAClD9B,OAAA;QACIyC,IAAI,EAAC,MAAM;QACXC,KAAK,EAAEvC,YAAa;QACpBwC,QAAQ,EAAGvB,CAAC,IAAKhB,eAAe,CAACgB,CAAC,CAACwB,MAAM,CAACF,KAAK,CAAE;QACjDG,WAAW,EAAC,sBAAsB;QAClCC,QAAQ,EAAEjC,gBAAgB,KAAK,WAAY;QAC3C,cAAW;MAAmB;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjC,CAAC,eACFlC,OAAA;QACIyC,IAAI,EAAC,QAAQ;QACbK,QAAQ,EAAE,CAAC3C,YAAY,CAACmB,IAAI,CAAC,CAAC,IAAIT,gBAAgB,KAAK,WAAY;QACnEgB,SAAS,EAAC,aAAa;QAAAC,QAAA,EAEtBjB,gBAAgB,KAAK,WAAW,GAAG,MAAM,GAAG;MAAe;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC,EAENpB,KAAK,iBACFd,OAAA;MAAK6B,SAAS,EAAC,eAAe;MAAAC,QAAA,GAAC,SACpB,EAAChB,KAAK;IAAA;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAAChC,EAAA,CAtGID,IAAI;EAAA,QAWFH,YAAY;AAAA;AAAAiD,EAAA,GAXd9C,IAAI;AAwGV,eAAeA,IAAI;AACnignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}