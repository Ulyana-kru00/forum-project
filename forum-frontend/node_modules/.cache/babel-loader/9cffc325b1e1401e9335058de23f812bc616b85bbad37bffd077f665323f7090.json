{"ast":null,"code":"var _jsxFileName = \"/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/Chat/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js';\nimport '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [message, setMessage] = useState('');\n  const userId = localStorage.getItem('userId');\n  const token = localStorage.getItem('token'); // Ensure this is the JWT token\n  const wsUrl = `ws://localhost:8082/websocket?token=${encodeURIComponent(token)}`;\n  const {\n    messages,\n    sendMessage,\n    connectionStatus\n  } = useWebSocket(wsUrl);\n  if (!userId) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Please login to use chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 16\n    }, this);\n  }\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (message.trim()) {\n      sendMessage({\n        content: message,\n        userId: userId,\n        timestamp: new Date().toISOString()\n      });\n      setMessage('');\n    }\n  };\n  useEffect(() => {\n    if (error) {\n      alert(`Chat error: ${error}`);\n    }\n  }, [error]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"connection-status\",\n      children: [\"Status: \", connectionStatus]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"user\",\n          children: msg.userId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"content\",\n          children: msg.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        placeholder: \"Type your message...\",\n        disabled: connectionStatus !== 'connected'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: connectionStatus !== 'connected',\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"SfYF3U7ZIl8ll9/6t6kHzYD0+i8=\", false, function () {\n  return [useWebSocket];\n});\n_c = Chat;\nexport default Chat;\n// import React, { useState, useEffect, useCallback } from 'react';\n// import axios from 'axios';\n//  import useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js'; // путь поменяй если другой\n//  import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css'; // путь к стилям\n\n// const Chat = () => {\n//   const [message, setMessage] = useState('');\n//   const [login, setLogin] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [errorMessage, setErrorMessage] = useState('');\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n//   const {\n//     messages,\n//     sendMessage,\n//     connectionStatus,\n//     connect,\n//     disconnect,\n//     error: wsError\n//   } = useWebSocket('http://localhost:8082/ws', { manual: true });\n\n//   // Проверка авторизации при монтировании\n//   useEffect(() => {\n//     const token = localStorage.getItem('token');\n//     const userId = localStorage.getItem('userId');\n//     const username = localStorage.getItem('username');\n\n//     if (token && userId && username) {\n//       setIsLoggedIn(true);\n//     }\n//   }, []);\n\n//   // Управление подключением WebSocket\n//   useEffect(() => {\n//     if (isLoggedIn) {\n//       connect();\n//     }\n\n//     return () => {\n//       if (isLoggedIn) {\n//         disconnect(true);\n//       }\n//     };\n//   }, [isLoggedIn, connect, disconnect]);\n\n//   // Механизм переподключения\n//   useEffect(() => {\n//     const reconnectInterval = setInterval(() => {\n//       if (connectionStatus === 'disconnected' && isLoggedIn) {\n//         connect();\n//       }\n//     }, 5000);\n\n//     return () => clearInterval(reconnectInterval);\n//   }, [connectionStatus, isLoggedIn, connect]);\n\n//   const handleLogin = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.post('http://localhost:8080/login', {\n//         login,\n//         password,\n//       });\n\n//       const { token, userId, username } = response.data;\n\n//       if (!token || !userId || !username) {\n//         throw new Error('Invalid server response');\n//       }\n\n//       localStorage.setItem('token', token);\n//       localStorage.setItem('userId', userId);\n//       localStorage.setItem('username', username);\n\n//       setIsLoggedIn(true);\n//       setErrorMessage('');\n\n//     } catch (error) {\n//       console.error(\"Login error:\", error);\n//       setErrorMessage(error.response?.data?.message || 'Login failed. Please try again.');\n//       localStorage.clear();\n//     }\n//   };\n\n//   const handleSendMessage = (e) => {\n//     e.preventDefault();\n\n//     const userId = localStorage.getItem('userId');\n//     const username = localStorage.getItem('username');\n\n//     if (!userId || !username) {\n//       setErrorMessage('User session expired');\n//       localStorage.clear();\n//       setIsLoggedIn(false);\n//       return;\n//     }\n\n//     if (!message.trim()) {\n//       setErrorMessage('Cannot send empty message');\n//       return;\n//     }\n\n//     sendMessage({\n//       content: message.trim(),\n//       userId: parseInt(userId, 10),\n//       username,\n//     });\n\n//     setMessage('');\n//     setErrorMessage('');\n//   };\n\n//   if (!isLoggedIn) {\n//     return (\n//       <div className=\"auth-container\">\n//         <h2>Login to use Chat</h2>\n//         <form onSubmit={handleLogin}>\n//           <div className=\"form-group\">\n//             <label>Login</label>\n//             <input\n//               type=\"text\"\n//               value={login}\n//               onChange={(e) => setLogin(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <div className=\"form-group\">\n//             <label>Password</label>\n//             <input\n//               type=\"password\"\n//               value={password}\n//               onChange={(e) => setPassword(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <button type=\"submit\" className=\"btn-primary\">Login</button>\n//           {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n//         </form>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"connection-status\">\n//         Connection Status: {connectionStatus}\n//         {wsError && <span className=\"error-indicator\"> • Error</span>}\n//       </div>\n\n//       {wsError && <p className=\"error-message\">{wsError}</p>}\n\n//       <div className=\"messages-panel\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message\">\n//             <span className=\"message-username\">{msg.username}:</span>\n//             <span className=\"message-content\">{msg.content}</span>\n//             <span className=\"message-timestamp\">\n//               {new Date(msg.timestamp).toLocaleTimeString()}\n//             </span>\n//           </div>\n//         ))}\n//       </div>\n\n//       <form onSubmit={handleSendMessage} className=\"message-form\">\n//         <input\n//           type=\"text\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//           placeholder=\"Type your message...\"\n//           className=\"message-input\"\n//         />\n//         <button \n//           type=\"submit\" \n//           className=\"send-button\"\n//           disabled={connectionStatus !== 'connected'}\n//         >\n//           Send\n//         </button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default Chat;\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js'; // путь поменяй если другой\n// import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css'; // путь к стилям\n\n// const Chat = () => {\n//   const [message, setMessage] = useState('');\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [errorMessage, setErrorMessage] = useState('');\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n//   const [userId, setUserId] = useState(null);\n//   const [username, setUsername] = useState(null);\n\n//   const {\n//     messages,\n//     sendMessage,\n//     connectionStatus,\n//     connect, // добавляем ручное подключение\n//     disconnect\n//   } = useWebSocket('ws://localhost:8082/ws', { manual: true }); // manual mode!\n\n//   useEffect(() => {\n//     const storedUserId = localStorage.getItem('userId');\n//     const storedUsername = localStorage.getItem('username');\n//     if (storedUserId && storedUsername) {\n//       setUserId(storedUserId);\n//       setUsername(storedUsername);\n//       setIsLoggedIn(true);\n//       connect(); // подключаем WebSocket только если есть данные\n//     }\n//   }, [connect]);\n\n//   const handleLogin = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       const response = await axios.post('http://localhost:8080/login', {\n//         email,\n//         password,\n//       });\n\n//       if (response.status === 200) {\n//         const { userId, username, token } = response.data;\n\n//         if (!userId || !username || username === 'undefined') {\n//           console.warn('Invalid user session, cannot connect');\n//           setErrorMessage('Login failed: server did not provide user info.');\n//           return;\n//         }\n\n//         localStorage.setItem('userId', userId);\n//         localStorage.setItem('username', username);\n//         localStorage.setItem('token', token);\n\n//         setUserId(userId);\n//         setUsername(username);\n//         setIsLoggedIn(true);\n\n//         connect(); // подключаем WebSocket после логина\n\n//       }\n//     } catch (error) {\n//       console.error(error);\n//       setErrorMessage('Login failed. Please check your credentials.');\n//     }\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     if (!message.trim() || !username) {\n//       console.warn('Cannot send empty message or missing username');\n//       return;\n//     }\n\n//     sendMessage({\n//       user_id:  userId,\n//       username: username,\n//       content: message.trim(),\n//     });\n\n//     setMessage('');\n//   };\n\n//   if (!isLoggedIn) {\n//     return (\n//       <div>\n//         <h2>Login to use Chat</h2>\n//         <form onSubmit={handleLogin}>\n//           <div>\n//             <label>Email</label>\n//             <input\n//               type=\"email\"\n//               value={email}\n//               onChange={(e) => setEmail(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <div>\n//             <label>Password</label>\n//             <input\n//               type=\"password\"\n//               value={password}\n//               onChange={(e) => setPassword(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <button type=\"submit\">Login</button>\n//         </form>\n\n//         {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"connection-status\">\n//         Status: {connectionStatus}\n//       </div>\n\n//       <div className=\"messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message\">\n//             <span className=\"user\">{msg.username}:</span>  \n//             <span className=\"content\">{msg.content}</span>\n//           </div>\n//         ))}\n//       </div>\n\n//       <form onSubmit={handleSubmit} className=\"chat-form\">\n//         <input\n//           type=\"text\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//           placeholder=\"Type your message...\"\n//           disabled={connectionStatus !== 'connected'}\n//           className=\"chat-input\"\n//         />\n//         <button\n//           type=\"submit\"\n//           disabled={connectionStatus !== 'connected' || !message.trim()}\n//           className=\"chat-send-button\"\n//         >\n//           Send\n//         </button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useWebSocket","jsxDEV","_jsxDEV","Chat","_s","message","setMessage","userId","localStorage","getItem","token","wsUrl","encodeURIComponent","messages","sendMessage","connectionStatus","children","fileName","_jsxFileName","lineNumber","columnNumber","handleSubmit","e","preventDefault","trim","content","timestamp","Date","toISOString","useEffect","error","alert","className","map","msg","index","onSubmit","type","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/Chat/Chat.js"],"sourcesContent":["import React, { useState } from 'react';\nimport useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js';\nimport '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css';\n\nconst Chat = () => {\n    const [message, setMessage] = useState('');\n    const userId = localStorage.getItem('userId');\n    const token = localStorage.getItem('token'); // Ensure this is the JWT token\n    const wsUrl = `ws://localhost:8082/websocket?token=${encodeURIComponent(token)}`;\n    \n    const { \n        messages, \n        sendMessage, \n        connectionStatus \n    } = useWebSocket(wsUrl);\n\n    if (!userId) {\n        return <div>Please login to use chat</div>;\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (message.trim()) {\n            sendMessage({\n                content: message,\n                userId: userId,\n                timestamp: new Date().toISOString()\n            });\n            setMessage('');\n        }\n    };\n    useEffect(() => {\n      if (error) {\n          alert(`Chat error: ${error}`);\n      }\n  }, [error]);\n    return (\n        <div className=\"chat-container\">\n            <div className=\"connection-status\">\n                Status: {connectionStatus}\n            </div>\n            <div className=\"messages\">\n                {messages.map((msg, index) => (\n                    <div key={index} className=\"message\">\n                        <span className=\"user\">{msg.userId}</span>\n                        <span className=\"content\">{msg.content}</span>\n                    </div>\n                ))}\n            </div>\n            <form onSubmit={handleSubmit}>\n                <input\n                    type=\"text\"\n                    value={message}\n                    onChange={(e) => setMessage(e.target.value)}\n                    placeholder=\"Type your message...\"\n                    disabled={connectionStatus !== 'connected'}\n                />\n                <button \n                    type=\"submit\"\n                    disabled={connectionStatus !== 'connected'}\n                >\n                    Send\n                </button>\n            </form>\n        </div>\n    );\n};\nexport default Chat;\n// import React, { useState, useEffect, useCallback } from 'react';\n// import axios from 'axios';\n//  import useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js'; // путь поменяй если другой\n//  import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css'; // путь к стилям\n\n// const Chat = () => {\n//   const [message, setMessage] = useState('');\n//   const [login, setLogin] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [errorMessage, setErrorMessage] = useState('');\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n  \n//   const {\n//     messages,\n//     sendMessage,\n//     connectionStatus,\n//     connect,\n//     disconnect,\n//     error: wsError\n//   } = useWebSocket('http://localhost:8082/ws', { manual: true });\n\n//   // Проверка авторизации при монтировании\n//   useEffect(() => {\n//     const token = localStorage.getItem('token');\n//     const userId = localStorage.getItem('userId');\n//     const username = localStorage.getItem('username');\n    \n//     if (token && userId && username) {\n//       setIsLoggedIn(true);\n//     }\n//   }, []);\n\n//   // Управление подключением WebSocket\n//   useEffect(() => {\n//     if (isLoggedIn) {\n//       connect();\n//     }\n    \n//     return () => {\n//       if (isLoggedIn) {\n//         disconnect(true);\n//       }\n//     };\n//   }, [isLoggedIn, connect, disconnect]);\n\n//   // Механизм переподключения\n//   useEffect(() => {\n//     const reconnectInterval = setInterval(() => {\n//       if (connectionStatus === 'disconnected' && isLoggedIn) {\n//         connect();\n//       }\n//     }, 5000);\n\n//     return () => clearInterval(reconnectInterval);\n//   }, [connectionStatus, isLoggedIn, connect]);\n\n//   const handleLogin = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.post('http://localhost:8080/login', {\n//         login,\n//         password,\n//       });\n\n//       const { token, userId, username } = response.data;\n      \n//       if (!token || !userId || !username) {\n//         throw new Error('Invalid server response');\n//       }\n\n//       localStorage.setItem('token', token);\n//       localStorage.setItem('userId', userId);\n//       localStorage.setItem('username', username);\n      \n//       setIsLoggedIn(true);\n//       setErrorMessage('');\n\n//     } catch (error) {\n//       console.error(\"Login error:\", error);\n//       setErrorMessage(error.response?.data?.message || 'Login failed. Please try again.');\n//       localStorage.clear();\n//     }\n//   };\n\n//   const handleSendMessage = (e) => {\n//     e.preventDefault();\n    \n//     const userId = localStorage.getItem('userId');\n//     const username = localStorage.getItem('username');\n    \n//     if (!userId || !username) {\n//       setErrorMessage('User session expired');\n//       localStorage.clear();\n//       setIsLoggedIn(false);\n//       return;\n//     }\n\n//     if (!message.trim()) {\n//       setErrorMessage('Cannot send empty message');\n//       return;\n//     }\n\n//     sendMessage({\n//       content: message.trim(),\n//       userId: parseInt(userId, 10),\n//       username,\n//     });\n\n//     setMessage('');\n//     setErrorMessage('');\n//   };\n\n//   if (!isLoggedIn) {\n//     return (\n//       <div className=\"auth-container\">\n//         <h2>Login to use Chat</h2>\n//         <form onSubmit={handleLogin}>\n//           <div className=\"form-group\">\n//             <label>Login</label>\n//             <input\n//               type=\"text\"\n//               value={login}\n//               onChange={(e) => setLogin(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <div className=\"form-group\">\n//             <label>Password</label>\n//             <input\n//               type=\"password\"\n//               value={password}\n//               onChange={(e) => setPassword(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <button type=\"submit\" className=\"btn-primary\">Login</button>\n//           {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n//         </form>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"connection-status\">\n//         Connection Status: {connectionStatus}\n//         {wsError && <span className=\"error-indicator\"> • Error</span>}\n//       </div>\n      \n//       {wsError && <p className=\"error-message\">{wsError}</p>}\n\n//       <div className=\"messages-panel\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message\">\n//             <span className=\"message-username\">{msg.username}:</span>\n//             <span className=\"message-content\">{msg.content}</span>\n//             <span className=\"message-timestamp\">\n//               {new Date(msg.timestamp).toLocaleTimeString()}\n//             </span>\n//           </div>\n//         ))}\n//       </div>\n\n//       <form onSubmit={handleSendMessage} className=\"message-form\">\n//         <input\n//           type=\"text\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//           placeholder=\"Type your message...\"\n//           className=\"message-input\"\n//         />\n//         <button \n//           type=\"submit\" \n//           className=\"send-button\"\n//           disabled={connectionStatus !== 'connected'}\n//         >\n//           Send\n//         </button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default Chat;\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js'; // путь поменяй если другой\n// import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css'; // путь к стилям\n\n// const Chat = () => {\n//   const [message, setMessage] = useState('');\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [errorMessage, setErrorMessage] = useState('');\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n//   const [userId, setUserId] = useState(null);\n//   const [username, setUsername] = useState(null);\n\n//   const {\n//     messages,\n//     sendMessage,\n//     connectionStatus,\n//     connect, // добавляем ручное подключение\n//     disconnect\n//   } = useWebSocket('ws://localhost:8082/ws', { manual: true }); // manual mode!\n\n//   useEffect(() => {\n//     const storedUserId = localStorage.getItem('userId');\n//     const storedUsername = localStorage.getItem('username');\n//     if (storedUserId && storedUsername) {\n//       setUserId(storedUserId);\n//       setUsername(storedUsername);\n//       setIsLoggedIn(true);\n//       connect(); // подключаем WebSocket только если есть данные\n//     }\n//   }, [connect]);\n\n//   const handleLogin = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       const response = await axios.post('http://localhost:8080/login', {\n//         email,\n//         password,\n//       });\n\n//       if (response.status === 200) {\n//         const { userId, username, token } = response.data;\n\n//         if (!userId || !username || username === 'undefined') {\n//           console.warn('Invalid user session, cannot connect');\n//           setErrorMessage('Login failed: server did not provide user info.');\n//           return;\n//         }\n\n//         localStorage.setItem('userId', userId);\n//         localStorage.setItem('username', username);\n//         localStorage.setItem('token', token);\n\n//         setUserId(userId);\n//         setUsername(username);\n//         setIsLoggedIn(true);\n\n//         connect(); // подключаем WebSocket после логина\n\n//       }\n//     } catch (error) {\n//       console.error(error);\n//       setErrorMessage('Login failed. Please check your credentials.');\n//     }\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     if (!message.trim() || !username) {\n//       console.warn('Cannot send empty message or missing username');\n//       return;\n//     }\n\n//     sendMessage({\n//       user_id:  userId,\n//       username: username,\n//       content: message.trim(),\n//     });\n\n//     setMessage('');\n//   };\n\n//   if (!isLoggedIn) {\n//     return (\n//       <div>\n//         <h2>Login to use Chat</h2>\n//         <form onSubmit={handleLogin}>\n//           <div>\n//             <label>Email</label>\n//             <input\n//               type=\"email\"\n//               value={email}\n//               onChange={(e) => setEmail(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <div>\n//             <label>Password</label>\n//             <input\n//               type=\"password\"\n//               value={password}\n//               onChange={(e) => setPassword(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <button type=\"submit\">Login</button>\n//         </form>\n\n//         {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"connection-status\">\n//         Status: {connectionStatus}\n//       </div>\n\n//       <div className=\"messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message\">\n//             <span className=\"user\">{msg.username}:</span>  \n//             <span className=\"content\">{msg.content}</span>\n//           </div>\n//         ))}\n//       </div>\n\n//       <form onSubmit={handleSubmit} className=\"chat-form\">\n//         <input\n//           type=\"text\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//           placeholder=\"Type your message...\"\n//           disabled={connectionStatus !== 'connected'}\n//           className=\"chat-input\"\n//         />\n//         <button\n//           type=\"submit\"\n//           disabled={connectionStatus !== 'connected' || !message.trim()}\n//           className=\"chat-send-button\"\n//         >\n//           Send\n//         </button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default Chat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}