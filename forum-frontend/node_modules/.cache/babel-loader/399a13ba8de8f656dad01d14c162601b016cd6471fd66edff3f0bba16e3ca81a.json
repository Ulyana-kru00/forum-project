{"ast":null,"code":"var _jsxFileName = \"/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/Chat/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js'; // путь поменяй если другой\nimport '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css'; // путь к стилям\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [login, setLogin] = useState('');\n  const [password, setPassword] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userId, setUserId] = useState(null);\n  const [username, setUsername] = useState(null);\n  const [isSending, setIsSending] = useState(false);\n  const {\n    messages,\n    sendMessage,\n    connectionStatus,\n    connect,\n    disconnect,\n    isConnected,\n    error: wsError\n  } = useWebSocket('ws://localhost:8082/ws', {\n    manual: true\n  });\n  useEffect(() => {\n    const storedUserId = localStorage.getItem('userId');\n    const storedUsername = localStorage.getItem('username');\n    if (storedUserId && storedUsername) {\n      setUserId(storedUserId);\n      setUsername(storedUsername);\n      setIsLoggedIn(true);\n    }\n  }, []);\n  useEffect(() => {\n    if (isLoggedIn) {\n      connect();\n    } else {\n      disconnect();\n    }\n    return () => disconnect();\n  }, [isLoggedIn, connect, disconnect]);\n  useEffect(() => {\n    if (wsError) {\n      setErrorMessage(wsError);\n    }\n  }, [wsError]);\n  const handleLogin = async e => {\n    e.preventDefault();\n    setErrorMessage('');\n    try {\n      const response = await axios.post('http://localhost:8080/login', {\n        username: login,\n        password\n      });\n      const {\n        userId,\n        username,\n        token\n      } = response.data;\n      if (!userId || !username) {\n        throw new Error('Invalid server response');\n      }\n      localStorage.setItem('userId', userId);\n      localStorage.setItem('username', username);\n      localStorage.setItem('token', token);\n      setUserId(userId);\n      setUsername(username);\n      setIsLoggedIn(true);\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error(\"Login error:\", error);\n      setErrorMessage(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Login failed');\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setErrorMessage('');\n    if (!isConnected) {\n      setErrorMessage('Connection not ready. Please wait...');\n      return;\n    }\n    if (!message.trim()) {\n      setErrorMessage('Message cannot be empty');\n      return;\n    }\n    try {\n      setIsSending(true);\n      await sendMessage({\n        user_id: userId,\n        username,\n        content: message.trim()\n      });\n      setMessage('');\n    } catch (error) {\n      console.error('Send message error:', error);\n      setErrorMessage(error.message);\n    } finally {\n      setIsSending(false);\n    }\n  };\n  if (!isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auth-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Login to use Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleLogin,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: login,\n            onChange: e => setLogin(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            value: password,\n            onChange: e => setPassword(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"login-button\",\n          disabled: !login || !password,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connection-status\",\n        children: [\"Status: \", connectionStatus, !isConnected && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"connecting-dots\",\n          children: \"...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"logout-button\",\n        onClick: () => {\n          disconnect(true);\n          localStorage.clear();\n          setIsLoggedIn(false);\n        },\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), !isConnected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"connection-loader\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Connecting to chat...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"username\",\n            children: [msg.username, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"content\",\n            children: msg.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"timestamp\",\n            children: new Date(msg.timestamp).toLocaleTimeString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 17\n          }, this)]\n        }, `msg-${index}-${msg.timestamp}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"message-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: message,\n          onChange: e => setMessage(e.target.value),\n          placeholder: \"Type your message...\",\n          disabled: !isConnected || isSending\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: !isConnected || isSending || !message.trim(),\n          className: \"send-button\",\n          children: isSending ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"sending-spinner\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 19\n            }, this), \"Sending...\"]\n          }, void 0, true) : 'Send'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"/U7lmcf5iBb8Nt6d/eF2EnKJEoA=\", false, function () {\n  return [useWebSocket];\n});\n_c = Chat;\nexport default Chat;\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js'; // путь поменяй если другой\n// import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css'; // путь к стилям\n\n// const Chat = () => {\n//   const [message, setMessage] = useState('');\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [errorMessage, setErrorMessage] = useState('');\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [userId, setUserId] = useState(null);\n//   const [username, setUsername] = useState(null);\n\n//   const {\n//     messages,\n//     sendMessage,\n//     connectionStatus,\n//     connect,\n//     disconnect,\n//   } = useWebSocket('ws://localhost:8082/ws', { manual: true });\n\n//   // Load user data from localStorage on initial mount\n//   useEffect(() => {\n//     const storedUserId = localStorage.getItem('userId');\n//     const storedUsername = localStorage.getItem('username');\n\n//     if (storedUserId && storedUsername) {\n//       setUserId(storedUserId);\n//       setUsername(storedUsername);\n//       setIsLoggedIn(true);\n//     }\n//   }, []);\n\n//   // Connect when isLoggedIn changes to true\n//   useEffect(() => {\n//     if (isLoggedIn) {\n//       connect(); // Connect WebSocket when isLoggedIn is true\n//     } else {\n//       disconnect(); // Disconnect if isLoggedIn becomes false (e.g., logout)\n//     }\n\n//     return () => {\n//         disconnect(); // Disconnect when component unmounts\n//     }\n//   }, [isLoggedIn, connect, disconnect]);\n\n//   const handleLogin = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       const response = await axios.post('http://localhost:8080/login', {\n//         email,\n//         password,\n//       });\n\n//       if (response.status === 200) {\n//         const { userId, username, token } = response.data;\n\n//         if (!userId || !username || username === 'undefined') {\n//           console.warn('Invalid user session, cannot connect');\n//           setErrorMessage('Login failed: server did not provide user info.');\n//           return;\n//         }\n\n//         localStorage.setItem('userId', userId);\n//         localStorage.setItem('username', username);\n//         localStorage.setItem('token', token);\n\n//         setUserId(userId);\n//         setUsername(username);\n//         setIsLoggedIn(true);  // Set isLoggedIn AFTER setting userId and username\n\n//       }\n//     } catch (error) {\n//       console.error(\"Login error:\", error.response || error.message || error); // Log detailed error\n//       setErrorMessage('Login failed. Please check your credentials.');\n//     }\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     if (!message.trim() || !username) {\n//       console.warn('Cannot send empty message or missing username');\n//       return;\n//     }\n\n//     sendMessage({\n//       user_id: userId,\n//       username: username,\n//       content: message.trim(),\n//     });\n\n//     setMessage('');\n//   };\n\n//   if (!isLoggedIn) {\n//     return (\n//       <div>\n//         <h2>Login to use Chat</h2>\n//         <form onSubmit={handleLogin}>\n//           <div>\n//             <label>Login</label>\n//             <input\n//               type=\"login\"\n//               value={login}\n//               onChange={(e) => setEmail(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <div>\n//             <label>Password</label>\n//             <input\n//               type=\"password\"\n//               value={password}\n//               onChange={(e) => setPassword(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <button type=\"submit\">Login</button>\n//         </form>\n//         {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"connection-status\">\n//         Status: {connectionStatus}\n//       </div>\n//       <div className=\"messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message\">\n//             <span className=\"user\">{msg.username}:</span>\n//             <span className=\"content\">{msg.content}</span>\n//           </div>\n//         ))}\n//       </div>\n//       <form onSubmit={handleSubmit}>\n//         <input\n//           type=\"text\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//           placeholder=\"Type your message...\"\n//         />\n//         <button type=\"submit\">Send</button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default Chat;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js'; // путь поменяй если другой\n// import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css'; // путь к стилям\n\n// const Chat = () => {\n//   const [message, setMessage] = useState('');\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [errorMessage, setErrorMessage] = useState('');\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n//   const [userId, setUserId] = useState(null);\n//   const [username, setUsername] = useState(null);\n\n//   const {\n//     messages,\n//     sendMessage,\n//     connectionStatus,\n//     connect, // добавляем ручное подключение\n//     disconnect\n//   } = useWebSocket('ws://localhost:8082/ws', { manual: true }); // manual mode!\n\n//   useEffect(() => {\n//     const storedUserId = localStorage.getItem('userId');\n//     const storedUsername = localStorage.getItem('username');\n//     if (storedUserId && storedUsername) {\n//       setUserId(storedUserId);\n//       setUsername(storedUsername);\n//       setIsLoggedIn(true);\n//       connect(); // подключаем WebSocket только если есть данные\n//     }\n//   }, [connect]);\n\n//   const handleLogin = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       const response = await axios.post('http://localhost:8080/login', {\n//         email,\n//         password,\n//       });\n\n//       if (response.status === 200) {\n//         const { userId, username, token } = response.data;\n\n//         if (!userId || !username || username === 'undefined') {\n//           console.warn('Invalid user session, cannot connect');\n//           setErrorMessage('Login failed: server did not provide user info.');\n//           return;\n//         }\n\n//         localStorage.setItem('userId', userId);\n//         localStorage.setItem('username', username);\n//         localStorage.setItem('token', token);\n\n//         setUserId(userId);\n//         setUsername(username);\n//         setIsLoggedIn(true);\n\n//         connect(); // подключаем WebSocket после логина\n\n//       }\n//     } catch (error) {\n//       console.error(error);\n//       setErrorMessage('Login failed. Please check your credentials.');\n//     }\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     if (!message.trim() || !username) {\n//       console.warn('Cannot send empty message or missing username');\n//       return;\n//     }\n\n//     sendMessage({\n//       user_id:  userId,\n//       username: username,\n//       content: message.trim(),\n//     });\n\n//     setMessage('');\n//   };\n\n//   if (!isLoggedIn) {\n//     return (\n//       <div>\n//         <h2>Login to use Chat</h2>\n//         <form onSubmit={handleLogin}>\n//           <div>\n//             <label>Email</label>\n//             <input\n//               type=\"email\"\n//               value={email}\n//               onChange={(e) => setEmail(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <div>\n//             <label>Password</label>\n//             <input\n//               type=\"password\"\n//               value={password}\n//               onChange={(e) => setPassword(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <button type=\"submit\">Login</button>\n//         </form>\n\n//         {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"connection-status\">\n//         Status: {connectionStatus}\n//       </div>\n\n//       <div className=\"messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message\">\n//             <span className=\"user\">{msg.username}:</span>  \n//             <span className=\"content\">{msg.content}</span>\n//           </div>\n//         ))}\n//       </div>\n\n//       <form onSubmit={handleSubmit} className=\"chat-form\">\n//         <input\n//           type=\"text\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//           placeholder=\"Type your message...\"\n//           disabled={connectionStatus !== 'connected'}\n//           className=\"chat-input\"\n//         />\n//         <button\n//           type=\"submit\"\n//           disabled={connectionStatus !== 'connected' || !message.trim()}\n//           className=\"chat-send-button\"\n//         >\n//           Send\n//         </button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","axios","useWebSocket","jsxDEV","_jsxDEV","Fragment","_Fragment","Chat","_s","message","setMessage","login","setLogin","password","setPassword","errorMessage","setErrorMessage","isLoggedIn","setIsLoggedIn","userId","setUserId","username","setUsername","isSending","setIsSending","messages","sendMessage","connectionStatus","connect","disconnect","isConnected","error","wsError","manual","storedUserId","localStorage","getItem","storedUsername","handleLogin","e","preventDefault","response","post","token","data","Error","setItem","_error$response","_error$response$data","console","handleSubmit","trim","user_id","content","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","required","disabled","onClick","clear","map","msg","index","Date","timestamp","toLocaleTimeString","placeholder","_c","$RefreshReg$"],"sources":["/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/Chat/Chat.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n import useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js'; // путь поменяй если другой\n import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css'; // путь к стилям\n\n\nconst Chat = () => {\n  const [message, setMessage] = useState('');\n  const [login, setLogin] = useState('');\n  const [password, setPassword] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userId, setUserId] = useState(null);\n  const [username, setUsername] = useState(null);\n  const [isSending, setIsSending] = useState(false);\n\n  const {\n    messages,\n    sendMessage,\n    connectionStatus,\n    connect,\n    disconnect,\n    isConnected,\n    error: wsError\n  } = useWebSocket('ws://localhost:8082/ws', { manual: true });\n\n  useEffect(() => {\n    const storedUserId = localStorage.getItem('userId');\n    const storedUsername = localStorage.getItem('username');\n\n    if (storedUserId && storedUsername) {\n      setUserId(storedUserId);\n      setUsername(storedUsername);\n      setIsLoggedIn(true);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (isLoggedIn) {\n      connect();\n    } else {\n      disconnect();\n    }\n\n    return () => disconnect();\n  }, [isLoggedIn, connect, disconnect]);\n\n  useEffect(() => {\n    if (wsError) {\n      setErrorMessage(wsError);\n    }\n  }, [wsError]);\n\n  const handleLogin = async (e) => {\n    e.preventDefault();\n    setErrorMessage('');\n\n    try {\n      const response = await axios.post('http://localhost:8080/login', {\n        username: login,\n        password\n      });\n\n      const { userId, username, token } = response.data;\n      \n      if (!userId || !username) {\n        throw new Error('Invalid server response');\n      }\n\n      localStorage.setItem('userId', userId);\n      localStorage.setItem('username', username);\n      localStorage.setItem('token', token);\n\n      setUserId(userId);\n      setUsername(username);\n      setIsLoggedIn(true);\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      setErrorMessage(error.response?.data?.error || 'Login failed');\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setErrorMessage('');\n\n    if (!isConnected) {\n      setErrorMessage('Connection not ready. Please wait...');\n      return;\n    }\n\n    if (!message.trim()) {\n      setErrorMessage('Message cannot be empty');\n      return;\n    }\n\n    try {\n      setIsSending(true);\n      await sendMessage({\n        user_id: userId,\n        username,\n        content: message.trim()\n      });\n      setMessage('');\n    } catch (error) {\n      console.error('Send message error:', error);\n      setErrorMessage(error.message);\n    } finally {\n      setIsSending(false);\n    }\n  };\n\n  if (!isLoggedIn) {\n    return (\n      <div className=\"auth-container\">\n        <h2>Login to use Chat</h2>\n        <form onSubmit={handleLogin}>\n          <div className=\"form-group\">\n            <label>Username</label>\n            <input\n              type=\"text\"\n              value={login}\n              onChange={(e) => setLogin(e.target.value)}\n              required\n            />\n          </div>\n          <div className=\"form-group\">\n            <label>Password</label>\n            <input\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              required\n            />\n          </div>\n          <button \n            type=\"submit\" \n            className=\"login-button\"\n            disabled={!login || !password}\n          >\n            Login\n          </button>\n          {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\n        </form>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"header\">\n        <div className=\"connection-status\">\n          Status: {connectionStatus}\n          {!isConnected && <span className=\"connecting-dots\">...</span>}\n        </div>\n        <button \n          className=\"logout-button\"\n          onClick={() => {\n            disconnect(true);\n            localStorage.clear();\n            setIsLoggedIn(false);\n          }}\n        >\n          Logout\n        </button>\n      </div>\n\n      {!isConnected ? (\n        <div className=\"connection-loader\">\n          <div className=\"spinner\"></div>\n          <p>Connecting to chat...</p>\n        </div>\n      ) : (\n        <>\n          <div className=\"messages\">\n            {messages.map((msg, index) => (\n              <div \n                key={`msg-${index}-${msg.timestamp}`} \n                className=\"message\"\n              >\n                <span className=\"username\">{msg.username}:</span>\n                <span className=\"content\">{msg.content}</span>\n                <span className=\"timestamp\">\n                  {new Date(msg.timestamp).toLocaleTimeString()}\n                </span>\n              </div>\n            ))}\n          </div>\n          \n          <form onSubmit={handleSubmit} className=\"message-form\">\n            <input\n              type=\"text\"\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              placeholder=\"Type your message...\"\n              disabled={!isConnected || isSending}\n            />\n            <button \n              type=\"submit\" \n              disabled={!isConnected || isSending || !message.trim()}\n              className=\"send-button\"\n            >\n              {isSending ? (\n                <>\n                  <span className=\"sending-spinner\"></span>\n                  Sending...\n                </>\n              ) : 'Send'}\n            </button>\n          </form>\n        </>\n      )}\n\n      {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\n    </div>\n  );\n};\n\nexport default Chat;\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js'; // путь поменяй если другой\n// import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css'; // путь к стилям\n\n// const Chat = () => {\n//   const [message, setMessage] = useState('');\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [errorMessage, setErrorMessage] = useState('');\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [userId, setUserId] = useState(null);\n//   const [username, setUsername] = useState(null);\n\n//   const {\n//     messages,\n//     sendMessage,\n//     connectionStatus,\n//     connect,\n//     disconnect,\n//   } = useWebSocket('ws://localhost:8082/ws', { manual: true });\n\n//   // Load user data from localStorage on initial mount\n//   useEffect(() => {\n//     const storedUserId = localStorage.getItem('userId');\n//     const storedUsername = localStorage.getItem('username');\n\n//     if (storedUserId && storedUsername) {\n//       setUserId(storedUserId);\n//       setUsername(storedUsername);\n//       setIsLoggedIn(true);\n//     }\n//   }, []);\n\n//   // Connect when isLoggedIn changes to true\n//   useEffect(() => {\n//     if (isLoggedIn) {\n//       connect(); // Connect WebSocket when isLoggedIn is true\n//     } else {\n//       disconnect(); // Disconnect if isLoggedIn becomes false (e.g., logout)\n//     }\n\n//     return () => {\n//         disconnect(); // Disconnect when component unmounts\n//     }\n//   }, [isLoggedIn, connect, disconnect]);\n\n//   const handleLogin = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       const response = await axios.post('http://localhost:8080/login', {\n//         email,\n//         password,\n//       });\n\n//       if (response.status === 200) {\n//         const { userId, username, token } = response.data;\n\n//         if (!userId || !username || username === 'undefined') {\n//           console.warn('Invalid user session, cannot connect');\n//           setErrorMessage('Login failed: server did not provide user info.');\n//           return;\n//         }\n\n//         localStorage.setItem('userId', userId);\n//         localStorage.setItem('username', username);\n//         localStorage.setItem('token', token);\n\n//         setUserId(userId);\n//         setUsername(username);\n//         setIsLoggedIn(true);  // Set isLoggedIn AFTER setting userId and username\n\n//       }\n//     } catch (error) {\n//       console.error(\"Login error:\", error.response || error.message || error); // Log detailed error\n//       setErrorMessage('Login failed. Please check your credentials.');\n//     }\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     if (!message.trim() || !username) {\n//       console.warn('Cannot send empty message or missing username');\n//       return;\n//     }\n\n//     sendMessage({\n//       user_id: userId,\n//       username: username,\n//       content: message.trim(),\n//     });\n\n//     setMessage('');\n//   };\n\n//   if (!isLoggedIn) {\n//     return (\n//       <div>\n//         <h2>Login to use Chat</h2>\n//         <form onSubmit={handleLogin}>\n//           <div>\n//             <label>Login</label>\n//             <input\n//               type=\"login\"\n//               value={login}\n//               onChange={(e) => setEmail(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <div>\n//             <label>Password</label>\n//             <input\n//               type=\"password\"\n//               value={password}\n//               onChange={(e) => setPassword(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <button type=\"submit\">Login</button>\n//         </form>\n//         {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"connection-status\">\n//         Status: {connectionStatus}\n//       </div>\n//       <div className=\"messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message\">\n//             <span className=\"user\">{msg.username}:</span>\n//             <span className=\"content\">{msg.content}</span>\n//           </div>\n//         ))}\n//       </div>\n//       <form onSubmit={handleSubmit}>\n//         <input\n//           type=\"text\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//           placeholder=\"Type your message...\"\n//         />\n//         <button type=\"submit\">Send</button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default Chat;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import useWebSocket from '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js'; // путь поменяй если другой\n// import '/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/MainLayout.css'; // путь к стилям\n\n// const Chat = () => {\n//   const [message, setMessage] = useState('');\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [errorMessage, setErrorMessage] = useState('');\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n//   const [userId, setUserId] = useState(null);\n//   const [username, setUsername] = useState(null);\n\n//   const {\n//     messages,\n//     sendMessage,\n//     connectionStatus,\n//     connect, // добавляем ручное подключение\n//     disconnect\n//   } = useWebSocket('ws://localhost:8082/ws', { manual: true }); // manual mode!\n\n//   useEffect(() => {\n//     const storedUserId = localStorage.getItem('userId');\n//     const storedUsername = localStorage.getItem('username');\n//     if (storedUserId && storedUsername) {\n//       setUserId(storedUserId);\n//       setUsername(storedUsername);\n//       setIsLoggedIn(true);\n//       connect(); // подключаем WebSocket только если есть данные\n//     }\n//   }, [connect]);\n\n//   const handleLogin = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       const response = await axios.post('http://localhost:8080/login', {\n//         email,\n//         password,\n//       });\n\n//       if (response.status === 200) {\n//         const { userId, username, token } = response.data;\n\n//         if (!userId || !username || username === 'undefined') {\n//           console.warn('Invalid user session, cannot connect');\n//           setErrorMessage('Login failed: server did not provide user info.');\n//           return;\n//         }\n\n//         localStorage.setItem('userId', userId);\n//         localStorage.setItem('username', username);\n//         localStorage.setItem('token', token);\n\n//         setUserId(userId);\n//         setUsername(username);\n//         setIsLoggedIn(true);\n\n//         connect(); // подключаем WebSocket после логина\n\n//       }\n//     } catch (error) {\n//       console.error(error);\n//       setErrorMessage('Login failed. Please check your credentials.');\n//     }\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     if (!message.trim() || !username) {\n//       console.warn('Cannot send empty message or missing username');\n//       return;\n//     }\n\n//     sendMessage({\n//       user_id:  userId,\n//       username: username,\n//       content: message.trim(),\n//     });\n\n//     setMessage('');\n//   };\n\n//   if (!isLoggedIn) {\n//     return (\n//       <div>\n//         <h2>Login to use Chat</h2>\n//         <form onSubmit={handleLogin}>\n//           <div>\n//             <label>Email</label>\n//             <input\n//               type=\"email\"\n//               value={email}\n//               onChange={(e) => setEmail(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <div>\n//             <label>Password</label>\n//             <input\n//               type=\"password\"\n//               value={password}\n//               onChange={(e) => setPassword(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <button type=\"submit\">Login</button>\n//         </form>\n\n//         {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"connection-status\">\n//         Status: {connectionStatus}\n//       </div>\n\n//       <div className=\"messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className=\"message\">\n//             <span className=\"user\">{msg.username}:</span>  \n//             <span className=\"content\">{msg.content}</span>\n//           </div>\n//         ))}\n//       </div>\n\n//       <form onSubmit={handleSubmit} className=\"chat-form\">\n//         <input\n//           type=\"text\"\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//           placeholder=\"Type your message...\"\n//           disabled={connectionStatus !== 'connected'}\n//           className=\"chat-input\"\n//         />\n//         <button\n//           type=\"submit\"\n//           disabled={connectionStatus !== 'connected' || !message.trim()}\n//           className=\"chat-send-button\"\n//         >\n//           Send\n//         </button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default Chat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}