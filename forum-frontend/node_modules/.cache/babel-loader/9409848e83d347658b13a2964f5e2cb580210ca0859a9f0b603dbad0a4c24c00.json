{"ast":null,"code":"var _s = $RefreshSig$();\n// useChat.js\nimport { useState, useEffect, useCallback } from 'react';\nconst useWebSocket = (webSocketUrl, apiUrl, token) => {\n  _s();\n  const [socket, setSocket] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [status, setStatus] = useState('disconnected');\n  const [error, setError] = useState(null);\n\n  // Загрузка истории сообщений\n  const loadHistory = useCallback(async () => {\n    try {\n      const response = await fetch(apiUrl, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) throw new Error('Failed to load history');\n      const history = await response.json();\n      setMessages(history);\n    } catch (err) {\n      setError(err.message);\n      console.error('History load error:', err);\n    }\n  }, [apiUrl, token]);\n\n  // Инициализация WebSocket\n  useEffect(() => {\n    if (!token) {\n      setError('Authentication token is required');\n      return;\n    }\n    const wsUrl = new URL(webSocketUrl);\n    wsUrl.searchParams.append('token', token);\n    const ws = new WebSocket(wsUrl.href);\n    const handleConnection = async () => {\n      try {\n        await loadHistory();\n        ws.onmessage = event => {\n          try {\n            const newMessage = JSON.parse(event.data);\n            setMessages(prev => [...prev, newMessage]);\n          } catch (err) {\n            console.error('Message parse error:', err);\n          }\n        };\n        ws.onclose = event => {\n          console.log('WebSocket closed:', event.code, event.reason);\n          setStatus('disconnected');\n          if (event.code === 4001 || event.code === 4002) {\n            setError('Authentication required');\n          }\n        };\n        ws.onerror = error => {\n          console.error('WebSocket error:', error);\n          setStatus('error');\n        };\n        setSocket(ws);\n        setStatus('connected');\n      } catch (err) {\n        console.error('Initialization error:', err);\n        ws.close();\n      }\n    };\n    ws.onopen = handleConnection;\n    return () => {\n      if (ws && ws.readyState === WebSocket.OPEN) {\n        ws.close();\n      }\n    };\n  }, [webSocketUrl, token, loadHistory]);\n\n  // Отправка сообщения\n  const sendMessage = useCallback(messageText => {\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      const message = {\n        text: messageText,\n        timestamp: new Date().toISOString()\n      };\n      socket.send(JSON.stringify(message));\n    }\n  }, [socket]);\n  return {\n    messages,\n    sendMessage,\n    status,\n    error,\n    retry: loadHistory\n  };\n};\n_s(useWebSocket, \"HqkfsjwP+UynJlNQaNmDa2ptfgQ=\");\nexport default useWebSocket;\n// // useWebSocket.js\n// import { useState, useEffect } from 'react';\n// const useWebSocket = (url) => {\n//     const [socket, setSocket] = useState(null);\n//     const [messages, setMessages] = useState([]);\n//     const [connectionStatus, setConnectionStatus] = useState('disconnected');\n\n//     useEffect(() => {\n//         const ws = new WebSocket(url);\n\n//         ws.onopen = () => {\n//             console.log('WebSocket connected');\n//             setSocket(ws);\n//             setConnectionStatus('connected');\n//         };\n\n//         ws.onmessage = (event) => {\n//             try {\n//                 const newMessage = JSON.parse(event.data);\n//                 setMessages(prev => [...prev, newMessage]);\n//             } catch (err) {\n//                 console.error('Error parsing WebSocket message:', err);\n//             }\n//         };\n\n//         ws.onclose = () => {\n//             console.log('WebSocket disconnected');\n//             setSocket(null);\n//             setConnectionStatus('disconnected');\n//             // Attempt to reconnect after 5 seconds\n//             setTimeout(() => {\n//                 setConnectionStatus('reconnecting');\n//             }, 5000);\n//         };\n\n//         ws.onerror = (error) => {\n//             console.error('WebSocket error:', error);\n//             setConnectionStatus('error');\n//         };\n\n//         return () => {\n//             if (ws && ws.readyState === WebSocket.OPEN) {\n//                 ws.close();\n//             }\n//         };\n//     }, [url]);\n\n//     const sendMessage = (message) => {\n//         if (socket && socket.readyState === WebSocket.OPEN) {\n//             socket.send(JSON.stringify(message));\n//         } else {\n//             console.error('WebSocket is not connected');\n//             // Optionally queue messages when disconnected\n//         }\n//     };\n\n//     return { \n//         socket, \n//         messages, \n//         sendMessage, \n//         connectionStatus \n//     };\n// };\n\n// export default useWebSocket; // Добавьте эту строку\n\n// import { useEffect, useRef, useState, useCallback } from 'react';\n\n// export function useWebSocket(url, { manual = false } = {}) {\n//   const socketRef = useRef(null);\n//   const reconnectTimeoutRef = useRef(null);\n//   const reconnectInterval = useRef(1000);\n//   const [isConnected, setIsConnected] = useState(false);\n//   const [connectionStatus, setConnectionStatus] = useState('disconnected');\n//   const [messages, setMessages] = useState([]);\n//   const [error, setError] = useState(null);\n//   const messageQueue = useRef([]);\n\n//   const getWebSocketUrl = useCallback(() => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         setError('Authentication token not found');\n//         return null;\n//       }\n\n//       const wsUrl = new URL(url);\n//       wsUrl.searchParams.set('token', token);\n//       return wsUrl.toString();\n//     } catch (e) {\n//       console.error('Invalid WebSocket URL:', e);\n//       setError('Invalid WebSocket URL');\n//       return null;\n//     }\n//   }, [url]);\n\n//   const handleIncomingMessage = useCallback((data) => {\n//     switch (data.type) {\n//       case 'MESSAGE':\n//         setMessages(prev => [...prev, data.data]);\n//         break;\n//       case 'HISTORY':\n//         setMessages(data.data);\n//         break;\n//       case 'AUTH_ERROR':\n//         setError(`Authentication error: ${data.message}`);\n//         localStorage.removeItem('token');\n//         window.location.reload();\n//         break;\n//       default:\n//         console.warn('Unhandled message type:', data.type);\n//     }\n//   }, []);\n\n//   const processMessageQueue = () => {\n//     while (messageQueue.current.length > 0 && socketRef.current?.readyState === WebSocket.OPEN) {\n//       const message = messageQueue.current.shift();\n//       socketRef.current.send(JSON.stringify(message));\n//     }\n//   };\n\n//   // 2. Обновленный useWebSocket.js (React)\n// const connect = useCallback(() => {\n//   const wsUrl = getWebSocketUrl();\n//   if (!wsUrl) return;\n\n//   if (socketRef.current) {\n//     if (socketRef.current.readyState === WebSocket.OPEN) {\n//       console.log('Already connected');\n//       return;\n//     }\n//     socketRef.current.close();\n//   }\n\n//   console.log('Attempting WebSocket connection...');\n//   setConnectionStatus('connecting');\n\n//   const ws = new WebSocket(wsUrl);\n//   socketRef.current = ws;\n\n//   ws.onopen = () => {\n//     console.log('WebSocket connected');\n//     setIsConnected(true);\n//     setConnectionStatus('connected');\n//     setError(null);\n//     reconnectInterval.current = 1000;\n//     processMessageQueue();\n\n//     // Запрос истории\n//     const historyRequest = JSON.stringify({\n//       type: 'GET_HISTORY',\n//       timestamp: Date.now()\n//     });\n//     ws.send(historyRequest);\n//   };\n\n//   ws.onmessage = (event) => {\n//     try {\n//       const parsedData = JSON.parse(event.data);\n//       handleIncomingMessage(parsedData);\n//     } catch (e) {\n//       console.error('Message parse error:', e);\n//     }\n//   };\n\n//   ws.onerror = (error) => {\n//     console.error('WebSocket error:', error);\n//     setError('Connection error');\n//     setConnectionStatus('error');\n//   };\n\n//   ws.onclose = (event) => {\n//     console.log(`WebSocket closed: ${event.code}`, event.reason);\n//     setIsConnected(false);\n//     setConnectionStatus('disconnected');\n\n//     if (event.code === 4002) { // Аутентификация\n//       handleIncomingMessage({\n//         type: 'AUTH_ERROR',\n//         message: event.reason || 'Authentication failed'\n//       });\n//       return;\n//     }\n\n//     if (!event.wasClean && event.code !== 1000) {\n//       const timeout = Math.min(reconnectInterval.current * 2, 30000);\n//       reconnectInterval.current = timeout;\n//       console.log(`Reconnecting in ${timeout}ms...`);\n//       reconnectTimeoutRef.current = setTimeout(connect, timeout);\n//     }\n//   };\n// }, [getWebSocketUrl, handleIncomingMessage]);\n\n//   const disconnect = useCallback((permanent = false) => {\n//     if (socketRef.current) {\n//       if (permanent) {\n//         socketRef.current.onclose = null;\n//       }\n//       socketRef.current.close(\n//         permanent ? 1000 : 1001,\n//         permanent ? 'Normal closure' : 'Reconnecting'\n//       );\n//     }\n//     if (reconnectTimeoutRef.current) {\n//       clearTimeout(reconnectTimeoutRef.current);\n//     }\n//   }, []);\n\n//   const sendMessage = useCallback((message) => {\n//     const userId = parseInt(localStorage.getItem('userId'), 10);\n//     if (isNaN(userId)) {\n//       setError('Invalid user ID');\n//       return;\n//     }\n\n//     const fullMessage = {\n//       ...message,\n//       timestamp: Date.now(),\n//       userId,\n//       username: localStorage.getItem('username') || 'unknown'\n//     };\n\n//     if (socketRef.current?.readyState === WebSocket.OPEN) {\n//       try {\n//         socketRef.current.send(JSON.stringify(fullMessage));\n//       } catch (e) {\n//         console.error('Send error:', e);\n//         setError('Failed to send message');\n//       }\n//     } else {\n//       console.warn('Queueing message - connection not ready');\n//       messageQueue.current.push(fullMessage);\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     if (!manual) {\n//       connect();\n//     }\n\n//     return () => {\n//       disconnect(true);\n//       messageQueue.current = [];\n//     };\n//   }, [connect, disconnect, manual]);\n\n//   return {\n//     isConnected,\n//     connectionStatus,\n//     messages,\n//     sendMessage,\n//     connect,\n//     disconnect,\n//     error\n//   };\n// }\n\n// export default useWebSocket;\n// import { useEffect, useRef, useState, useCallback } from 'react';\n\n// export function useWebSocket(url, { manual = false } = {}) {\n//   const socketRef = useRef(null);\n//   const reconnectTimeoutRef = useRef(null);\n//   const [isConnected, setIsConnected] = useState(false);\n//   const [connectionStatus, setConnectionStatus] = useState('disconnected');\n//   const [messages, setMessages] = useState([]);\n//   const [error, setError] = useState(null);\n\n//   const getWebSocketUrl = useCallback(() => {\n//     const token = localStorage.getItem('token');\n//     if (!token) {\n//       setError('Authentication token not found');\n//       return null;\n//     }\n\n//     try {\n//       const wsUrl = new URL(url);\n//       wsUrl.searchParams.set('token', token);\n//       return wsUrl.toString();\n//     } catch (e) {\n//       console.error('Invalid WebSocket URL:', e);\n//       setError('Invalid WebSocket URL');\n//       return null;\n//     }\n//   }, [url]);\n\n//   const handleIncomingMessage = useCallback((data) => {\n//     if (data.type === 'AUTH_ERROR') {\n//       console.error('Authentication error:', data.message);\n//       setError(data.message);\n//       disconnect();\n//       localStorage.removeItem('token');\n//       window.location.reload();\n//       return;\n//     }\n//     setMessages(prev => [...prev, data]);\n//   }, []);\n\n//   const connect = useCallback(() => {\n//     const wsUrl = getWebSocketUrl();\n//     if (!wsUrl) return;\n\n//     if (socketRef.current && \n//       [WebSocket.OPEN, WebSocket.CONNECTING].includes(socketRef.current.readyState)) {\n//       console.warn('WebSocket already connecting or connected');\n//       return;\n//     }\n\n//     setConnectionStatus('connecting');\n//     console.log('Connecting to WebSocket...');\n\n//     socketRef.current = new WebSocket(wsUrl);\n\n//     socketRef.current.onopen = () => {\n//       console.log('WebSocket connected');\n//       setIsConnected(true);\n//       setConnectionStatus('connected');\n//       setError(null);\n//     };\n\n//     socketRef.current.onmessage = (event) => {\n//       try {\n//         const parsedData = JSON.parse(event.data);\n//         handleIncomingMessage(parsedData);\n//       } catch (e) {\n//         console.warn('Non-JSON message:', event.data);\n//         handleIncomingMessage({ content: event.data });\n//       }\n//     };\n\n//     socketRef.current.onerror = (event) => {\n//       console.error('WebSocket error:', event);\n//       setError('WebSocket connection error');\n//       setConnectionStatus('error');\n//     };\n\n//     socketRef.current.onclose = (event) => {\n//       console.log(`WebSocket closed: ${event.code} ${event.reason}`);\n//       setIsConnected(false);\n//       setConnectionStatus('disconnected');\n\n//       if (!event.wasClean && event.code !== 1000) {\n//         console.log('Reconnecting in 3 seconds...');\n//         reconnectTimeoutRef.current = setTimeout(() => {\n//           connect();\n//         }, 3000);\n//       }\n//     };\n//   }, [getWebSocketUrl, handleIncomingMessage]);\n\n//   const disconnect = useCallback((permanent = false) => {\n//     if (socketRef.current) {\n//       if (permanent) {\n//         socketRef.current.onclose = () => {};\n//       }\n//       socketRef.current.close(\n//         permanent ? 1000 : 1001,\n//         permanent ? 'Normal closure' : 'Reconnecting'\n//       );\n//     }\n//     if (reconnectTimeoutRef.current) {\n//       clearTimeout(reconnectTimeoutRef.current);\n//     }\n//   }, []);\n\n//   const sendMessage = useCallback((message) => {\n//     if (socketRef.current?.readyState === WebSocket.OPEN) {\n//       const messageWithAuth = {\n//         ...message,\n//         timestamp: new Date().toISOString(),\n//         user_id: parseInt(localStorage.getItem('userId'), 10),\n//         username: localStorage.getItem('username') || 'unknown',\n//       };\n//       const raw = localStorage.getItem('username');\n//       console.log('Stored username:', raw); // должно быть нормальное имя\n\n//       try {\n//         socketRef.current.send(JSON.stringify(messageWithAuth));\n//       } catch (e) {\n//         console.error('Error sending message:', e);\n//         setError('Failed to send message');\n//       }\n//     } else {\n//       console.error('Cannot send message - WebSocket not open');\n//       setError('Connection not ready');\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     if (!manual) {\n//       connect();\n//     }\n\n//     return () => {\n//       disconnect(true);\n//     };\n//   }, [connect, disconnect, manual]);\n\n//   return {\n//     isConnected,\n//     connectionStatus,\n//     messages,\n//     sendMessage,\n//     connect,\n//     disconnect,\n//     error,\n//   };\n// }\n\n// export default useWebSocket;","map":{"version":3,"names":["useState","useEffect","useCallback","useWebSocket","webSocketUrl","apiUrl","token","_s","socket","setSocket","messages","setMessages","status","setStatus","error","setError","loadHistory","response","fetch","headers","ok","Error","history","json","err","message","console","wsUrl","URL","searchParams","append","ws","WebSocket","href","handleConnection","onmessage","event","newMessage","JSON","parse","data","prev","onclose","log","code","reason","onerror","close","onopen","readyState","OPEN","sendMessage","messageText","text","timestamp","Date","toISOString","send","stringify","retry"],"sources":["/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js"],"sourcesContent":["// useChat.js\nimport { useState, useEffect, useCallback } from 'react';\n\nconst useWebSocket = (webSocketUrl, apiUrl, token) => {\n  const [socket, setSocket] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [status, setStatus] = useState('disconnected');\n  const [error, setError] = useState(null);\n\n  // Загрузка истории сообщений\n  const loadHistory = useCallback(async () => {\n    try {\n      const response = await fetch(apiUrl, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      \n      if (!response.ok) throw new Error('Failed to load history');\n      \n      const history = await response.json();\n      setMessages(history);\n    } catch (err) {\n      setError(err.message);\n      console.error('History load error:', err);\n    }\n  }, [apiUrl, token]);\n\n  // Инициализация WebSocket\n  useEffect(() => {\n    if (!token) {\n      setError('Authentication token is required');\n      return;\n    }\n\n    const wsUrl = new URL(webSocketUrl);\n    wsUrl.searchParams.append('token', token);\n    \n    const ws = new WebSocket(wsUrl.href);\n    \n    const handleConnection = async () => {\n      try {\n        await loadHistory();\n        \n        ws.onmessage = (event) => {\n          try {\n            const newMessage = JSON.parse(event.data);\n            setMessages(prev => [...prev, newMessage]);\n          } catch (err) {\n            console.error('Message parse error:', err);\n          }\n        };\n\n        ws.onclose = (event) => {\n          console.log('WebSocket closed:', event.code, event.reason);\n          setStatus('disconnected');\n          \n          if (event.code === 4001 || event.code === 4002) {\n            setError('Authentication required');\n          }\n        };\n\n        ws.onerror = (error) => {\n          console.error('WebSocket error:', error);\n          setStatus('error');\n        };\n\n        setSocket(ws);\n        setStatus('connected');\n        \n      } catch (err) {\n        console.error('Initialization error:', err);\n        ws.close();\n      }\n    };\n\n    ws.onopen = handleConnection;\n\n    return () => {\n      if (ws && ws.readyState === WebSocket.OPEN) {\n        ws.close();\n      }\n    };\n  }, [webSocketUrl, token, loadHistory]);\n\n  // Отправка сообщения\n  const sendMessage = useCallback((messageText) => {\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      const message = {\n        text: messageText,\n        timestamp: new Date().toISOString()\n      };\n      socket.send(JSON.stringify(message));\n    }\n  }, [socket]);\n\n  return {\n    messages,\n    sendMessage,\n    status,\n    error,\n    retry: loadHistory\n  };\n};\n\nexport default useWebSocket;\n// // useWebSocket.js\n// import { useState, useEffect } from 'react';\n// const useWebSocket = (url) => {\n//     const [socket, setSocket] = useState(null);\n//     const [messages, setMessages] = useState([]);\n//     const [connectionStatus, setConnectionStatus] = useState('disconnected');\n\n//     useEffect(() => {\n//         const ws = new WebSocket(url);\n        \n//         ws.onopen = () => {\n//             console.log('WebSocket connected');\n//             setSocket(ws);\n//             setConnectionStatus('connected');\n//         };\n\n//         ws.onmessage = (event) => {\n//             try {\n//                 const newMessage = JSON.parse(event.data);\n//                 setMessages(prev => [...prev, newMessage]);\n//             } catch (err) {\n//                 console.error('Error parsing WebSocket message:', err);\n//             }\n//         };\n\n//         ws.onclose = () => {\n//             console.log('WebSocket disconnected');\n//             setSocket(null);\n//             setConnectionStatus('disconnected');\n//             // Attempt to reconnect after 5 seconds\n//             setTimeout(() => {\n//                 setConnectionStatus('reconnecting');\n//             }, 5000);\n//         };\n\n//         ws.onerror = (error) => {\n//             console.error('WebSocket error:', error);\n//             setConnectionStatus('error');\n//         };\n\n//         return () => {\n//             if (ws && ws.readyState === WebSocket.OPEN) {\n//                 ws.close();\n//             }\n//         };\n//     }, [url]);\n\n//     const sendMessage = (message) => {\n//         if (socket && socket.readyState === WebSocket.OPEN) {\n//             socket.send(JSON.stringify(message));\n//         } else {\n//             console.error('WebSocket is not connected');\n//             // Optionally queue messages when disconnected\n//         }\n//     };\n\n//     return { \n//         socket, \n//         messages, \n//         sendMessage, \n//         connectionStatus \n//     };\n// };\n\n// export default useWebSocket; // Добавьте эту строку\n\n// import { useEffect, useRef, useState, useCallback } from 'react';\n\n// export function useWebSocket(url, { manual = false } = {}) {\n//   const socketRef = useRef(null);\n//   const reconnectTimeoutRef = useRef(null);\n//   const reconnectInterval = useRef(1000);\n//   const [isConnected, setIsConnected] = useState(false);\n//   const [connectionStatus, setConnectionStatus] = useState('disconnected');\n//   const [messages, setMessages] = useState([]);\n//   const [error, setError] = useState(null);\n//   const messageQueue = useRef([]);\n\n//   const getWebSocketUrl = useCallback(() => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         setError('Authentication token not found');\n//         return null;\n//       }\n      \n//       const wsUrl = new URL(url);\n//       wsUrl.searchParams.set('token', token);\n//       return wsUrl.toString();\n//     } catch (e) {\n//       console.error('Invalid WebSocket URL:', e);\n//       setError('Invalid WebSocket URL');\n//       return null;\n//     }\n//   }, [url]);\n\n//   const handleIncomingMessage = useCallback((data) => {\n//     switch (data.type) {\n//       case 'MESSAGE':\n//         setMessages(prev => [...prev, data.data]);\n//         break;\n//       case 'HISTORY':\n//         setMessages(data.data);\n//         break;\n//       case 'AUTH_ERROR':\n//         setError(`Authentication error: ${data.message}`);\n//         localStorage.removeItem('token');\n//         window.location.reload();\n//         break;\n//       default:\n//         console.warn('Unhandled message type:', data.type);\n//     }\n//   }, []);\n\n//   const processMessageQueue = () => {\n//     while (messageQueue.current.length > 0 && socketRef.current?.readyState === WebSocket.OPEN) {\n//       const message = messageQueue.current.shift();\n//       socketRef.current.send(JSON.stringify(message));\n//     }\n//   };\n\n//   // 2. Обновленный useWebSocket.js (React)\n// const connect = useCallback(() => {\n//   const wsUrl = getWebSocketUrl();\n//   if (!wsUrl) return;\n\n//   if (socketRef.current) {\n//     if (socketRef.current.readyState === WebSocket.OPEN) {\n//       console.log('Already connected');\n//       return;\n//     }\n//     socketRef.current.close();\n//   }\n\n//   console.log('Attempting WebSocket connection...');\n//   setConnectionStatus('connecting');\n  \n//   const ws = new WebSocket(wsUrl);\n//   socketRef.current = ws;\n\n//   ws.onopen = () => {\n//     console.log('WebSocket connected');\n//     setIsConnected(true);\n//     setConnectionStatus('connected');\n//     setError(null);\n//     reconnectInterval.current = 1000;\n//     processMessageQueue();\n    \n//     // Запрос истории\n//     const historyRequest = JSON.stringify({\n//       type: 'GET_HISTORY',\n//       timestamp: Date.now()\n//     });\n//     ws.send(historyRequest);\n//   };\n\n//   ws.onmessage = (event) => {\n//     try {\n//       const parsedData = JSON.parse(event.data);\n//       handleIncomingMessage(parsedData);\n//     } catch (e) {\n//       console.error('Message parse error:', e);\n//     }\n//   };\n\n//   ws.onerror = (error) => {\n//     console.error('WebSocket error:', error);\n//     setError('Connection error');\n//     setConnectionStatus('error');\n//   };\n\n//   ws.onclose = (event) => {\n//     console.log(`WebSocket closed: ${event.code}`, event.reason);\n//     setIsConnected(false);\n//     setConnectionStatus('disconnected');\n\n//     if (event.code === 4002) { // Аутентификация\n//       handleIncomingMessage({\n//         type: 'AUTH_ERROR',\n//         message: event.reason || 'Authentication failed'\n//       });\n//       return;\n//     }\n\n//     if (!event.wasClean && event.code !== 1000) {\n//       const timeout = Math.min(reconnectInterval.current * 2, 30000);\n//       reconnectInterval.current = timeout;\n//       console.log(`Reconnecting in ${timeout}ms...`);\n//       reconnectTimeoutRef.current = setTimeout(connect, timeout);\n//     }\n//   };\n// }, [getWebSocketUrl, handleIncomingMessage]);\n\n//   const disconnect = useCallback((permanent = false) => {\n//     if (socketRef.current) {\n//       if (permanent) {\n//         socketRef.current.onclose = null;\n//       }\n//       socketRef.current.close(\n//         permanent ? 1000 : 1001,\n//         permanent ? 'Normal closure' : 'Reconnecting'\n//       );\n//     }\n//     if (reconnectTimeoutRef.current) {\n//       clearTimeout(reconnectTimeoutRef.current);\n//     }\n//   }, []);\n\n//   const sendMessage = useCallback((message) => {\n//     const userId = parseInt(localStorage.getItem('userId'), 10);\n//     if (isNaN(userId)) {\n//       setError('Invalid user ID');\n//       return;\n//     }\n    \n//     const fullMessage = {\n//       ...message,\n//       timestamp: Date.now(),\n//       userId,\n//       username: localStorage.getItem('username') || 'unknown'\n//     };\n\n//     if (socketRef.current?.readyState === WebSocket.OPEN) {\n//       try {\n//         socketRef.current.send(JSON.stringify(fullMessage));\n//       } catch (e) {\n//         console.error('Send error:', e);\n//         setError('Failed to send message');\n//       }\n//     } else {\n//       console.warn('Queueing message - connection not ready');\n//       messageQueue.current.push(fullMessage);\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     if (!manual) {\n//       connect();\n//     }\n\n//     return () => {\n//       disconnect(true);\n//       messageQueue.current = [];\n//     };\n//   }, [connect, disconnect, manual]);\n\n//   return {\n//     isConnected,\n//     connectionStatus,\n//     messages,\n//     sendMessage,\n//     connect,\n//     disconnect,\n//     error\n//   };\n// }\n\n// export default useWebSocket;\n// import { useEffect, useRef, useState, useCallback } from 'react';\n\n// export function useWebSocket(url, { manual = false } = {}) {\n//   const socketRef = useRef(null);\n//   const reconnectTimeoutRef = useRef(null);\n//   const [isConnected, setIsConnected] = useState(false);\n//   const [connectionStatus, setConnectionStatus] = useState('disconnected');\n//   const [messages, setMessages] = useState([]);\n//   const [error, setError] = useState(null);\n\n//   const getWebSocketUrl = useCallback(() => {\n//     const token = localStorage.getItem('token');\n//     if (!token) {\n//       setError('Authentication token not found');\n//       return null;\n//     }\n\n//     try {\n//       const wsUrl = new URL(url);\n//       wsUrl.searchParams.set('token', token);\n//       return wsUrl.toString();\n//     } catch (e) {\n//       console.error('Invalid WebSocket URL:', e);\n//       setError('Invalid WebSocket URL');\n//       return null;\n//     }\n//   }, [url]);\n\n//   const handleIncomingMessage = useCallback((data) => {\n//     if (data.type === 'AUTH_ERROR') {\n//       console.error('Authentication error:', data.message);\n//       setError(data.message);\n//       disconnect();\n//       localStorage.removeItem('token');\n//       window.location.reload();\n//       return;\n//     }\n//     setMessages(prev => [...prev, data]);\n//   }, []);\n\n//   const connect = useCallback(() => {\n//     const wsUrl = getWebSocketUrl();\n//     if (!wsUrl) return;\n\n//     if (socketRef.current && \n//       [WebSocket.OPEN, WebSocket.CONNECTING].includes(socketRef.current.readyState)) {\n//       console.warn('WebSocket already connecting or connected');\n//       return;\n//     }\n\n//     setConnectionStatus('connecting');\n//     console.log('Connecting to WebSocket...');\n\n//     socketRef.current = new WebSocket(wsUrl);\n\n//     socketRef.current.onopen = () => {\n//       console.log('WebSocket connected');\n//       setIsConnected(true);\n//       setConnectionStatus('connected');\n//       setError(null);\n//     };\n\n//     socketRef.current.onmessage = (event) => {\n//       try {\n//         const parsedData = JSON.parse(event.data);\n//         handleIncomingMessage(parsedData);\n//       } catch (e) {\n//         console.warn('Non-JSON message:', event.data);\n//         handleIncomingMessage({ content: event.data });\n//       }\n//     };\n\n//     socketRef.current.onerror = (event) => {\n//       console.error('WebSocket error:', event);\n//       setError('WebSocket connection error');\n//       setConnectionStatus('error');\n//     };\n\n//     socketRef.current.onclose = (event) => {\n//       console.log(`WebSocket closed: ${event.code} ${event.reason}`);\n//       setIsConnected(false);\n//       setConnectionStatus('disconnected');\n\n//       if (!event.wasClean && event.code !== 1000) {\n//         console.log('Reconnecting in 3 seconds...');\n//         reconnectTimeoutRef.current = setTimeout(() => {\n//           connect();\n//         }, 3000);\n//       }\n//     };\n//   }, [getWebSocketUrl, handleIncomingMessage]);\n\n//   const disconnect = useCallback((permanent = false) => {\n//     if (socketRef.current) {\n//       if (permanent) {\n//         socketRef.current.onclose = () => {};\n//       }\n//       socketRef.current.close(\n//         permanent ? 1000 : 1001,\n//         permanent ? 'Normal closure' : 'Reconnecting'\n//       );\n//     }\n//     if (reconnectTimeoutRef.current) {\n//       clearTimeout(reconnectTimeoutRef.current);\n//     }\n//   }, []);\n\n//   const sendMessage = useCallback((message) => {\n//     if (socketRef.current?.readyState === WebSocket.OPEN) {\n//       const messageWithAuth = {\n//         ...message,\n//         timestamp: new Date().toISOString(),\n//         user_id: parseInt(localStorage.getItem('userId'), 10),\n//         username: localStorage.getItem('username') || 'unknown',\n//       };\n//       const raw = localStorage.getItem('username');\n//       console.log('Stored username:', raw); // должно быть нормальное имя\n      \n//       try {\n//         socketRef.current.send(JSON.stringify(messageWithAuth));\n//       } catch (e) {\n//         console.error('Error sending message:', e);\n//         setError('Failed to send message');\n//       }\n//     } else {\n//       console.error('Cannot send message - WebSocket not open');\n//       setError('Connection not ready');\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     if (!manual) {\n//       connect();\n//     }\n\n//     return () => {\n//       disconnect(true);\n//     };\n//   }, [connect, disconnect, manual]);\n\n//   return {\n//     isConnected,\n//     connectionStatus,\n//     messages,\n//     sendMessage,\n//     connect,\n//     disconnect,\n//     error,\n//   };\n// }\n\n// export default useWebSocket;"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAExD,MAAMC,YAAY,GAAGA,CAACC,YAAY,EAAEC,MAAM,EAAEC,KAAK,KAAK;EAAAC,EAAA;EACpD,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,cAAc,CAAC;EACpD,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA,MAAMgB,WAAW,GAAGd,WAAW,CAAC,YAAY;IAC1C,IAAI;MACF,MAAMe,QAAQ,GAAG,MAAMC,KAAK,CAACb,MAAM,EAAE;QACnCc,OAAO,EAAE;UACP,eAAe,EAAE,UAAUb,KAAK;QAClC;MACF,CAAC,CAAC;MAEF,IAAI,CAACW,QAAQ,CAACG,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;MAE3D,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MACrCZ,WAAW,CAACW,OAAO,CAAC;IACtB,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZT,QAAQ,CAACS,GAAG,CAACC,OAAO,CAAC;MACrBC,OAAO,CAACZ,KAAK,CAAC,qBAAqB,EAAEU,GAAG,CAAC;IAC3C;EACF,CAAC,EAAE,CAACnB,MAAM,EAAEC,KAAK,CAAC,CAAC;;EAEnB;EACAL,SAAS,CAAC,MAAM;IACd,IAAI,CAACK,KAAK,EAAE;MACVS,QAAQ,CAAC,kCAAkC,CAAC;MAC5C;IACF;IAEA,MAAMY,KAAK,GAAG,IAAIC,GAAG,CAACxB,YAAY,CAAC;IACnCuB,KAAK,CAACE,YAAY,CAACC,MAAM,CAAC,OAAO,EAAExB,KAAK,CAAC;IAEzC,MAAMyB,EAAE,GAAG,IAAIC,SAAS,CAACL,KAAK,CAACM,IAAI,CAAC;IAEpC,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACF,MAAMlB,WAAW,CAAC,CAAC;QAEnBe,EAAE,CAACI,SAAS,GAAIC,KAAK,IAAK;UACxB,IAAI;YACF,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,IAAI,CAAC;YACzC7B,WAAW,CAAC8B,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEJ,UAAU,CAAC,CAAC;UAC5C,CAAC,CAAC,OAAOb,GAAG,EAAE;YACZE,OAAO,CAACZ,KAAK,CAAC,sBAAsB,EAAEU,GAAG,CAAC;UAC5C;QACF,CAAC;QAEDO,EAAE,CAACW,OAAO,GAAIN,KAAK,IAAK;UACtBV,OAAO,CAACiB,GAAG,CAAC,mBAAmB,EAAEP,KAAK,CAACQ,IAAI,EAAER,KAAK,CAACS,MAAM,CAAC;UAC1DhC,SAAS,CAAC,cAAc,CAAC;UAEzB,IAAIuB,KAAK,CAACQ,IAAI,KAAK,IAAI,IAAIR,KAAK,CAACQ,IAAI,KAAK,IAAI,EAAE;YAC9C7B,QAAQ,CAAC,yBAAyB,CAAC;UACrC;QACF,CAAC;QAEDgB,EAAE,CAACe,OAAO,GAAIhC,KAAK,IAAK;UACtBY,OAAO,CAACZ,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;UACxCD,SAAS,CAAC,OAAO,CAAC;QACpB,CAAC;QAEDJ,SAAS,CAACsB,EAAE,CAAC;QACblB,SAAS,CAAC,WAAW,CAAC;MAExB,CAAC,CAAC,OAAOW,GAAG,EAAE;QACZE,OAAO,CAACZ,KAAK,CAAC,uBAAuB,EAAEU,GAAG,CAAC;QAC3CO,EAAE,CAACgB,KAAK,CAAC,CAAC;MACZ;IACF,CAAC;IAEDhB,EAAE,CAACiB,MAAM,GAAGd,gBAAgB;IAE5B,OAAO,MAAM;MACX,IAAIH,EAAE,IAAIA,EAAE,CAACkB,UAAU,KAAKjB,SAAS,CAACkB,IAAI,EAAE;QAC1CnB,EAAE,CAACgB,KAAK,CAAC,CAAC;MACZ;IACF,CAAC;EACH,CAAC,EAAE,CAAC3C,YAAY,EAAEE,KAAK,EAAEU,WAAW,CAAC,CAAC;;EAEtC;EACA,MAAMmC,WAAW,GAAGjD,WAAW,CAAEkD,WAAW,IAAK;IAC/C,IAAI5C,MAAM,IAAIA,MAAM,CAACyC,UAAU,KAAKjB,SAAS,CAACkB,IAAI,EAAE;MAClD,MAAMzB,OAAO,GAAG;QACd4B,IAAI,EAAED,WAAW;QACjBE,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC;MACDhD,MAAM,CAACiD,IAAI,CAACnB,IAAI,CAACoB,SAAS,CAACjC,OAAO,CAAC,CAAC;IACtC;EACF,CAAC,EAAE,CAACjB,MAAM,CAAC,CAAC;EAEZ,OAAO;IACLE,QAAQ;IACRyC,WAAW;IACXvC,MAAM;IACNE,KAAK;IACL6C,KAAK,EAAE3C;EACT,CAAC;AACH,CAAC;AAACT,EAAA,CApGIJ,YAAY;AAsGlB,eAAeA,YAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}