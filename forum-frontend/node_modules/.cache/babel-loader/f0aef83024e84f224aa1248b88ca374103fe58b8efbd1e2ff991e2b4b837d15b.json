{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState, useCallback } from 'react';\nexport function useWebSocket(url, {\n  manual = false\n} = {}) {\n  _s();\n  const socketRef = useRef(null);\n  const reconnectTimeoutRef = useRef(null);\n  const reconnectInterval = useRef(1000);\n  const [isConnected, setIsConnected] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\n  const [messages, setMessages] = useState([]);\n  const [error, setError] = useState(null);\n  const messageQueue = useRef([]);\n  const getWebSocketUrl = useCallback(() => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        setError('Authentication token not found');\n        return null;\n      }\n      const wsUrl = new URL(url);\n      wsUrl.searchParams.set('token', token);\n      return wsUrl.toString();\n    } catch (e) {\n      console.error('Invalid WebSocket URL:', e);\n      setError('Invalid WebSocket URL');\n      return null;\n    }\n  }, [url]);\n  const handleIncomingMessage = useCallback(data => {\n    switch (data.type) {\n      case 'MESSAGE':\n        setMessages(prev => [...prev, data.data]);\n        break;\n      case 'HISTORY':\n        setMessages(data.data);\n        break;\n      case 'AUTH_ERROR':\n        setError(`Authentication error: ${data.message}`);\n        localStorage.removeItem('token');\n        window.location.reload();\n        break;\n      default:\n        console.warn('Unhandled message type:', data.type);\n    }\n  }, []);\n  const processMessageQueue = () => {\n    while (messageQueue.current.length > 0 && ((_socketRef$current = socketRef.current) === null || _socketRef$current === void 0 ? void 0 : _socketRef$current.readyState) === WebSocket.OPEN) {\n      var _socketRef$current;\n      const message = messageQueue.current.shift();\n      socketRef.current.send(JSON.stringify(message));\n    }\n  };\n  const connect = useCallback(() => {\n    var _socketRef$current2;\n    const wsUrl = getWebSocketUrl();\n    if (!wsUrl) return;\n    if (((_socketRef$current2 = socketRef.current) === null || _socketRef$current2 === void 0 ? void 0 : _socketRef$current2.readyState) === WebSocket.OPEN) {\n      console.log('Already connected');\n      return;\n    }\n    setConnectionStatus('connecting');\n    console.log('Connecting to WebSocket...', wsUrl);\n    socketRef.current = new WebSocket(wsUrl);\n    socketRef.current.onopen = () => {\n      console.log('WebSocket connected');\n      setIsConnected(true);\n      setConnectionStatus('connected');\n      setError(null);\n      reconnectInterval.current = 1000;\n      processMessageQueue();\n\n      // Запрос истории сообщений\n      socketRef.current.send(JSON.stringify({\n        type: 'GET_HISTORY',\n        timestamp: Date.now()\n      }));\n    };\n    socketRef.current.onmessage = event => {\n      try {\n        const parsedData = JSON.parse(event.data);\n        handleIncomingMessage(parsedData);\n      } catch (e) {\n        console.warn('Message parse error:', e, 'Raw data:', event.data);\n      }\n    };\n    socketRef.current.onerror = event => {\n      console.error('WebSocket error:', event);\n      setError('Connection error');\n      setConnectionStatus('error');\n    };\n    socketRef.current.onclose = event => {\n      console.log(`WebSocket closed: ${event.code}`, event.reason);\n      setIsConnected(false);\n      setConnectionStatus('disconnected');\n      if (event.code !== 1000 && !event.wasClean) {\n        const timeout = Math.min(reconnectInterval.current * 2, 30000);\n        reconnectInterval.current = timeout;\n        console.log(`Reconnecting in ${timeout}ms...`);\n        reconnectTimeoutRef.current = setTimeout(connect, timeout);\n      }\n    };\n  }, [getWebSocketUrl, handleIncomingMessage]);\n  const disconnect = useCallback((permanent = false) => {\n    if (socketRef.current) {\n      if (permanent) {\n        socketRef.current.onclose = null;\n      }\n      socketRef.current.close(permanent ? 1000 : 1001, permanent ? 'Normal closure' : 'Reconnecting');\n    }\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n    }\n  }, []);\n  const sendMessage = useCallback(message => {\n    var _socketRef$current3;\n    const fullMessage = {\n      ...message,\n      timestamp: Date.now(),\n      userId: parseInt(localStorage.getItem('userId'), 10),\n      username: localStorage.getItem('username') || 'unknown'\n    };\n    if (((_socketRef$current3 = socketRef.current) === null || _socketRef$current3 === void 0 ? void 0 : _socketRef$current3.readyState) === WebSocket.OPEN) {\n      try {\n        socketRef.current.send(JSON.stringify(fullMessage));\n      } catch (e) {\n        console.error('Send error:', e);\n        setError('Failed to send message');\n      }\n    } else {\n      console.warn('Queueing message - connection not ready');\n      messageQueue.current.push(fullMessage);\n    }\n  }, []);\n  useEffect(() => {\n    if (!manual) {\n      connect();\n    }\n    return () => {\n      disconnect(true);\n      messageQueue.current = [];\n    };\n  }, [connect, disconnect, manual]);\n  return {\n    isConnected,\n    connectionStatus,\n    messages,\n    sendMessage,\n    connect,\n    disconnect,\n    error\n  };\n}\n_s(useWebSocket, \"w6m2WdmUtH3IgEjQjr9T/afgwQI=\");\nexport default useWebSocket;\n// import { useEffect, useRef, useState, useCallback } from 'react';\n\n// export function useWebSocket(url, { manual = false } = {}) {\n//   const socketRef = useRef(null);\n//   const reconnectTimeoutRef = useRef(null);\n//   const [isConnected, setIsConnected] = useState(false);\n//   const [connectionStatus, setConnectionStatus] = useState('disconnected');\n//   const [messages, setMessages] = useState([]);\n//   const [error, setError] = useState(null);\n\n//   const getWebSocketUrl = useCallback(() => {\n//     const token = localStorage.getItem('token');\n//     if (!token) {\n//       setError('Authentication token not found');\n//       return null;\n//     }\n\n//     try {\n//       const wsUrl = new URL(url);\n//       wsUrl.searchParams.set('token', token);\n//       return wsUrl.toString();\n//     } catch (e) {\n//       console.error('Invalid WebSocket URL:', e);\n//       setError('Invalid WebSocket URL');\n//       return null;\n//     }\n//   }, [url]);\n\n//   const handleIncomingMessage = useCallback((data) => {\n//     if (data.type === 'AUTH_ERROR') {\n//       console.error('Authentication error:', data.message);\n//       setError(data.message);\n//       disconnect();\n//       localStorage.removeItem('token');\n//       window.location.reload();\n//       return;\n//     }\n//     setMessages(prev => [...prev, data]);\n//   }, []);\n\n//   const connect = useCallback(() => {\n//     const wsUrl = getWebSocketUrl();\n//     if (!wsUrl) return;\n\n//     if (socketRef.current && \n//       [WebSocket.OPEN, WebSocket.CONNECTING].includes(socketRef.current.readyState)) {\n//       console.warn('WebSocket already connecting or connected');\n//       return;\n//     }\n\n//     setConnectionStatus('connecting');\n//     console.log('Connecting to WebSocket...');\n\n//     socketRef.current = new WebSocket(wsUrl);\n\n//     socketRef.current.onopen = () => {\n//       console.log('WebSocket connected');\n//       setIsConnected(true);\n//       setConnectionStatus('connected');\n//       setError(null);\n//     };\n\n//     socketRef.current.onmessage = (event) => {\n//       try {\n//         const parsedData = JSON.parse(event.data);\n//         handleIncomingMessage(parsedData);\n//       } catch (e) {\n//         console.warn('Non-JSON message:', event.data);\n//         handleIncomingMessage({ content: event.data });\n//       }\n//     };\n\n//     socketRef.current.onerror = (event) => {\n//       console.error('WebSocket error:', event);\n//       setError('WebSocket connection error');\n//       setConnectionStatus('error');\n//     };\n\n//     socketRef.current.onclose = (event) => {\n//       console.log(`WebSocket closed: ${event.code} ${event.reason}`);\n//       setIsConnected(false);\n//       setConnectionStatus('disconnected');\n\n//       if (!event.wasClean && event.code !== 1000) {\n//         console.log('Reconnecting in 3 seconds...');\n//         reconnectTimeoutRef.current = setTimeout(() => {\n//           connect();\n//         }, 3000);\n//       }\n//     };\n//   }, [getWebSocketUrl, handleIncomingMessage]);\n\n//   const disconnect = useCallback((permanent = false) => {\n//     if (socketRef.current) {\n//       if (permanent) {\n//         socketRef.current.onclose = () => {};\n//       }\n//       socketRef.current.close(\n//         permanent ? 1000 : 1001,\n//         permanent ? 'Normal closure' : 'Reconnecting'\n//       );\n//     }\n//     if (reconnectTimeoutRef.current) {\n//       clearTimeout(reconnectTimeoutRef.current);\n//     }\n//   }, []);\n\n//   const sendMessage = useCallback((message) => {\n//     if (socketRef.current?.readyState === WebSocket.OPEN) {\n//       const messageWithAuth = {\n//         ...message,\n//         timestamp: new Date().toISOString(),\n//         user_id: parseInt(localStorage.getItem('userId'), 10),\n//         username: localStorage.getItem('username') || 'unknown',\n//       };\n//       const raw = localStorage.getItem('username');\n//       console.log('Stored username:', raw); // должно быть нормальное имя\n\n//       try {\n//         socketRef.current.send(JSON.stringify(messageWithAuth));\n//       } catch (e) {\n//         console.error('Error sending message:', e);\n//         setError('Failed to send message');\n//       }\n//     } else {\n//       console.error('Cannot send message - WebSocket not open');\n//       setError('Connection not ready');\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     if (!manual) {\n//       connect();\n//     }\n\n//     return () => {\n//       disconnect(true);\n//     };\n//   }, [connect, disconnect, manual]);\n\n//   return {\n//     isConnected,\n//     connectionStatus,\n//     messages,\n//     sendMessage,\n//     connect,\n//     disconnect,\n//     error,\n//   };\n// }\n\n// export default useWebSocket;","map":{"version":3,"names":["useEffect","useRef","useState","useCallback","useWebSocket","url","manual","_s","socketRef","reconnectTimeoutRef","reconnectInterval","isConnected","setIsConnected","connectionStatus","setConnectionStatus","messages","setMessages","error","setError","messageQueue","getWebSocketUrl","token","localStorage","getItem","wsUrl","URL","searchParams","set","toString","e","console","handleIncomingMessage","data","type","prev","message","removeItem","window","location","reload","warn","processMessageQueue","current","length","_socketRef$current","readyState","WebSocket","OPEN","shift","send","JSON","stringify","connect","_socketRef$current2","log","onopen","timestamp","Date","now","onmessage","event","parsedData","parse","onerror","onclose","code","reason","wasClean","timeout","Math","min","setTimeout","disconnect","permanent","close","clearTimeout","sendMessage","_socketRef$current3","fullMessage","userId","parseInt","username","push"],"sources":["/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/hooks/useWebSocket.js"],"sourcesContent":["import { useEffect, useRef, useState, useCallback } from 'react';\n\nexport function useWebSocket(url, { manual = false } = {}) {\n  const socketRef = useRef(null);\n  const reconnectTimeoutRef = useRef(null);\n  const reconnectInterval = useRef(1000);\n  const [isConnected, setIsConnected] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\n  const [messages, setMessages] = useState([]);\n  const [error, setError] = useState(null);\n  const messageQueue = useRef([]);\n\n  const getWebSocketUrl = useCallback(() => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        setError('Authentication token not found');\n        return null;\n      }\n      \n      const wsUrl = new URL(url);\n      wsUrl.searchParams.set('token', token);\n      return wsUrl.toString();\n    } catch (e) {\n      console.error('Invalid WebSocket URL:', e);\n      setError('Invalid WebSocket URL');\n      return null;\n    }\n  }, [url]);\n\n  const handleIncomingMessage = useCallback((data) => {\n    switch (data.type) {\n      case 'MESSAGE':\n        setMessages(prev => [...prev, data.data]);\n        break;\n      case 'HISTORY':\n        setMessages(data.data);\n        break;\n      case 'AUTH_ERROR':\n        setError(`Authentication error: ${data.message}`);\n        localStorage.removeItem('token');\n        window.location.reload();\n        break;\n      default:\n        console.warn('Unhandled message type:', data.type);\n    }\n  }, []);\n\n  const processMessageQueue = () => {\n    while (messageQueue.current.length > 0 && socketRef.current?.readyState === WebSocket.OPEN) {\n      const message = messageQueue.current.shift();\n      socketRef.current.send(JSON.stringify(message));\n    }\n  };\n\n  const connect = useCallback(() => {\n    const wsUrl = getWebSocketUrl();\n    if (!wsUrl) return;\n\n    if (socketRef.current?.readyState === WebSocket.OPEN) {\n      console.log('Already connected');\n      return;\n    }\n\n    setConnectionStatus('connecting');\n    console.log('Connecting to WebSocket...', wsUrl);\n\n    socketRef.current = new WebSocket(wsUrl);\n\n    socketRef.current.onopen = () => {\n      console.log('WebSocket connected');\n      setIsConnected(true);\n      setConnectionStatus('connected');\n      setError(null);\n      reconnectInterval.current = 1000;\n      processMessageQueue();\n      \n      // Запрос истории сообщений\n      socketRef.current.send(JSON.stringify({ \n        type: 'GET_HISTORY',\n        timestamp: Date.now()\n      }));\n    };\n\n    socketRef.current.onmessage = (event) => {\n      try {\n        const parsedData = JSON.parse(event.data);\n        handleIncomingMessage(parsedData);\n      } catch (e) {\n        console.warn('Message parse error:', e, 'Raw data:', event.data);\n      }\n    };\n\n    socketRef.current.onerror = (event) => {\n      console.error('WebSocket error:', event);\n      setError('Connection error');\n      setConnectionStatus('error');\n    };\n\n    socketRef.current.onclose = (event) => {\n      console.log(`WebSocket closed: ${event.code}`, event.reason);\n      setIsConnected(false);\n      setConnectionStatus('disconnected');\n\n      if (event.code !== 1000 && !event.wasClean) {\n        const timeout = Math.min(reconnectInterval.current * 2, 30000);\n        reconnectInterval.current = timeout;\n        console.log(`Reconnecting in ${timeout}ms...`);\n        reconnectTimeoutRef.current = setTimeout(connect, timeout);\n      }\n    };\n  }, [getWebSocketUrl, handleIncomingMessage]);\n\n  const disconnect = useCallback((permanent = false) => {\n    if (socketRef.current) {\n      if (permanent) {\n        socketRef.current.onclose = null;\n      }\n      socketRef.current.close(\n        permanent ? 1000 : 1001,\n        permanent ? 'Normal closure' : 'Reconnecting'\n      );\n    }\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n    }\n  }, []);\n\n  const sendMessage = useCallback((message) => {\n    const fullMessage = {\n      ...message,\n      timestamp: Date.now(),\n      userId: parseInt(localStorage.getItem('userId'), 10),\n      username: localStorage.getItem('username') || 'unknown'\n    };\n\n    if (socketRef.current?.readyState === WebSocket.OPEN) {\n      try {\n        socketRef.current.send(JSON.stringify(fullMessage));\n      } catch (e) {\n        console.error('Send error:', e);\n        setError('Failed to send message');\n      }\n    } else {\n      console.warn('Queueing message - connection not ready');\n      messageQueue.current.push(fullMessage);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!manual) {\n      connect();\n    }\n\n    return () => {\n      disconnect(true);\n      messageQueue.current = [];\n    };\n  }, [connect, disconnect, manual]);\n\n  return {\n    isConnected,\n    connectionStatus,\n    messages,\n    sendMessage,\n    connect,\n    disconnect,\n    error\n  };\n}\n\nexport default useWebSocket;\n// import { useEffect, useRef, useState, useCallback } from 'react';\n\n// export function useWebSocket(url, { manual = false } = {}) {\n//   const socketRef = useRef(null);\n//   const reconnectTimeoutRef = useRef(null);\n//   const [isConnected, setIsConnected] = useState(false);\n//   const [connectionStatus, setConnectionStatus] = useState('disconnected');\n//   const [messages, setMessages] = useState([]);\n//   const [error, setError] = useState(null);\n\n//   const getWebSocketUrl = useCallback(() => {\n//     const token = localStorage.getItem('token');\n//     if (!token) {\n//       setError('Authentication token not found');\n//       return null;\n//     }\n\n//     try {\n//       const wsUrl = new URL(url);\n//       wsUrl.searchParams.set('token', token);\n//       return wsUrl.toString();\n//     } catch (e) {\n//       console.error('Invalid WebSocket URL:', e);\n//       setError('Invalid WebSocket URL');\n//       return null;\n//     }\n//   }, [url]);\n\n//   const handleIncomingMessage = useCallback((data) => {\n//     if (data.type === 'AUTH_ERROR') {\n//       console.error('Authentication error:', data.message);\n//       setError(data.message);\n//       disconnect();\n//       localStorage.removeItem('token');\n//       window.location.reload();\n//       return;\n//     }\n//     setMessages(prev => [...prev, data]);\n//   }, []);\n\n//   const connect = useCallback(() => {\n//     const wsUrl = getWebSocketUrl();\n//     if (!wsUrl) return;\n\n//     if (socketRef.current && \n//       [WebSocket.OPEN, WebSocket.CONNECTING].includes(socketRef.current.readyState)) {\n//       console.warn('WebSocket already connecting or connected');\n//       return;\n//     }\n\n//     setConnectionStatus('connecting');\n//     console.log('Connecting to WebSocket...');\n\n//     socketRef.current = new WebSocket(wsUrl);\n\n//     socketRef.current.onopen = () => {\n//       console.log('WebSocket connected');\n//       setIsConnected(true);\n//       setConnectionStatus('connected');\n//       setError(null);\n//     };\n\n//     socketRef.current.onmessage = (event) => {\n//       try {\n//         const parsedData = JSON.parse(event.data);\n//         handleIncomingMessage(parsedData);\n//       } catch (e) {\n//         console.warn('Non-JSON message:', event.data);\n//         handleIncomingMessage({ content: event.data });\n//       }\n//     };\n\n//     socketRef.current.onerror = (event) => {\n//       console.error('WebSocket error:', event);\n//       setError('WebSocket connection error');\n//       setConnectionStatus('error');\n//     };\n\n//     socketRef.current.onclose = (event) => {\n//       console.log(`WebSocket closed: ${event.code} ${event.reason}`);\n//       setIsConnected(false);\n//       setConnectionStatus('disconnected');\n\n//       if (!event.wasClean && event.code !== 1000) {\n//         console.log('Reconnecting in 3 seconds...');\n//         reconnectTimeoutRef.current = setTimeout(() => {\n//           connect();\n//         }, 3000);\n//       }\n//     };\n//   }, [getWebSocketUrl, handleIncomingMessage]);\n\n//   const disconnect = useCallback((permanent = false) => {\n//     if (socketRef.current) {\n//       if (permanent) {\n//         socketRef.current.onclose = () => {};\n//       }\n//       socketRef.current.close(\n//         permanent ? 1000 : 1001,\n//         permanent ? 'Normal closure' : 'Reconnecting'\n//       );\n//     }\n//     if (reconnectTimeoutRef.current) {\n//       clearTimeout(reconnectTimeoutRef.current);\n//     }\n//   }, []);\n\n//   const sendMessage = useCallback((message) => {\n//     if (socketRef.current?.readyState === WebSocket.OPEN) {\n//       const messageWithAuth = {\n//         ...message,\n//         timestamp: new Date().toISOString(),\n//         user_id: parseInt(localStorage.getItem('userId'), 10),\n//         username: localStorage.getItem('username') || 'unknown',\n//       };\n//       const raw = localStorage.getItem('username');\n//       console.log('Stored username:', raw); // должно быть нормальное имя\n      \n//       try {\n//         socketRef.current.send(JSON.stringify(messageWithAuth));\n//       } catch (e) {\n//         console.error('Error sending message:', e);\n//         setError('Failed to send message');\n//       }\n//     } else {\n//       console.error('Cannot send message - WebSocket not open');\n//       setError('Connection not ready');\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     if (!manual) {\n//       connect();\n//     }\n\n//     return () => {\n//       disconnect(true);\n//     };\n//   }, [connect, disconnect, manual]);\n\n//   return {\n//     isConnected,\n//     connectionStatus,\n//     messages,\n//     sendMessage,\n//     connect,\n//     disconnect,\n//     error,\n//   };\n// }\n\n// export default useWebSocket;"],"mappings":"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CAAC,wBAAwB,CAAC;MACpC;IACF,CAAC,MAAM;MACLY,OAAO,CAACU,IAAI,CAAC,yCAAyC,CAAC;MACvDrB,YAAY,CAACuB,OAAO,CAACwC,IAAI,CAACJ,WAAW,CAAC;IACxC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN9E,SAAS,CAAC,MAAM;IACd,IAAI,CAACM,MAAM,EAAE;MACX8C,OAAO,CAAC,CAAC;IACX;IAEA,OAAO,MAAM;MACXoB,UAAU,CAAC,IAAI,CAAC;MAChBrD,YAAY,CAACuB,OAAO,GAAG,EAAE;IAC3B,CAAC;EACH,CAAC,EAAE,CAACU,OAAO,EAAEoB,UAAU,EAAElE,MAAM,CAAC,CAAC;EAEjC,OAAO;IACLK,WAAW;IACXE,gBAAgB;IAChBE,QAAQ;IACR6D,WAAW;IACXxB,OAAO;IACPoB,UAAU;IACVvD;EACF,CAAC;AACH;AAACV,EAAA,CAvKeH,YAAY;AAyK5B,eAAeA,YAAY;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}